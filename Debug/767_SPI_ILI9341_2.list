
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025e68  08009f60  08009f60  00019f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802fdc8  0802fdc8  000401d8  2**0
                  CONTENTS
  4 .ARM          00000008  0802fdc8  0802fdc8  0003fdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802fdd0  0802fdd0  000401d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802fdd0  0802fdd0  0003fdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802fdd4  0802fdd4  0003fdd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0802fdd8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  200001d8  0802ffb0  000401d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0802ffb0  00040624  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040206  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001900c  00000000  00000000  00040249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a71  00000000  00000000  00059255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  0005ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102d  00000000  00000000  0005e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b3b2  00000000  00000000  0005f1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d38f  00000000  00000000  0008a57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101c5d  00000000  00000000  000a790e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006848  00000000  00000000  001a956c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001afdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08009f48 	.word	0x08009f48

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	08009f48 	.word	0x08009f48

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <am2320_Init>:
 */


#include "am2320.h"

Am2320_HandleTypeDef am2320_Init(I2C_HandleTypeDef* i2c_handle,uint8_t device_address) {
 80005ec:	b490      	push	{r4, r7}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
	Am2320_HandleTypeDef AM2320_;
	AM2320_.i2c_handle = i2c_handle;
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	613b      	str	r3, [r7, #16]
	AM2320_.device_address = device_address;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	753b      	strb	r3, [r7, #20]
	return AM2320_;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	461c      	mov	r4, r3
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bc90      	pop	{r4, r7}
 8000618:	4770      	bx	lr
	...

0800061c <am2320_ReadValue>:

uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <am2320_ReadValue+0xa4>)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	4611      	mov	r1, r2
 800062e:	8019      	strh	r1, [r3, #0]
 8000630:	3302      	adds	r3, #2
 8000632:	0c12      	lsrs	r2, r2, #16
 8000634:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address, 0x00, 0,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	b299      	uxth	r1, r3
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2200      	movs	r2, #0
 800064a:	f002 fe4d 	bl	80032e8 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(1);
 800064e:	2001      	movs	r0, #1
 8000650:	f002 faa6 	bl	8002ba0 <HAL_Delay>
	if (HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address,registers, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	b299      	uxth	r1, r3
 800065e:	f107 020c 	add.w	r2, r7, #12
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2303      	movs	r3, #3
 800066a:	f002 fe3d 	bl	80032e8 <HAL_I2C_Master_Transmit>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <am2320_ReadValue+0x5c>
		return 1;
 8000674:	2301      	movs	r3, #1
 8000676:	e01f      	b.n	80006b8 <am2320_ReadValue+0x9c>
	}
	HAL_Delay(2);
 8000678:	2002      	movs	r0, #2
 800067a:	f002 fa91 	bl	8002ba0 <HAL_Delay>
	if (HAL_I2C_Master_Receive(am2320->i2c_handle, am2320->device_address,am2320->data, 8, HAL_MAX_DELAY) != HAL_OK) {
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	b299      	uxth	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	1d5a      	adds	r2, r3, #5
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2308      	movs	r3, #8
 8000694:	f002 ff1c 	bl	80034d0 <HAL_I2C_Master_Receive>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <am2320_ReadValue+0x86>
		return 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	e00a      	b.n	80006b8 <am2320_ReadValue+0x9c>
	}
	if (am2320->data[1] != 0x04 && am2320->data[0] != 0x03) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	799b      	ldrb	r3, [r3, #6]
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d005      	beq.n	80006b6 <am2320_ReadValue+0x9a>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	795b      	ldrb	r3, [r3, #5]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d001      	beq.n	80006b6 <am2320_ReadValue+0x9a>
		return 3;
 80006b2:	2303      	movs	r3, #3
 80006b4:	e000      	b.n	80006b8 <am2320_ReadValue+0x9c>
	}
	return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08009f60 	.word	0x08009f60

080006c4 <am2320_GetTemperatureAndHumidity>:

void am2320_GetTemperatureAndHumidity(Am2320_HandleTypeDef *am2320, float *temperature,float *humidity) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
	int read = am2320_ReadValue(am2320);
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f7ff ffa3 	bl	800061c <am2320_ReadValue>
 80006d6:	4603      	mov	r3, r0
 80006d8:	613b      	str	r3, [r7, #16]
	if (read) {
		// Simple exception handling
	}
	uint16_t temp_temperature = (am2320->data[5] | am2320->data[4] << 8);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	7a9b      	ldrb	r3, [r3, #10]
 80006de:	b21a      	sxth	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	7a5b      	ldrb	r3, [r3, #9]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	82fb      	strh	r3, [r7, #22]
	if (temp_temperature & 0x8000) {
 80006ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	da05      	bge.n	8000702 <am2320_GetTemperatureAndHumidity+0x3e>
		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 80006f6:	8afb      	ldrh	r3, [r7, #22]
 80006f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	425b      	negs	r3, r3
 8000700:	82fb      	strh	r3, [r7, #22]
	} else {
		temp_temperature = (int16_t) temp_temperature;
	}
	*temperature = (float) temp_temperature / 10.0;
 8000702:	8afb      	ldrh	r3, [r7, #22]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800070c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	edc3 7a00 	vstr	s15, [r3]
	*humidity = (float) (am2320->data[3] | am2320->data[2] << 8) / 10.0;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	7a1b      	ldrb	r3, [r3, #8]
 800071e:	461a      	mov	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	79db      	ldrb	r3, [r3, #7]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	4313      	orrs	r3, r2
 8000728:	ee07 3a90 	vmov	s15, r3
 800072c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000730:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000734:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	edc3 7a00 	vstr	s15, [r3]
}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	; 0x38
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	4b8d      	ldr	r3, [pc, #564]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a8c      	ldr	r2, [pc, #560]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b8a      	ldr	r3, [pc, #552]	; (8000994 <MX_GPIO_Init+0x24c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b87      	ldr	r3, [pc, #540]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a86      	ldr	r2, [pc, #536]	; (8000994 <MX_GPIO_Init+0x24c>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b84      	ldr	r3, [pc, #528]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	61fb      	str	r3, [r7, #28]
 800078c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078e:	4b81      	ldr	r3, [pc, #516]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a80      	ldr	r2, [pc, #512]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000794:	f043 0320 	orr.w	r3, r3, #32
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b7e      	ldr	r3, [pc, #504]	; (8000994 <MX_GPIO_Init+0x24c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0320 	and.w	r3, r3, #32
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	4b7b      	ldr	r3, [pc, #492]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a7a      	ldr	r2, [pc, #488]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b78      	ldr	r3, [pc, #480]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b75      	ldr	r3, [pc, #468]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a74      	ldr	r2, [pc, #464]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b72      	ldr	r3, [pc, #456]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b6f      	ldr	r3, [pc, #444]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a6e      	ldr	r2, [pc, #440]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b6c      	ldr	r3, [pc, #432]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b69      	ldr	r3, [pc, #420]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a68      	ldr	r2, [pc, #416]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b66      	ldr	r3, [pc, #408]	; (8000994 <MX_GPIO_Init+0x24c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	4b63      	ldr	r3, [pc, #396]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a62      	ldr	r2, [pc, #392]	; (8000994 <MX_GPIO_Init+0x24c>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b60      	ldr	r3, [pc, #384]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2168      	movs	r1, #104	; 0x68
 8000822:	485d      	ldr	r0, [pc, #372]	; (8000998 <MX_GPIO_Init+0x250>)
 8000824:	f002 fcb6 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800082e:	485b      	ldr	r0, [pc, #364]	; (800099c <MX_GPIO_Init+0x254>)
 8000830:	f002 fcb0 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2140      	movs	r1, #64	; 0x40
 8000838:	4859      	ldr	r0, [pc, #356]	; (80009a0 <MX_GPIO_Init+0x258>)
 800083a:	f002 fcab 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000844:	4857      	ldr	r0, [pc, #348]	; (80009a4 <MX_GPIO_Init+0x25c>)
 8000846:	f002 fca5 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 800084a:	2314      	movs	r3, #20
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	484e      	ldr	r0, [pc, #312]	; (8000998 <MX_GPIO_Init+0x250>)
 800085e:	f002 fad5 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000862:	2368      	movs	r3, #104	; 0x68
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	4847      	ldr	r0, [pc, #284]	; (8000998 <MX_GPIO_Init+0x250>)
 800087a:	f002 fac7 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 800087e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	4844      	ldr	r0, [pc, #272]	; (80009a4 <MX_GPIO_Init+0x25c>)
 8000894:	f002 faba 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000898:	2332      	movs	r3, #50	; 0x32
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a8:	230b      	movs	r3, #11
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	483c      	ldr	r0, [pc, #240]	; (80009a4 <MX_GPIO_Init+0x25c>)
 80008b4:	f002 faaa 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008b8:	2386      	movs	r3, #134	; 0x86
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c8:	230b      	movs	r3, #11
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	4835      	ldr	r0, [pc, #212]	; (80009a8 <MX_GPIO_Init+0x260>)
 80008d4:	f002 fa9a 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ea:	230b      	movs	r3, #11
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4829      	ldr	r0, [pc, #164]	; (800099c <MX_GPIO_Init+0x254>)
 80008f6:	f002 fa89 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008fa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	4822      	ldr	r0, [pc, #136]	; (800099c <MX_GPIO_Init+0x254>)
 8000914:	f002 fa7a 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	481c      	ldr	r0, [pc, #112]	; (80009a0 <MX_GPIO_Init+0x258>)
 8000930:	f002 fa6c 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <MX_GPIO_Init+0x258>)
 8000948:	f002 fa60 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 800094c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	480f      	ldr	r0, [pc, #60]	; (80009a4 <MX_GPIO_Init+0x25c>)
 8000966:	f002 fa51 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800096a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800097c:	230b      	movs	r3, #11
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_GPIO_Init+0x258>)
 8000988:	f002 fa40 	bl	8002e0c <HAL_GPIO_Init>

}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	; 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40021000 	.word	0x40021000
 800099c:	40020400 	.word	0x40020400
 80009a0:	40021800 	.word	0x40021800
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020000 	.word	0x40020000

080009ac <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <MX_I2C4_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_I2C4_Init+0x7c>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009e8:	f002 fbee 	bl	80031c8 <HAL_I2C_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009f2:	f000 fcd5 	bl	80013a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009fa:	f003 f8cb 	bl	8003b94 <HAL_I2CEx_ConfigAnalogFilter>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a04:	f000 fccc 	bl	80013a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_I2C4_Init+0x74>)
 8000a0c:	f003 f90d 	bl	8003c2a <HAL_I2CEx_ConfigDigitalFilter>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 fcc3 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200001f4 	.word	0x200001f4
 8000a24:	40006000 	.word	0x40006000
 8000a28:	00808cd2 	.word	0x00808cd2

08000a2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0ae      	sub	sp, #184	; 0xb8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2290      	movs	r2, #144	; 0x90
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f006 fd7a 	bl	8007546 <memset>
  if(i2cHandle->Instance==I2C4)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <HAL_I2C_MspInit+0xb4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d13d      	bne.n	8000ad8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 fe0d 	bl	800468c <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000a78:	f000 fc92 	bl	80013a0 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_I2C_MspInit+0xb8>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4a18      	ldr	r2, [pc, #96]	; (8000ae4 <HAL_I2C_MspInit+0xb8>)
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_I2C_MspInit+0xb8>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <HAL_I2C_MspInit+0xbc>)
 8000abc:	f002 f9a6 	bl	8002e0c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_I2C_MspInit+0xb8>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_I2C_MspInit+0xb8>)
 8000ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_I2C_MspInit+0xb8>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000ad8:	bf00      	nop
 8000ada:	37b8      	adds	r7, #184	; 0xb8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40006000 	.word	0x40006000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000af0:	f3bf 8f4f 	dsb	sy
}
 8000af4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000af6:	f3bf 8f6f 	isb	sy
}
 8000afa:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <SCB_EnableICache+0x48>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b04:	f3bf 8f4f 	dsb	sy
}
 8000b08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b0a:	f3bf 8f6f 	isb	sy
}
 8000b0e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <SCB_EnableICache+0x48>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <SCB_EnableICache+0x48>)
 8000b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b1c:	f3bf 8f4f 	dsb	sy
}
 8000b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b22:	f3bf 8f6f 	isb	sy
}
 8000b26:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <SCB_EnableDCache+0x84>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b46:	f3bf 8f4f 	dsb	sy
}
 8000b4a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <SCB_EnableDCache+0x84>)
 8000b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b52:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	0b5b      	lsrs	r3, r3, #13
 8000b58:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b5c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	08db      	lsrs	r3, r3, #3
 8000b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b66:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	015a      	lsls	r2, r3, #5
 8000b6c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b70:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b76:	4911      	ldr	r1, [pc, #68]	; (8000bbc <SCB_EnableDCache+0x84>)
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1e5a      	subs	r2, r3, #1
 8000b82:	60ba      	str	r2, [r7, #8]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1ef      	bne.n	8000b68 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	1e5a      	subs	r2, r3, #1
 8000b8c:	60fa      	str	r2, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1e5      	bne.n	8000b5e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b92:	f3bf 8f4f 	dsb	sy
}
 8000b96:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <SCB_EnableDCache+0x84>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <SCB_EnableDCache+0x84>)
 8000b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba4:	f3bf 8f4f 	dsb	sy
}
 8000ba8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000baa:	f3bf 8f6f 	isb	sy
}
 8000bae:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <rgb888_to_rgb565>:
/* USER CODE BEGIN 0 */
//void displayHEX(uint32_t myNumber){
//	sprintf(toHex,"0x%08X",myNumber);
//};

uint16_t rgb888_to_rgb565(uint8_t red8, uint8_t green8, uint8_t blue8) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	71bb      	strb	r3, [r7, #6]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	717b      	strb	r3, [r7, #5]
    // Convert 8-bit red to 5-bit red.
    uint8_t red5 = (uint8_t)((red8 / 255.0) * 31);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bdc:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000c78 <rgb888_to_rgb565+0xb8>
 8000be0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000be4:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 8000be8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bf0:	edc7 7a00 	vstr	s15, [r7]
 8000bf4:	783b      	ldrb	r3, [r7, #0]
 8000bf6:	75fb      	strb	r3, [r7, #23]
    // Convert 8-bit green to 6-bit green.
    uint8_t green6 = (uint8_t)((green8 / 255.0) * 63);
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	ee07 3a90 	vmov	s15, r3
 8000bfe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c02:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8000c78 <rgb888_to_rgb565+0xb8>
 8000c06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c0a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000c80 <rgb888_to_rgb565+0xc0>
 8000c0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c16:	edc7 7a00 	vstr	s15, [r7]
 8000c1a:	783b      	ldrb	r3, [r7, #0]
 8000c1c:	75bb      	strb	r3, [r7, #22]
    // Convert 8-bit blue to 5-bit blue.
    uint8_t blue5 = (uint8_t)((blue8 / 255.0) * 31);
 8000c1e:	797b      	ldrb	r3, [r7, #5]
 8000c20:	ee07 3a90 	vmov	s15, r3
 8000c24:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c28:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000c78 <rgb888_to_rgb565+0xb8>
 8000c2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c30:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 8000c34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c3c:	edc7 7a00 	vstr	s15, [r7]
 8000c40:	783b      	ldrb	r3, [r7, #0]
 8000c42:	757b      	strb	r3, [r7, #21]

    // Shift the red value to the left by 11 bits.
    uint16_t red5_shifted = (uint16_t)(red5) << 11;
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	02db      	lsls	r3, r3, #11
 8000c4a:	827b      	strh	r3, [r7, #18]
    // Shift the green value to the left by 5 bits.
    uint16_t green6_shifted = (uint16_t)(green6) << 5;
 8000c4c:	7dbb      	ldrb	r3, [r7, #22]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	015b      	lsls	r3, r3, #5
 8000c52:	823b      	strh	r3, [r7, #16]

    // Combine the red, green, and blue values.
    uint16_t rgb565 = red5_shifted | green6_shifted | blue5;
 8000c54:	8a7a      	ldrh	r2, [r7, #18]
 8000c56:	8a3b      	ldrh	r3, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	7d7b      	ldrb	r3, [r7, #21]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	4313      	orrs	r3, r2
 8000c62:	81fb      	strh	r3, [r7, #14]

    return rgb565;
 8000c64:	89fb      	ldrh	r3, [r7, #14]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	371c      	adds	r7, #28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	f3af 8000 	nop.w
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	406fe000 	.word	0x406fe000
 8000c80:	00000000 	.word	0x00000000
 8000c84:	404f8000 	.word	0x404f8000

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b0d3      	sub	sp, #332	; 0x14c
 8000c8c:	af02      	add	r7, sp, #8
	uint8_t cmdBuffer[3];
	uint8_t dataBuffer[8];
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000c8e:	f7ff ff2d 	bl	8000aec <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000c92:	f7ff ff51 	bl	8000b38 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c96:	f001 ff1d 	bl	8002ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9a:	f000 fb15 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9e:	f7ff fd53 	bl	8000748 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ca2:	f000 fdf1 	bl	8001888 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000ca6:	f000 fbc7 	bl	8001438 <MX_SPI5_Init>
  MX_RNG_Init();
 8000caa:	f000 fb7d 	bl	80013a8 <MX_RNG_Init>
  MX_TIM2_Init();
 8000cae:	f000 fd79 	bl	80017a4 <MX_TIM2_Init>
  MX_I2C4_Init();
 8000cb2:	f7ff fe7b 	bl	80009ac <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8000cb6:	f001 fad1 	bl	800225c <ILI9341_Init>


  sprintf(str, "\n\rAM2320 I2C DEMO Starting...\n\r");
 8000cba:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000cbe:	49cb      	ldr	r1, [pc, #812]	; (8000fec <main+0x364>)
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f006 fbaf 	bl	8007424 <siprintf>

  HAL_UART_Transmit(&huart3,(uint8_t*) str,strlen(str),200);
 8000cc6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fb08 	bl	80002e0 <strlen>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000cd8:	23c8      	movs	r3, #200	; 0xc8
 8000cda:	48c5      	ldr	r0, [pc, #788]	; (8000ff0 <main+0x368>)
 8000cdc:	f005 fa18 	bl	8006110 <HAL_UART_Transmit>

  cmdBuffer[0] = 0x03;
 8000ce0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ce8:	2203      	movs	r2, #3
 8000cea:	701a      	strb	r2, [r3, #0]
  cmdBuffer[1] = 0x00;
 8000cec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	705a      	strb	r2, [r3, #1]
  cmdBuffer[2] = 0x04;
 8000cf8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d00:	2204      	movs	r2, #4
 8000d02:	709a      	strb	r2, [r3, #2]

  Am2320_HandleTypeDef Am2320_;
  	Am2320_ = am2320_Init(&hi2c4, AM2320_ADDRESS);
 8000d04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d08:	f5a3 7490 	sub.w	r4, r3, #288	; 0x120
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	22b8      	movs	r2, #184	; 0xb8
 8000d10:	49b8      	ldr	r1, [pc, #736]	; (8000ff4 <main+0x36c>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fc6a 	bl	80005ec <am2320_Init>
 8000d18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000d20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (toSecondPage == 0){
 8000d26:	4bb4      	ldr	r3, [pc, #720]	; (8000ff8 <main+0x370>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d106      	bne.n	8000d3c <main+0xb4>
		  ILI9341_Fill_Screen(WHITE);
 8000d2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d32:	f001 fc3f 	bl	80025b4 <ILI9341_Fill_Screen>
		  toSecondPage = 2;
 8000d36:	4bb0      	ldr	r3, [pc, #704]	; (8000ff8 <main+0x370>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	701a      	strb	r2, [r3, #0]
	  }
	 am2320_GetTemperatureAndHumidity(&Am2320_, &temperature, &humidity);
 8000d3c:	f107 0218 	add.w	r2, r7, #24
 8000d40:	f107 011c 	add.w	r1, r7, #28
 8000d44:	f107 0320 	add.w	r3, r7, #32
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fcbb 	bl	80006c4 <am2320_GetTemperatureAndHumidity>
//	 my_printf("=====================================\r\n");
//	 		my_printf("Temperature: %.1fºC\r\n", temperature);
//	 		my_printf("Humidity: %.1f%%\r\n", humidity);
	 sprintf(human, "%.1f%% ",humidity);
 8000d4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000d56:	edd3 7a00 	vldr	s15, [r3]
 8000d5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d5e:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8000d62:	ec53 2b17 	vmov	r2, r3, d7
 8000d66:	49a5      	ldr	r1, [pc, #660]	; (8000ffc <main+0x374>)
 8000d68:	f006 fb5c 	bl	8007424 <siprintf>
	 sprintf(temp, "%.1f C",temperature);
 8000d6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000d74:	edd3 7a00 	vldr	s15, [r3]
 8000d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d7c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000d80:	ec53 2b17 	vmov	r2, r3, d7
 8000d84:	499e      	ldr	r1, [pc, #632]	; (8001000 <main+0x378>)
 8000d86:	f006 fb4d 	bl	8007424 <siprintf>


	  //----------------------------------------------------------PERFORMANCE TEST

	// if(toSecondPage == 0){
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1); //�?ลับข้อความ
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f001 fa08 	bl	80021a0 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text(temp, 30, 30, BLACK, 2, WHITE);
 8000d90:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	221e      	movs	r2, #30
 8000da2:	211e      	movs	r1, #30
 8000da4:	f000 ff4c 	bl	8001c40 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(human, 180, 30, BLACK, 2, WHITE);
 8000da8:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8000dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	2302      	movs	r3, #2
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2300      	movs	r3, #0
 8000db8:	221e      	movs	r2, #30
 8000dba:	21b4      	movs	r1, #180	; 0xb4
 8000dbc:	f000 ff40 	bl	8001c40 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Filled_Circle(160, 30,15, h);// x , y , r ,color
 8000dc0:	4b90      	ldr	r3, [pc, #576]	; (8001004 <main+0x37c>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	211e      	movs	r1, #30
 8000dc8:	20a0      	movs	r0, #160	; 0xa0
 8000dca:	f000 fe16 	bl	80019fa <ILI9341_Draw_Filled_Circle>
	  		/////////////////////////////////////////////////////////////////////////

	  		ILI9341_Draw_Filled_Circle(30, 80,15, 0XF800);
 8000dce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	2150      	movs	r1, #80	; 0x50
 8000dd6:	201e      	movs	r0, #30
 8000dd8:	f000 fe0f 	bl	80019fa <ILI9341_Draw_Filled_Circle>
	  		ILI9341_Draw_Rectangle(50, 70, 100,20, 0XF81F);//x , y , lx, ly ,color
 8000ddc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2314      	movs	r3, #20
 8000de4:	2264      	movs	r2, #100	; 0x64
 8000de6:	2146      	movs	r1, #70	; 0x46
 8000de8:	2032      	movs	r0, #50	; 0x32
 8000dea:	f001 fce3 	bl	80027b4 <ILI9341_Draw_Rectangle>

	  		//ILI9341_Draw_Rectangle(50, 70, 20,20, 0X07E0);
	  		if (redVal <= 10)
 8000dee:	4b86      	ldr	r3, [pc, #536]	; (8001008 <main+0x380>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b0a      	cmp	r3, #10
 8000df4:	d826      	bhi.n	8000e44 <main+0x1bc>
	  		{
	  			ILI9341_Draw_Rectangle(50, 70, redVal*10,20, 0XF800);//x , y , lx, ly ,color
 8000df6:	4b84      	ldr	r3, [pc, #528]	; (8001008 <main+0x380>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2314      	movs	r3, #20
 8000e0e:	2146      	movs	r1, #70	; 0x46
 8000e10:	2032      	movs	r0, #50	; 0x32
 8000e12:	f001 fccf 	bl	80027b4 <ILI9341_Draw_Rectangle>
	  			sprintf(redPercent,"%d%%    ",redVal*10);
 8000e16:	4b7c      	ldr	r3, [pc, #496]	; (8001008 <main+0x380>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	461a      	mov	r2, r3
 8000e26:	4979      	ldr	r1, [pc, #484]	; (800100c <main+0x384>)
 8000e28:	4879      	ldr	r0, [pc, #484]	; (8001010 <main+0x388>)
 8000e2a:	f006 fafb 	bl	8007424 <siprintf>
	  			ILI9341_Draw_Text(redPercent, 180, 70, BLACK, 2, WHITE);
 8000e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	2302      	movs	r3, #2
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2246      	movs	r2, #70	; 0x46
 8000e3c:	21b4      	movs	r1, #180	; 0xb4
 8000e3e:	4874      	ldr	r0, [pc, #464]	; (8001010 <main+0x388>)
 8000e40:	f000 fefe 	bl	8001c40 <ILI9341_Draw_Text>
//	  				redVal = 0;
//	  				redDecimal=0;
//	  			}
	  		}
	  		////////////////////////////////////green///////////////////////////////////
	  		ILI9341_Draw_Filled_Circle(30, 130,15, 0X07E0);
 8000e44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e48:	220f      	movs	r2, #15
 8000e4a:	2182      	movs	r1, #130	; 0x82
 8000e4c:	201e      	movs	r0, #30
 8000e4e:	f000 fdd4 	bl	80019fa <ILI9341_Draw_Filled_Circle>
			ILI9341_Draw_Rectangle(50, 120, 100,20, 0XC618);//x , y , lx, ly ,color
 8000e52:	f24c 6318 	movw	r3, #50712	; 0xc618
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2314      	movs	r3, #20
 8000e5a:	2264      	movs	r2, #100	; 0x64
 8000e5c:	2178      	movs	r1, #120	; 0x78
 8000e5e:	2032      	movs	r0, #50	; 0x32
 8000e60:	f001 fca8 	bl	80027b4 <ILI9341_Draw_Rectangle>
			if (greenVal <= 10)
 8000e64:	4b6b      	ldr	r3, [pc, #428]	; (8001014 <main+0x38c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b0a      	cmp	r3, #10
 8000e6a:	d826      	bhi.n	8000eba <main+0x232>
			{
				ILI9341_Draw_Rectangle(50, 120, greenVal*10,20, 0X07E0);//x , y , lx, ly ,color
 8000e6c:	4b69      	ldr	r3, [pc, #420]	; (8001014 <main+0x38c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2314      	movs	r3, #20
 8000e84:	2178      	movs	r1, #120	; 0x78
 8000e86:	2032      	movs	r0, #50	; 0x32
 8000e88:	f001 fc94 	bl	80027b4 <ILI9341_Draw_Rectangle>
				sprintf(greenPercent,"%d%%    ",greenVal*10);
 8000e8c:	4b61      	ldr	r3, [pc, #388]	; (8001014 <main+0x38c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	495b      	ldr	r1, [pc, #364]	; (800100c <main+0x384>)
 8000e9e:	485e      	ldr	r0, [pc, #376]	; (8001018 <main+0x390>)
 8000ea0:	f006 fac0 	bl	8007424 <siprintf>
				ILI9341_Draw_Text(greenPercent, 180, 120, BLACK, 2, WHITE);
 8000ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	2302      	movs	r3, #2
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	2278      	movs	r2, #120	; 0x78
 8000eb2:	21b4      	movs	r1, #180	; 0xb4
 8000eb4:	4858      	ldr	r0, [pc, #352]	; (8001018 <main+0x390>)
 8000eb6:	f000 fec3 	bl	8001c40 <ILI9341_Draw_Text>
//					greenVal = 0;
//					greenDecimal = 0;
//				}
			}
			////////////////////////////////////blue///////////////////////////////////
			ILI9341_Draw_Filled_Circle(30, 180,15, 0X001F);
 8000eba:	231f      	movs	r3, #31
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	21b4      	movs	r1, #180	; 0xb4
 8000ec0:	201e      	movs	r0, #30
 8000ec2:	f000 fd9a 	bl	80019fa <ILI9341_Draw_Filled_Circle>
			ILI9341_Draw_Rectangle(50, 170, 100,20, 0X07FF);//x , y , lx, ly ,color
 8000ec6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2314      	movs	r3, #20
 8000ece:	2264      	movs	r2, #100	; 0x64
 8000ed0:	21aa      	movs	r1, #170	; 0xaa
 8000ed2:	2032      	movs	r0, #50	; 0x32
 8000ed4:	f001 fc6e 	bl	80027b4 <ILI9341_Draw_Rectangle>
			if (blueVal <= 10)
 8000ed8:	4b50      	ldr	r3, [pc, #320]	; (800101c <main+0x394>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b0a      	cmp	r3, #10
 8000ede:	d82c      	bhi.n	8000f3a <main+0x2b2>
			{
				ILI9341_Draw_Rectangle(50, 170, blueVal*10,20, 0X001F);//x , y , lx, ly ,color
 8000ee0:	4b4e      	ldr	r3, [pc, #312]	; (800101c <main+0x394>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	0092      	lsls	r2, r2, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	231f      	movs	r3, #31
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2314      	movs	r3, #20
 8000ef6:	21aa      	movs	r1, #170	; 0xaa
 8000ef8:	2032      	movs	r0, #50	; 0x32
 8000efa:	f001 fc5b 	bl	80027b4 <ILI9341_Draw_Rectangle>
				sprintf(bluePercent,"%d%%    ",blueVal*10);
 8000efe:	4b47      	ldr	r3, [pc, #284]	; (800101c <main+0x394>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	493f      	ldr	r1, [pc, #252]	; (800100c <main+0x384>)
 8000f10:	4843      	ldr	r0, [pc, #268]	; (8001020 <main+0x398>)
 8000f12:	f006 fa87 	bl	8007424 <siprintf>
				ILI9341_Draw_Text(bluePercent, 180, 170, BLACK, 2, WHITE);
 8000f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2300      	movs	r3, #0
 8000f22:	22aa      	movs	r2, #170	; 0xaa
 8000f24:	21b4      	movs	r1, #180	; 0xb4
 8000f26:	483e      	ldr	r0, [pc, #248]	; (8001020 <main+0x398>)
 8000f28:	f000 fe8a 	bl	8001c40 <ILI9341_Draw_Text>
				sprintf(someValToString,"%d",blueDecimal);
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <main+0x39c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	493d      	ldr	r1, [pc, #244]	; (8001028 <main+0x3a0>)
 8000f34:	483d      	ldr	r0, [pc, #244]	; (800102c <main+0x3a4>)
 8000f36:	f006 fa75 	bl	8007424 <siprintf>
//					blueVal = 0;
//					blueDecimal =0;
//				}
			}

			result = rgb888_to_rgb565(redDecimal,greenDecimal, blueDecimal);
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <main+0x3a8>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4a3d      	ldr	r2, [pc, #244]	; (8001034 <main+0x3ac>)
 8000f40:	7811      	ldrb	r1, [r2, #0]
 8000f42:	4a38      	ldr	r2, [pc, #224]	; (8001024 <main+0x39c>)
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe3a 	bl	8000bc0 <rgb888_to_rgb565>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b39      	ldr	r3, [pc, #228]	; (8001038 <main+0x3b0>)
 8000f52:	801a      	strh	r2, [r3, #0]
			sprintf(resultHex,"0X%04X", result);
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <main+0x3b0>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4938      	ldr	r1, [pc, #224]	; (800103c <main+0x3b4>)
 8000f5c:	4838      	ldr	r0, [pc, #224]	; (8001040 <main+0x3b8>)
 8000f5e:	f006 fa61 	bl	8007424 <siprintf>
			ILI9341_Draw_Text(resultHex, 180, 210, BLACK, 2, WHITE);
 8000f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	2302      	movs	r3, #2
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	22d2      	movs	r2, #210	; 0xd2
 8000f70:	21b4      	movs	r1, #180	; 0xb4
 8000f72:	4833      	ldr	r0, [pc, #204]	; (8001040 <main+0x3b8>)
 8000f74:	f000 fe64 	bl	8001c40 <ILI9341_Draw_Text>

			sscanf(resultHex, "%x", &h);
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <main+0x37c>)
 8000f7a:	4932      	ldr	r1, [pc, #200]	; (8001044 <main+0x3bc>)
 8000f7c:	4830      	ldr	r0, [pc, #192]	; (8001040 <main+0x3b8>)
 8000f7e:	f006 fa71 	bl	8007464 <siscanf>

//	  		ILI9341_Fill_Screen(WHITE);
	  			  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f001 f90c 	bl	80021a0 <ILI9341_Set_Rotation>
//	  			  		ILI9341_Draw_Text("Touchscreen", 10, 10, BLACK, 2, WHITE);
//	  			  		ILI9341_Draw_Text("Touch to draw", 10, 30, BLACK, 2, WHITE);
	  			  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f001 f909 	bl	80021a0 <ILI9341_Set_Rotation>


//	  			  		while(1)
//	  			  		{

	  			  			if(TP_Touchpad_Pressed())
 8000f8e:	f001 fd91 	bl	8002ab4 <TP_Touchpad_Pressed>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80ef 	beq.w	8001178 <main+0x4f0>
	  			          {

	  			  					uint16_t x_pos = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	  			  					uint16_t y_pos = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c


	  			  					HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000fac:	4826      	ldr	r0, [pc, #152]	; (8001048 <main+0x3c0>)
 8000fae:	f002 f8f1 	bl	8003194 <HAL_GPIO_WritePin>

	  			            uint16_t position_array[2];

	  			  					if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fcba 	bl	8002930 <TP_Read_Coordinates>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	f040 8159 	bne.w	8001276 <main+0x5ee>
	  			  					{
	  			  					x_pos = position_array[0];
 8000fc4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	  			  					y_pos = position_array[1];
 8000fd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000fda:	885b      	ldrh	r3, [r3, #2]
 8000fdc:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	  			  					if((x_pos >= 146 && x_pos <=170) && (y_pos >=6 && y_pos <=34))//RedCheck
 8000fe0:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8000fe4:	2b91      	cmp	r3, #145	; 0x91
 8000fe6:	d954      	bls.n	8001092 <main+0x40a>
 8000fe8:	e030      	b.n	800104c <main+0x3c4>
 8000fea:	bf00      	nop
 8000fec:	08009f64 	.word	0x08009f64
 8000ff0:	2000044c 	.word	0x2000044c
 8000ff4:	200001f4 	.word	0x200001f4
 8000ff8:	20000384 	.word	0x20000384
 8000ffc:	08009f84 	.word	0x08009f84
 8001000:	08009f8c 	.word	0x08009f8c
 8001004:	2000024e 	.word	0x2000024e
 8001008:	20000248 	.word	0x20000248
 800100c:	08009f94 	.word	0x08009f94
 8001010:	20000284 	.word	0x20000284
 8001014:	20000249 	.word	0x20000249
 8001018:	200002b8 	.word	0x200002b8
 800101c:	2000024a 	.word	0x2000024a
 8001020:	200002ec 	.word	0x200002ec
 8001024:	2000024c 	.word	0x2000024c
 8001028:	08009fa0 	.word	0x08009fa0
 800102c:	20000250 	.word	0x20000250
 8001030:	2000024b 	.word	0x2000024b
 8001034:	2000024d 	.word	0x2000024d
 8001038:	2000031e 	.word	0x2000031e
 800103c:	08009fa4 	.word	0x08009fa4
 8001040:	20000320 	.word	0x20000320
 8001044:	08009fac 	.word	0x08009fac
 8001048:	40020400 	.word	0x40020400
 800104c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8001050:	2baa      	cmp	r3, #170	; 0xaa
 8001052:	d81e      	bhi.n	8001092 <main+0x40a>
 8001054:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8001058:	2b05      	cmp	r3, #5
 800105a:	d91a      	bls.n	8001092 <main+0x40a>
 800105c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8001060:	2b22      	cmp	r3, #34	; 0x22
 8001062:	d816      	bhi.n	8001092 <main+0x40a>
	  			  					{
	  			  						//ILI9341_Draw_Text("r", 180, 210, BLACK, 2, WHITE);
	  			  						redVal += 1;
 8001064:	4b88      	ldr	r3, [pc, #544]	; (8001288 <main+0x600>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b86      	ldr	r3, [pc, #536]	; (8001288 <main+0x600>)
 800106e:	701a      	strb	r2, [r3, #0]
	  			  						redDecimal+=25;
 8001070:	4b86      	ldr	r3, [pc, #536]	; (800128c <main+0x604>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	3319      	adds	r3, #25
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b84      	ldr	r3, [pc, #528]	; (800128c <main+0x604>)
 800107a:	701a      	strb	r2, [r3, #0]
	  			  						if(redVal == 11){
 800107c:	4b82      	ldr	r3, [pc, #520]	; (8001288 <main+0x600>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b0b      	cmp	r3, #11
 8001082:	d16a      	bne.n	800115a <main+0x4d2>
	  			  						  	redVal = 0;
 8001084:	4b80      	ldr	r3, [pc, #512]	; (8001288 <main+0x600>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	  			  						  	redDecimal=0;
 800108a:	4b80      	ldr	r3, [pc, #512]	; (800128c <main+0x604>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	  			  						if(redVal == 11){
 8001090:	e063      	b.n	800115a <main+0x4d2>
	  			  						 }
	  			  					}
	  			  					else if((x_pos >= 90 && x_pos <=119) && (y_pos >=9 && y_pos <=60))//GreenCheck
 8001092:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8001096:	2b59      	cmp	r3, #89	; 0x59
 8001098:	d922      	bls.n	80010e0 <main+0x458>
 800109a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800109e:	2b77      	cmp	r3, #119	; 0x77
 80010a0:	d81e      	bhi.n	80010e0 <main+0x458>
 80010a2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d91a      	bls.n	80010e0 <main+0x458>
 80010aa:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80010ae:	2b3c      	cmp	r3, #60	; 0x3c
 80010b0:	d816      	bhi.n	80010e0 <main+0x458>
	  			  					{
	  			  						//ILI9341_Draw_Text("g", 180, 210, BLACK, 2, WHITE);
	  			  						greenVal += 1;
 80010b2:	4b77      	ldr	r3, [pc, #476]	; (8001290 <main+0x608>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b75      	ldr	r3, [pc, #468]	; (8001290 <main+0x608>)
 80010bc:	701a      	strb	r2, [r3, #0]
	  			  						greenDecimal+=25;
 80010be:	4b75      	ldr	r3, [pc, #468]	; (8001294 <main+0x60c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3319      	adds	r3, #25
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b73      	ldr	r3, [pc, #460]	; (8001294 <main+0x60c>)
 80010c8:	701a      	strb	r2, [r3, #0]
	  			  						if(greenVal == 11){
 80010ca:	4b71      	ldr	r3, [pc, #452]	; (8001290 <main+0x608>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b0b      	cmp	r3, #11
 80010d0:	d143      	bne.n	800115a <main+0x4d2>
											greenVal = 0;
 80010d2:	4b6f      	ldr	r3, [pc, #444]	; (8001290 <main+0x608>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
											greenDecimal = 0;
 80010d8:	4b6e      	ldr	r3, [pc, #440]	; (8001294 <main+0x60c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
	  			  						if(greenVal == 11){
 80010de:	e03c      	b.n	800115a <main+0x4d2>
										}
	  			  					}
	  			  					else if((x_pos >= 44 && x_pos <=69) && (y_pos >=9 && y_pos <=42))//GreenCheck
 80010e0:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80010e4:	2b2b      	cmp	r3, #43	; 0x2b
 80010e6:	d922      	bls.n	800112e <main+0x4a6>
 80010e8:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80010ec:	2b45      	cmp	r3, #69	; 0x45
 80010ee:	d81e      	bhi.n	800112e <main+0x4a6>
 80010f0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d91a      	bls.n	800112e <main+0x4a6>
 80010f8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80010fc:	2b2a      	cmp	r3, #42	; 0x2a
 80010fe:	d816      	bhi.n	800112e <main+0x4a6>
	  			  					{
	  			  						//ILI9341_Draw_Text("b", 180, 210, BLACK, 2, WHITE);
	  			  						blueVal += 1;
 8001100:	4b65      	ldr	r3, [pc, #404]	; (8001298 <main+0x610>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b63      	ldr	r3, [pc, #396]	; (8001298 <main+0x610>)
 800110a:	701a      	strb	r2, [r3, #0]
	  			  						blueDecimal+=25;
 800110c:	4b63      	ldr	r3, [pc, #396]	; (800129c <main+0x614>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3319      	adds	r3, #25
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b61      	ldr	r3, [pc, #388]	; (800129c <main+0x614>)
 8001116:	701a      	strb	r2, [r3, #0]
	  			  						if(blueVal == 11){
 8001118:	4b5f      	ldr	r3, [pc, #380]	; (8001298 <main+0x610>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b0b      	cmp	r3, #11
 800111e:	d11c      	bne.n	800115a <main+0x4d2>
											blueVal = 0;
 8001120:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <main+0x610>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
											blueDecimal =0;
 8001126:	4b5d      	ldr	r3, [pc, #372]	; (800129c <main+0x614>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	  			  						if(blueVal == 11){
 800112c:	e015      	b.n	800115a <main+0x4d2>
										}
	  			  					}
	  			  					else if((x_pos >= 200 && x_pos <=231) && (y_pos >=145 && y_pos <=176))//Center Top
 800112e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8001132:	2bc7      	cmp	r3, #199	; 0xc7
 8001134:	d911      	bls.n	800115a <main+0x4d2>
 8001136:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800113a:	2be7      	cmp	r3, #231	; 0xe7
 800113c:	d80d      	bhi.n	800115a <main+0x4d2>
 800113e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8001142:	2b90      	cmp	r3, #144	; 0x90
 8001144:	d909      	bls.n	800115a <main+0x4d2>
 8001146:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800114a:	2bb0      	cmp	r3, #176	; 0xb0
 800114c:	d805      	bhi.n	800115a <main+0x4d2>
	  			  					{
	  			  						//ILI9341_Draw_Text("c", 180, 210, BLACK, 2, WHITE);
	  			  					once=0;
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <main+0x618>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	  			  						toSecondPage = 1;
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <main+0x61c>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
	  			  					}
	  			  					ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);
 800115a:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 800115e:	f8b7 013e 	ldrh.w	r0, [r7, #318]	; 0x13e
 8001162:	2300      	movs	r3, #0
 8001164:	2202      	movs	r2, #2
 8001166:	f000 fc48 	bl	80019fa <ILI9341_Draw_Filled_Circle>

	  			  					ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800116a:	2001      	movs	r0, #1
 800116c:	f001 f818 	bl	80021a0 <ILI9341_Set_Rotation>
//	  			  					char counter_buff[30];
//	  			  					sprintf(counter_buff, "POS X: %.3d", x_pos);
//	  			  					ILI9341_Draw_Text(counter_buff, 10, 80, BLACK, 2, WHITE);
//	  			  					sprintf(counter_buff, "POS Y: %.3d", y_pos);
//	  			  					ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
	  			  					ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001170:	2000      	movs	r0, #0
 8001172:	f001 f815 	bl	80021a0 <ILI9341_Set_Rotation>
 8001176:	e07e      	b.n	8001276 <main+0x5ee>

//	  			  					ILI9341_Draw_Pixel(x_pos, y_pos, BLACK);
	  			          }
	  			  			else
	  			  			{
	  			  				HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800117e:	484a      	ldr	r0, [pc, #296]	; (80012a8 <main+0x620>)
 8001180:	f002 f808 	bl	8003194 <HAL_GPIO_WritePin>

//	  			  		}
	 //}
//	  		ILI9341_Fill_Screen(WHITE);
	 	 	 	 	// else if(toSecondPage == 1){
	  			  		while(toSecondPage == 1){
 8001184:	e077      	b.n	8001276 <main+0x5ee>
//	  			  			ILI9341_Fill_Screen(WHITE);
	  			  			HAL_TIM_Base_Start_IT(&htim2);
 8001186:	4849      	ldr	r0, [pc, #292]	; (80012ac <main+0x624>)
 8001188:	f004 facc 	bl	8005724 <HAL_TIM_Base_Start_IT>
	  			  			if(once == 0){
 800118c:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <main+0x618>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d106      	bne.n	80011a2 <main+0x51a>
							ILI9341_Draw_Image((const char*)image_data_tot, SCREEN_VERTICAL_1);
 8001194:	2100      	movs	r1, #0
 8001196:	4846      	ldr	r0, [pc, #280]	; (80012b0 <main+0x628>)
 8001198:	f000 fd82 	bl	8001ca0 <ILI9341_Draw_Image>
	  			  			once = 1;
 800119c:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <main+0x618>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]

	  			  			}
							ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f000 fffc 	bl	80021a0 <ILI9341_Set_Rotation>
							ILI9341_Draw_Text("Group No.11", 135, 40, h, 2, WHITE);
 80011a8:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <main+0x62c>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b0:	9201      	str	r2, [sp, #4]
 80011b2:	2202      	movs	r2, #2
 80011b4:	9200      	str	r2, [sp, #0]
 80011b6:	2228      	movs	r2, #40	; 0x28
 80011b8:	2187      	movs	r1, #135	; 0x87
 80011ba:	483f      	ldr	r0, [pc, #252]	; (80012b8 <main+0x630>)
 80011bc:	f000 fd40 	bl	8001c40 <ILI9341_Draw_Text>
							ILI9341_Draw_Text("Sittha", 135, 80, h, 2, WHITE);
 80011c0:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <main+0x62c>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c8:	9201      	str	r2, [sp, #4]
 80011ca:	2202      	movs	r2, #2
 80011cc:	9200      	str	r2, [sp, #0]
 80011ce:	2250      	movs	r2, #80	; 0x50
 80011d0:	2187      	movs	r1, #135	; 0x87
 80011d2:	483a      	ldr	r0, [pc, #232]	; (80012bc <main+0x634>)
 80011d4:	f000 fd34 	bl	8001c40 <ILI9341_Draw_Text>
							ILI9341_Draw_Text("Onsaard", 135, 120, h, 2, WHITE);
 80011d8:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <main+0x62c>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e0:	9201      	str	r2, [sp, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	9200      	str	r2, [sp, #0]
 80011e6:	2278      	movs	r2, #120	; 0x78
 80011e8:	2187      	movs	r1, #135	; 0x87
 80011ea:	4835      	ldr	r0, [pc, #212]	; (80012c0 <main+0x638>)
 80011ec:	f000 fd28 	bl	8001c40 <ILI9341_Draw_Text>
							ILI9341_Draw_Text("64010889", 135, 160, h, 2, WHITE);
 80011f0:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <main+0x62c>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f8:	9201      	str	r2, [sp, #4]
 80011fa:	2202      	movs	r2, #2
 80011fc:	9200      	str	r2, [sp, #0]
 80011fe:	22a0      	movs	r2, #160	; 0xa0
 8001200:	2187      	movs	r1, #135	; 0x87
 8001202:	4830      	ldr	r0, [pc, #192]	; (80012c4 <main+0x63c>)
 8001204:	f000 fd1c 	bl	8001c40 <ILI9341_Draw_Text>
							ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001208:	2001      	movs	r0, #1
 800120a:	f000 ffc9 	bl	80021a0 <ILI9341_Set_Rotation>
							if(TP_Touchpad_Pressed())
 800120e:	f001 fc51 	bl	8002ab4 <TP_Touchpad_Pressed>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d02e      	beq.n	8001276 <main+0x5ee>
						  {

									uint16_t x_pos = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
									uint16_t y_pos = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138

//									HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);


							uint16_t position_array[2];
									if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fb81 	bl	8002930 <TP_Read_Coordinates>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d120      	bne.n	8001276 <main+0x5ee>
									{
									x_pos = position_array[0];
 8001234:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
									y_pos = position_array[1];
 8001242:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800124a:	885b      	ldrh	r3, [r3, #2]
 800124c:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
									if((x_pos >= 83 && x_pos <=178) && (y_pos >=8 && y_pos <=99))//IMG check
 8001250:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8001254:	2b52      	cmp	r3, #82	; 0x52
 8001256:	d90e      	bls.n	8001276 <main+0x5ee>
 8001258:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 800125c:	2bb2      	cmp	r3, #178	; 0xb2
 800125e:	d80a      	bhi.n	8001276 <main+0x5ee>
 8001260:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8001264:	2b07      	cmp	r3, #7
 8001266:	d906      	bls.n	8001276 <main+0x5ee>
 8001268:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800126c:	2b63      	cmp	r3, #99	; 0x63
 800126e:	d802      	bhi.n	8001276 <main+0x5ee>
									{
										toSecondPage = 0;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <main+0x61c>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
	  			  		while(toSecondPage == 1){
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <main+0x61c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d083      	beq.n	8001186 <main+0x4fe>
									}

									}
								}
	  			  		}
	  			  		HAL_TIM_Base_Stop_IT(&htim2);
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <main+0x624>)
 8001280:	f004 fac8 	bl	8005814 <HAL_TIM_Base_Stop_IT>
	  if (toSecondPage == 0){
 8001284:	e54f      	b.n	8000d26 <main+0x9e>
 8001286:	bf00      	nop
 8001288:	20000248 	.word	0x20000248
 800128c:	2000024b 	.word	0x2000024b
 8001290:	20000249 	.word	0x20000249
 8001294:	2000024d 	.word	0x2000024d
 8001298:	2000024a 	.word	0x2000024a
 800129c:	2000024c 	.word	0x2000024c
 80012a0:	20000385 	.word	0x20000385
 80012a4:	20000384 	.word	0x20000384
 80012a8:	40020400 	.word	0x40020400
 80012ac:	20000400 	.word	0x20000400
 80012b0:	08009fe4 	.word	0x08009fe4
 80012b4:	2000024e 	.word	0x2000024e
 80012b8:	08009fb0 	.word	0x08009fb0
 80012bc:	08009fbc 	.word	0x08009fbc
 80012c0:	08009fc4 	.word	0x08009fc4
 80012c4:	08009fcc 	.word	0x08009fcc

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	; 0x50
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	2234      	movs	r2, #52	; 0x34
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f006 f935 	bl	8007546 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012ec:	f002 fcea 	bl	8003cc4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <SystemClock_Config+0xd0>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a28      	ldr	r2, [pc, #160]	; (8001398 <SystemClock_Config+0xd0>)
 80012f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <SystemClock_Config+0xd0>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <SystemClock_Config+0xd4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001310:	4a22      	ldr	r2, [pc, #136]	; (800139c <SystemClock_Config+0xd4>)
 8001312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <SystemClock_Config+0xd4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001324:	2301      	movs	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001328:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800132c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132e:	2302      	movs	r3, #2
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001332:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001338:	2304      	movs	r3, #4
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 800133c:	2390      	movs	r3, #144	; 0x90
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001340:	2302      	movs	r3, #2
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001344:	2306      	movs	r3, #6
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001348:	2302      	movs	r3, #2
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fcc7 	bl	8003ce4 <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800135c:	f000 f820 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001360:	230f      	movs	r3, #15
 8001362:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001364:	2302      	movs	r3, #2
 8001366:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001370:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	2102      	movs	r1, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f002 ff5e 	bl	8004240 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800138a:	f000 f809 	bl	80013a0 <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3750      	adds	r7, #80	; 0x50
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x4>
	...

080013a8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_RNG_Init+0x20>)
 80013ae:	4a07      	ldr	r2, [pc, #28]	; (80013cc <MX_RNG_Init+0x24>)
 80013b0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_RNG_Init+0x20>)
 80013b4:	f003 fd92 	bl	8004edc <HAL_RNG_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80013be:	f7ff ffef 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000388 	.word	0x20000388
 80013cc:	50060800 	.word	0x50060800

080013d0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0a8      	sub	sp, #160	; 0xa0
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	2290      	movs	r2, #144	; 0x90
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f006 f8b0 	bl	8007546 <memset>
  if(rngHandle->Instance==RNG)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_RNG_MspInit+0x60>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d11b      	bne.n	8001428 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4618      	mov	r0, r3
 8001402:	f003 f943 	bl	800468c <HAL_RCCEx_PeriphCLKConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800140c:	f7ff ffc8 	bl	80013a0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_RNG_MspInit+0x64>)
 8001412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_RNG_MspInit+0x64>)
 8001416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141a:	6353      	str	r3, [r2, #52]	; 0x34
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_RNG_MspInit+0x64>)
 800141e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001428:	bf00      	nop
 800142a:	37a0      	adds	r7, #160	; 0xa0
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	50060800 	.word	0x50060800
 8001434:	40023800 	.word	0x40023800

08001438 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_SPI5_Init+0x74>)
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <MX_SPI5_Init+0x78>)
 8001440:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_SPI5_Init+0x74>)
 8001444:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001448:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_SPI5_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_SPI5_Init+0x74>)
 8001452:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001456:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_SPI5_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_SPI5_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_SPI5_Init+0x74>)
 8001466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_SPI5_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_SPI5_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_SPI5_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_SPI5_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_SPI5_Init+0x74>)
 8001486:	2207      	movs	r2, #7
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_SPI5_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_SPI5_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_SPI5_Init+0x74>)
 8001498:	f003 fd4a 	bl	8004f30 <HAL_SPI_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80014a2:	f7ff ff7d 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000398 	.word	0x20000398
 80014b0:	40015000 	.word	0x40015000

080014b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a17      	ldr	r2, [pc, #92]	; (8001530 <HAL_SPI_MspInit+0x7c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d128      	bne.n	8001528 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_SPI_MspInit+0x80>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <HAL_SPI_MspInit+0x80>)
 80014dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_SPI_MspInit+0x80>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_SPI_MspInit+0x80>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_SPI_MspInit+0x80>)
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_SPI_MspInit+0x80>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001506:	f44f 7360 	mov.w	r3, #896	; 0x380
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001518:	2305      	movs	r3, #5
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <HAL_SPI_MspInit+0x84>)
 8001524:	f001 fc72 	bl	8002e0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40015000 	.word	0x40015000
 8001534:	40023800 	.word	0x40023800
 8001538:	40021400 	.word	0x40021400

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_MspInit+0x44>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_MspInit+0x44>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_MspInit+0x44>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_MspInit+0x44>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_MspInit+0x44>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_MspInit+0x44>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001572:	2005      	movs	r0, #5
 8001574:	f001 fc08 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800

08001584 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f001 faea 	bl	8002b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <TIM2_IRQHandler+0x14>)
 8001596:	f004 f96c 	bl	8005872 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
//ILI9341_Fill_Screen(BLUE);
  toSecondPage = 0;
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <TIM2_IRQHandler+0x18>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
//  ILI9341_Fill_Screen(YELLOW);


  /* USER CODE END TIM2_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000400 	.word	0x20000400
 80015a8:	20000384 	.word	0x20000384

080015ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
	return 1;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_kill>:

int _kill(int pid, int sig)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015c6:	f006 f811 	bl	80075ec <__errno>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2216      	movs	r2, #22
 80015ce:	601a      	str	r2, [r3, #0]
	return -1;
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_exit>:

void _exit (int status)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ffe7 	bl	80015bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ee:	e7fe      	b.n	80015ee <_exit+0x12>

080015f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e00a      	b.n	8001618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001602:	f3af 8000 	nop.w
 8001606:	4601      	mov	r1, r0
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	60ba      	str	r2, [r7, #8]
 800160e:	b2ca      	uxtb	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf0      	blt.n	8001602 <_read+0x12>
	}

return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e009      	b.n	8001650 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	dbf1      	blt.n	800163c <_write+0x12>
	}
	return len;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_close>:

int _close(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	return -1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168a:	605a      	str	r2, [r3, #4]
	return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_isatty>:

int _isatty(int file)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
	return 1;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <_sbrk+0x5c>)
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <_sbrk+0x60>)
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <_sbrk+0x64>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <_sbrk+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d207      	bcs.n	800170c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016fc:	f005 ff76 	bl	80075ec <__errno>
 8001700:	4603      	mov	r3, r0
 8001702:	220c      	movs	r2, #12
 8001704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	e009      	b.n	8001720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <_sbrk+0x64>)
 800171c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20080000 	.word	0x20080000
 800172c:	00000400 	.word	0x00000400
 8001730:	200003fc 	.word	0x200003fc
 8001734:	20000628 	.word	0x20000628

08001738 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <SystemInit+0x5c>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001742:	4a14      	ldr	r2, [pc, #80]	; (8001794 <SystemInit+0x5c>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <SystemInit+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a11      	ldr	r2, [pc, #68]	; (8001798 <SystemInit+0x60>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <SystemInit+0x60>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <SystemInit+0x60>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <SystemInit+0x60>)
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <SystemInit+0x64>)
 8001766:	4013      	ands	r3, r2
 8001768:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <SystemInit+0x60>)
 800176c:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <SystemInit+0x68>)
 800176e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <SystemInit+0x60>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a08      	ldr	r2, [pc, #32]	; (8001798 <SystemInit+0x60>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x60>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SystemInit+0x5c>)
 8001784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001788:	609a      	str	r2, [r3, #8]
#endif
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00
 8001798:	40023800 	.word	0x40023800
 800179c:	fef6ffff 	.word	0xfef6ffff
 80017a0:	24003010 	.word	0x24003010

080017a4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <MX_TIM2_Init+0x98>)
 80017c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <MX_TIM2_Init+0x98>)
 80017cc:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80017d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_TIM2_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_TIM2_Init+0x98>)
 80017da:	f64e 2260 	movw	r2, #60000	; 0xea60
 80017de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <MX_TIM2_Init+0x98>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_TIM2_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ec:	4813      	ldr	r0, [pc, #76]	; (800183c <MX_TIM2_Init+0x98>)
 80017ee:	f003 ff41 	bl	8005674 <HAL_TIM_Base_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80017f8:	f7ff fdd2 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001800:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	4619      	mov	r1, r3
 8001808:	480c      	ldr	r0, [pc, #48]	; (800183c <MX_TIM2_Init+0x98>)
 800180a:	f004 f951 	bl	8005ab0 <HAL_TIM_ConfigClockSource>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001814:	f7ff fdc4 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_TIM2_Init+0x98>)
 8001826:	f004 fb79 	bl	8005f1c <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001830:	f7ff fdb6 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000400 	.word	0x20000400

08001840 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001850:	d113      	bne.n	800187a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_TIM_Base_MspInit+0x44>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_TIM_Base_MspInit+0x44>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_TIM_Base_MspInit+0x44>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2102      	movs	r1, #2
 800186e:	201c      	movs	r0, #28
 8001870:	f001 fa95 	bl	8002d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001874:	201c      	movs	r0, #28
 8001876:	f001 faae 	bl	8002dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_USART3_UART_Init+0x58>)
 800188e:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <MX_USART3_UART_Init+0x5c>)
 8001890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <MX_USART3_UART_Init+0x58>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_USART3_UART_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_USART3_UART_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_USART3_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_USART3_UART_Init+0x58>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_USART3_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_USART3_UART_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_USART3_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_USART3_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_USART3_UART_Init+0x58>)
 80018cc:	f004 fbd2 	bl	8006074 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018d6:	f7ff fd63 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000044c 	.word	0x2000044c
 80018e4:	40004800 	.word	0x40004800

080018e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0ae      	sub	sp, #184	; 0xb8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2290      	movs	r2, #144	; 0x90
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f005 fe1c 	bl	8007546 <memset>
  if(uartHandle->Instance==USART3)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_UART_MspInit+0xb4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d13c      	bne.n	8001992 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800191e:	2300      	movs	r3, #0
 8001920:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4618      	mov	r0, r3
 8001928:	f002 feb0 	bl	800468c <HAL_RCCEx_PeriphCLKConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001932:	f7ff fd35 	bl	80013a0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001966:	f44f 7340 	mov.w	r3, #768	; 0x300
 800196a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001980:	2307      	movs	r3, #7
 8001982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001986:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_UART_MspInit+0xbc>)
 800198e:	f001 fa3d 	bl	8002e0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001992:	bf00      	nop
 8001994:	37b8      	adds	r7, #184	; 0xb8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40004800 	.word	0x40004800
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020c00 	.word	0x40020c00

080019a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ae:	e003      	b.n	80019b8 <LoopCopyDataInit>

080019b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019b6:	3104      	adds	r1, #4

080019b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019b8:	480b      	ldr	r0, [pc, #44]	; (80019e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019c0:	d3f6      	bcc.n	80019b0 <CopyDataInit>
  ldr  r2, =_sbss
 80019c2:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019c4:	e002      	b.n	80019cc <LoopFillZerobss>

080019c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019c8:	f842 3b04 	str.w	r3, [r2], #4

080019cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019d0:	d3f9      	bcc.n	80019c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019d2:	f7ff feb1 	bl	8001738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d6:	f005 fe0f 	bl	80075f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019da:	f7ff f955 	bl	8000c88 <main>
  bx  lr    
 80019de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80019e4:	0802fdd8 	.word	0x0802fdd8
  ldr  r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019ec:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 80019f0:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 80019f4:	20000624 	.word	0x20000624

080019f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC_IRQHandler>

080019fa <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80019fa:	b590      	push	{r4, r7, lr}
 80019fc:	b08b      	sub	sp, #44	; 0x2c
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4604      	mov	r4, r0
 8001a02:	4608      	mov	r0, r1
 8001a04:	4611      	mov	r1, r2
 8001a06:	461a      	mov	r2, r3
 8001a08:	4623      	mov	r3, r4
 8001a0a:	80fb      	strh	r3, [r7, #6]
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	80bb      	strh	r3, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
 8001a14:	4613      	mov	r3, r2
 8001a16:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8001a18:	887b      	ldrh	r3, [r7, #2]
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	f1c3 0301 	rsb	r3, r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8001a32:	e061      	b.n	8001af8 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8001a34:	88fa      	ldrh	r2, [r7, #6]
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	e018      	b.n	8001a70 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	b298      	uxth	r0, r3
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	88bb      	ldrh	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	883a      	ldrh	r2, [r7, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f000 fdd6 	bl	8002600 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	b298      	uxth	r0, r3
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	88ba      	ldrh	r2, [r7, #4]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	883a      	ldrh	r2, [r7, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f000 fdcb 	bl	8002600 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	4413      	add	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dde0      	ble.n	8001a3e <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e018      	b.n	8001ab8 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	b298      	uxth	r0, r3
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	88bb      	ldrh	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	883a      	ldrh	r2, [r7, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	f000 fdb2 	bl	8002600 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	b298      	uxth	r0, r3
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	88ba      	ldrh	r2, [r7, #4]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	883a      	ldrh	r2, [r7, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f000 fda7 	bl	8002600 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	4413      	add	r3, r2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dde0      	ble.n	8001a86 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	4413      	add	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005a      	lsls	r2, r3, #1
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	4413      	add	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	dd09      	ble.n	8001af8 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	4413      	add	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3302      	adds	r3, #2
 8001af6:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8001af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	da99      	bge.n	8001a34 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	372c      	adds	r7, #44	; 0x2c
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
	...

08001b0c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	4604      	mov	r4, r0
 8001b14:	4608      	mov	r0, r1
 8001b16:	4611      	mov	r1, r2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71bb      	strb	r3, [r7, #6]
 8001b22:	460b      	mov	r3, r1
 8001b24:	717b      	strb	r3, [r7, #5]
 8001b26:	4613      	mov	r3, r2
 8001b28:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	2b1f      	cmp	r3, #31
 8001b32:	d802      	bhi.n	8001b3a <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	e002      	b.n	8001b40 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
 8001b3c:	3b20      	subs	r3, #32
 8001b3e:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	753b      	strb	r3, [r7, #20]
 8001b44:	e012      	b.n	8001b6c <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001b46:	7dfa      	ldrb	r2, [r7, #23]
 8001b48:	7d38      	ldrb	r0, [r7, #20]
 8001b4a:	7d39      	ldrb	r1, [r7, #20]
 8001b4c:	4c3b      	ldr	r4, [pc, #236]	; (8001c3c <ILI9341_Draw_Char+0x130>)
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4423      	add	r3, r4
 8001b58:	4403      	add	r3, r0
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	f101 0318 	add.w	r3, r1, #24
 8001b60:	443b      	add	r3, r7
 8001b62:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001b66:	7d3b      	ldrb	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	753b      	strb	r3, [r7, #20]
 8001b6c:	7d3b      	ldrb	r3, [r7, #20]
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d9e9      	bls.n	8001b46 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001b72:	79bb      	ldrb	r3, [r7, #6]
 8001b74:	b298      	uxth	r0, r3
 8001b76:	797b      	ldrb	r3, [r7, #5]
 8001b78:	b299      	uxth	r1, r3
 8001b7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	0052      	lsls	r2, r2, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	b29c      	uxth	r4, r3
 8001b8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4623      	mov	r3, r4
 8001b92:	f000 fe0f 	bl	80027b4 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	757b      	strb	r3, [r7, #21]
 8001b9a:	e047      	b.n	8001c2c <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	75bb      	strb	r3, [r7, #22]
 8001ba0:	e03e      	b.n	8001c20 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001ba2:	7d7b      	ldrb	r3, [r7, #21]
 8001ba4:	3318      	adds	r3, #24
 8001ba6:	443b      	add	r3, r7
 8001ba8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001bac:	461a      	mov	r2, r3
 8001bae:	7dbb      	ldrb	r3, [r7, #22]
 8001bb0:	fa42 f303 	asr.w	r3, r2, r3
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d02e      	beq.n	8001c1a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8001bbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d110      	bne.n	8001be4 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	7d7b      	ldrb	r3, [r7, #21]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	b298      	uxth	r0, r3
 8001bce:	797b      	ldrb	r3, [r7, #5]
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	7dbb      	ldrb	r3, [r7, #22]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f000 fd0f 	bl	8002600 <ILI9341_Draw_Pixel>
 8001be2:	e01a      	b.n	8001c1a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001be4:	79bb      	ldrb	r3, [r7, #6]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	7d7b      	ldrb	r3, [r7, #21]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001bee:	fb11 f303 	smulbb	r3, r1, r3
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b298      	uxth	r0, r3
 8001bf8:	797b      	ldrb	r3, [r7, #5]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	7dbb      	ldrb	r3, [r7, #22]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001c02:	fb11 f303 	smulbb	r3, r1, r3
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	b299      	uxth	r1, r3
 8001c0c:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001c0e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	4623      	mov	r3, r4
 8001c16:	f000 fdcd 	bl	80027b4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001c1a:	7dbb      	ldrb	r3, [r7, #22]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	75bb      	strb	r3, [r7, #22]
 8001c20:	7dbb      	ldrb	r3, [r7, #22]
 8001c22:	2b07      	cmp	r3, #7
 8001c24:	d9bd      	bls.n	8001ba2 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001c26:	7d7b      	ldrb	r3, [r7, #21]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	757b      	strb	r3, [r7, #21]
 8001c2c:	7d7b      	ldrb	r3, [r7, #21]
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d9b4      	bls.n	8001b9c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}
 8001c3c:	0802f7fc 	.word	0x0802f7fc

08001c40 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	70fb      	strb	r3, [r7, #3]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70bb      	strb	r3, [r7, #2]
 8001c56:	4613      	mov	r3, r2
 8001c58:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001c5a:	e017      	b.n	8001c8c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	7818      	ldrb	r0, [r3, #0]
 8001c64:	883c      	ldrh	r4, [r7, #0]
 8001c66:	78ba      	ldrb	r2, [r7, #2]
 8001c68:	78f9      	ldrb	r1, [r7, #3]
 8001c6a:	8bbb      	ldrh	r3, [r7, #28]
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	8b3b      	ldrh	r3, [r7, #24]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4623      	mov	r3, r4
 8001c74:	f7ff ff4a 	bl	8001b0c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001c78:	8b3b      	ldrh	r3, [r7, #24]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	0052      	lsls	r2, r2, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	4413      	add	r3, r2
 8001c8a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e3      	bne.n	8001c5c <ILI9341_Draw_Text+0x1c>
    }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}
	...

08001ca0 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001cac:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001cb0:	6018      	str	r0, [r3, #0]
 8001cb2:	460a      	mov	r2, r1
 8001cb4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001cb8:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001cbc:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8001cbe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001cc2:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d15e      	bne.n	8001d8a <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f000 fa67 	bl	80021a0 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8001cd2:	23f0      	movs	r3, #240	; 0xf0
 8001cd4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 f9f6 	bl	80020cc <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ce6:	48c4      	ldr	r0, [pc, #784]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001ce8:	f001 fa54 	bl	8003194 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf2:	48c1      	ldr	r0, [pc, #772]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001cf4:	f001 fa4e 	bl	8003194 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001d04:	e035      	b.n	8001d72 <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001d0c:	e019      	b.n	8001d42 <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001d0e:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001d12:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001d16:	4413      	add	r3, r2
 8001d18:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001d1c:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	7819      	ldrb	r1, [r3, #0]
 8001d26:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001d2a:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001d2e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001d32:	4413      	add	r3, r2
 8001d34:	460a      	mov	r2, r1
 8001d36:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001d38:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001d42:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001d46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d4a:	d3e0      	bcc.n	8001d0e <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001d4c:	f107 010c 	add.w	r1, r7, #12
 8001d50:	230a      	movs	r3, #10
 8001d52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d56:	48a9      	ldr	r0, [pc, #676]	; (8001ffc <ILI9341_Draw_Image+0x35c>)
 8001d58:	f003 f995 	bl	8005086 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001d5c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001d60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d64:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001d68:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001d72:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001d76:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001d7a:	d9c4      	bls.n	8001d06 <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d82:	489d      	ldr	r0, [pc, #628]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001d84:	f001 fa06 	bl	8003194 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 8001d88:	e130      	b.n	8001fec <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8001d8a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001d8e:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d15e      	bne.n	8001e56 <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 fa01 	bl	80021a0 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8001d9e:	23f0      	movs	r3, #240	; 0xf0
 8001da0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001da4:	2100      	movs	r1, #0
 8001da6:	2000      	movs	r0, #0
 8001da8:	f000 f990 	bl	80020cc <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db2:	4891      	ldr	r0, [pc, #580]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001db4:	f001 f9ee 	bl	8003194 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dbe:	488e      	ldr	r0, [pc, #568]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001dc0:	f001 f9e8 	bl	8003194 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001dd0:	e035      	b.n	8001e3e <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001dd8:	e019      	b.n	8001e0e <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001dda:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8001dde:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001de2:	4413      	add	r3, r2
 8001de4:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001de8:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	7819      	ldrb	r1, [r3, #0]
 8001df2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001df6:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001dfa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001dfe:	4413      	add	r3, r2
 8001e00:	460a      	mov	r2, r1
 8001e02:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001e04:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001e0e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001e12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e16:	d3e0      	bcc.n	8001dda <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001e18:	f107 010c 	add.w	r1, r7, #12
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e22:	4876      	ldr	r0, [pc, #472]	; (8001ffc <ILI9341_Draw_Image+0x35c>)
 8001e24:	f003 f92f 	bl	8005086 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001e28:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001e2c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001e30:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001e34:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001e3e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001e42:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001e46:	d9c4      	bls.n	8001dd2 <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e4e:	486a      	ldr	r0, [pc, #424]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001e50:	f001 f9a0 	bl	8003194 <HAL_GPIO_WritePin>
}
 8001e54:	e0ca      	b.n	8001fec <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 8001e56:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001e5a:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d15e      	bne.n	8001f22 <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8001e64:	2002      	movs	r0, #2
 8001e66:	f000 f99b 	bl	80021a0 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8001e6a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e6e:	22f0      	movs	r2, #240	; 0xf0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2000      	movs	r0, #0
 8001e74:	f000 f92a 	bl	80020cc <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e7e:	485e      	ldr	r0, [pc, #376]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001e80:	f001 f988 	bl	8003194 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e8a:	485b      	ldr	r0, [pc, #364]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001e8c:	f001 f982 	bl	8003194 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001e9c:	e035      	b.n	8001f0a <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001ea4:	e019      	b.n	8001eda <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001ea6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001eaa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001eae:	4413      	add	r3, r2
 8001eb0:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001eb4:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	7819      	ldrb	r1, [r3, #0]
 8001ebe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ec2:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001ec6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001eca:	4413      	add	r3, r2
 8001ecc:	460a      	mov	r2, r1
 8001ece:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001ed0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001eda:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001ede:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ee2:	d3e0      	bcc.n	8001ea6 <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001ee4:	f107 010c 	add.w	r1, r7, #12
 8001ee8:	230a      	movs	r3, #10
 8001eea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001eee:	4843      	ldr	r0, [pc, #268]	; (8001ffc <ILI9341_Draw_Image+0x35c>)
 8001ef0:	f003 f8c9 	bl	8005086 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001ef4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001ef8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001efc:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001f00:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001f04:	3301      	adds	r3, #1
 8001f06:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001f0a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001f0e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001f12:	d9c4      	bls.n	8001e9e <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f1a:	4837      	ldr	r0, [pc, #220]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001f1c:	f001 f93a 	bl	8003194 <HAL_GPIO_WritePin>
}
 8001f20:	e064      	b.n	8001fec <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 8001f22:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001f26:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d15d      	bne.n	8001fec <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f000 f935 	bl	80021a0 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8001f36:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f3a:	22f0      	movs	r2, #240	; 0xf0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 f8c4 	bl	80020cc <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001f44:	2201      	movs	r2, #1
 8001f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f4a:	482b      	ldr	r0, [pc, #172]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001f4c:	f001 f922 	bl	8003194 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f56:	4828      	ldr	r0, [pc, #160]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001f58:	f001 f91c 	bl	8003194 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001f68:	e035      	b.n	8001fd6 <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001f70:	e019      	b.n	8001fa6 <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001f72:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8001f76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001f80:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	7819      	ldrb	r1, [r3, #0]
 8001f8a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001f8e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001f92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f96:	4413      	add	r3, r2
 8001f98:	460a      	mov	r2, r1
 8001f9a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001f9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001fa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001faa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fae:	d3e0      	bcc.n	8001f72 <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001fb0:	f107 010c 	add.w	r1, r7, #12
 8001fb4:	230a      	movs	r3, #10
 8001fb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fba:	4810      	ldr	r0, [pc, #64]	; (8001ffc <ILI9341_Draw_Image+0x35c>)
 8001fbc:	f003 f863 	bl	8005086 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001fc0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001fc4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001fc8:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001fcc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001fd6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001fda:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001fde:	d9c4      	bls.n	8001f6a <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe6:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <ILI9341_Draw_Image+0x358>)
 8001fe8:	f001 f8d4 	bl	8003194 <HAL_GPIO_WritePin>
}
 8001fec:	bf00      	nop
 8001fee:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	20000398 	.word	0x20000398

08002000 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8002004:	f7ff fa18 	bl	8001438 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002008:	f7fe fb9e 	bl	8000748 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800200c:	2200      	movs	r2, #0
 800200e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002012:	4802      	ldr	r0, [pc, #8]	; (800201c <ILI9341_SPI_Init+0x1c>)
 8002014:	f001 f8be 	bl	8003194 <HAL_GPIO_WritePin>
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40020800 	.word	0x40020800

08002020 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800202a:	1df9      	adds	r1, r7, #7
 800202c:	2301      	movs	r3, #1
 800202e:	2201      	movs	r2, #1
 8002030:	4803      	ldr	r0, [pc, #12]	; (8002040 <ILI9341_SPI_Send+0x20>)
 8002032:	f003 f828 	bl	8005086 <HAL_SPI_Transmit>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000398 	.word	0x20000398

08002044 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002054:	480b      	ldr	r0, [pc, #44]	; (8002084 <ILI9341_Write_Command+0x40>)
 8002056:	f001 f89d 	bl	8003194 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002060:	4808      	ldr	r0, [pc, #32]	; (8002084 <ILI9341_Write_Command+0x40>)
 8002062:	f001 f897 	bl	8003194 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ffd9 	bl	8002020 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800206e:	2201      	movs	r2, #1
 8002070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <ILI9341_Write_Command+0x40>)
 8002076:	f001 f88d 	bl	8003194 <HAL_GPIO_WritePin>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020800 	.word	0x40020800

08002088 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002092:	2201      	movs	r2, #1
 8002094:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002098:	480b      	ldr	r0, [pc, #44]	; (80020c8 <ILI9341_Write_Data+0x40>)
 800209a:	f001 f87b 	bl	8003194 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a4:	4808      	ldr	r0, [pc, #32]	; (80020c8 <ILI9341_Write_Data+0x40>)
 80020a6:	f001 f875 	bl	8003194 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ffb7 	bl	8002020 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b8:	4803      	ldr	r0, [pc, #12]	; (80020c8 <ILI9341_Write_Data+0x40>)
 80020ba:	f001 f86b 	bl	8003194 <HAL_GPIO_WritePin>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40020800 	.word	0x40020800

080020cc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4604      	mov	r4, r0
 80020d4:	4608      	mov	r0, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	80fb      	strh	r3, [r7, #6]
 80020de:	4603      	mov	r3, r0
 80020e0:	80bb      	strh	r3, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	807b      	strh	r3, [r7, #2]
 80020e6:	4613      	mov	r3, r2
 80020e8:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80020ea:	202a      	movs	r0, #42	; 0x2a
 80020ec:	f7ff ffaa 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ffc5 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ffc0 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	b29b      	uxth	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ffb9 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ffb4 	bl	8002088 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002120:	202b      	movs	r0, #43	; 0x2b
 8002122:	f7ff ff8f 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	b29b      	uxth	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff ffaa 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002134:	88bb      	ldrh	r3, [r7, #4]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ffa5 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800213e:	883b      	ldrh	r3, [r7, #0]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	b29b      	uxth	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff9e 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800214c:	883b      	ldrh	r3, [r7, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff99 	bl	8002088 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002156:	202c      	movs	r0, #44	; 0x2c
 8002158:	f7ff ff74 	bl	8002044 <ILI9341_Write_Command>
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}

08002164 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800216e:	480b      	ldr	r0, [pc, #44]	; (800219c <ILI9341_Reset+0x38>)
 8002170:	f001 f810 	bl	8003194 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002174:	20c8      	movs	r0, #200	; 0xc8
 8002176:	f000 fd13 	bl	8002ba0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002180:	4806      	ldr	r0, [pc, #24]	; (800219c <ILI9341_Reset+0x38>)
 8002182:	f001 f807 	bl	8003194 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002186:	20c8      	movs	r0, #200	; 0xc8
 8002188:	f000 fd0a 	bl	8002ba0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800218c:	2201      	movs	r2, #1
 800218e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002192:	4802      	ldr	r0, [pc, #8]	; (800219c <ILI9341_Reset+0x38>)
 8002194:	f000 fffe 	bl	8003194 <HAL_GPIO_WritePin>
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40020800 	.word	0x40020800

080021a0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80021ae:	2036      	movs	r0, #54	; 0x36
 80021b0:	f7ff ff48 	bl	8002044 <ILI9341_Write_Command>
HAL_Delay(1);
 80021b4:	2001      	movs	r0, #1
 80021b6:	f000 fcf3 	bl	8002ba0 <HAL_Delay>
	
switch(screen_rotation) 
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d837      	bhi.n	8002230 <ILI9341_Set_Rotation+0x90>
 80021c0:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <ILI9341_Set_Rotation+0x28>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021ef 	.word	0x080021ef
 80021d0:	08002205 	.word	0x08002205
 80021d4:	0800221b 	.word	0x0800221b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80021d8:	2048      	movs	r0, #72	; 0x48
 80021da:	f7ff ff55 	bl	8002088 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <ILI9341_Set_Rotation+0x9c>)
 80021e0:	22f0      	movs	r2, #240	; 0xf0
 80021e2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <ILI9341_Set_Rotation+0xa0>)
 80021e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021ea:	801a      	strh	r2, [r3, #0]
			break;
 80021ec:	e021      	b.n	8002232 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80021ee:	2028      	movs	r0, #40	; 0x28
 80021f0:	f7ff ff4a 	bl	8002088 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <ILI9341_Set_Rotation+0x9c>)
 80021f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021fa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80021fc:	4b10      	ldr	r3, [pc, #64]	; (8002240 <ILI9341_Set_Rotation+0xa0>)
 80021fe:	22f0      	movs	r2, #240	; 0xf0
 8002200:	801a      	strh	r2, [r3, #0]
			break;
 8002202:	e016      	b.n	8002232 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002204:	2088      	movs	r0, #136	; 0x88
 8002206:	f7ff ff3f 	bl	8002088 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <ILI9341_Set_Rotation+0x9c>)
 800220c:	22f0      	movs	r2, #240	; 0xf0
 800220e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <ILI9341_Set_Rotation+0xa0>)
 8002212:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002216:	801a      	strh	r2, [r3, #0]
			break;
 8002218:	e00b      	b.n	8002232 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800221a:	20e8      	movs	r0, #232	; 0xe8
 800221c:	f7ff ff34 	bl	8002088 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <ILI9341_Set_Rotation+0x9c>)
 8002222:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002226:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <ILI9341_Set_Rotation+0xa0>)
 800222a:	22f0      	movs	r2, #240	; 0xf0
 800222c:	801a      	strh	r2, [r3, #0]
			break;
 800222e:	e000      	b.n	8002232 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002230:	bf00      	nop
	}
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000006 	.word	0x20000006
 8002240:	20000004 	.word	0x20000004

08002244 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002248:	2201      	movs	r2, #1
 800224a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800224e:	4802      	ldr	r0, [pc, #8]	; (8002258 <ILI9341_Enable+0x14>)
 8002250:	f000 ffa0 	bl	8003194 <HAL_GPIO_WritePin>
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40020800 	.word	0x40020800

0800225c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002260:	f7ff fff0 	bl	8002244 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002264:	f7ff fecc 	bl	8002000 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002268:	f7ff ff7c 	bl	8002164 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800226c:	2001      	movs	r0, #1
 800226e:	f7ff fee9 	bl	8002044 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002276:	f000 fc93 	bl	8002ba0 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800227a:	20cb      	movs	r0, #203	; 0xcb
 800227c:	f7ff fee2 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002280:	2039      	movs	r0, #57	; 0x39
 8002282:	f7ff ff01 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002286:	202c      	movs	r0, #44	; 0x2c
 8002288:	f7ff fefe 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800228c:	2000      	movs	r0, #0
 800228e:	f7ff fefb 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002292:	2034      	movs	r0, #52	; 0x34
 8002294:	f7ff fef8 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002298:	2002      	movs	r0, #2
 800229a:	f7ff fef5 	bl	8002088 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800229e:	20cf      	movs	r0, #207	; 0xcf
 80022a0:	f7ff fed0 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff feef 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80022aa:	20c1      	movs	r0, #193	; 0xc1
 80022ac:	f7ff feec 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80022b0:	2030      	movs	r0, #48	; 0x30
 80022b2:	f7ff fee9 	bl	8002088 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80022b6:	20e8      	movs	r0, #232	; 0xe8
 80022b8:	f7ff fec4 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80022bc:	2085      	movs	r0, #133	; 0x85
 80022be:	f7ff fee3 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff fee0 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80022c8:	2078      	movs	r0, #120	; 0x78
 80022ca:	f7ff fedd 	bl	8002088 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80022ce:	20ea      	movs	r0, #234	; 0xea
 80022d0:	f7ff feb8 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff fed7 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80022da:	2000      	movs	r0, #0
 80022dc:	f7ff fed4 	bl	8002088 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80022e0:	20ed      	movs	r0, #237	; 0xed
 80022e2:	f7ff feaf 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80022e6:	2064      	movs	r0, #100	; 0x64
 80022e8:	f7ff fece 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f7ff fecb 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80022f2:	2012      	movs	r0, #18
 80022f4:	f7ff fec8 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80022f8:	2081      	movs	r0, #129	; 0x81
 80022fa:	f7ff fec5 	bl	8002088 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80022fe:	20f7      	movs	r0, #247	; 0xf7
 8002300:	f7ff fea0 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002304:	2020      	movs	r0, #32
 8002306:	f7ff febf 	bl	8002088 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800230a:	20c0      	movs	r0, #192	; 0xc0
 800230c:	f7ff fe9a 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002310:	2023      	movs	r0, #35	; 0x23
 8002312:	f7ff feb9 	bl	8002088 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002316:	20c1      	movs	r0, #193	; 0xc1
 8002318:	f7ff fe94 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800231c:	2010      	movs	r0, #16
 800231e:	f7ff feb3 	bl	8002088 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002322:	20c5      	movs	r0, #197	; 0xc5
 8002324:	f7ff fe8e 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002328:	203e      	movs	r0, #62	; 0x3e
 800232a:	f7ff fead 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800232e:	2028      	movs	r0, #40	; 0x28
 8002330:	f7ff feaa 	bl	8002088 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002334:	20c7      	movs	r0, #199	; 0xc7
 8002336:	f7ff fe85 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800233a:	2086      	movs	r0, #134	; 0x86
 800233c:	f7ff fea4 	bl	8002088 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002340:	2036      	movs	r0, #54	; 0x36
 8002342:	f7ff fe7f 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002346:	2048      	movs	r0, #72	; 0x48
 8002348:	f7ff fe9e 	bl	8002088 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800234c:	203a      	movs	r0, #58	; 0x3a
 800234e:	f7ff fe79 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002352:	2055      	movs	r0, #85	; 0x55
 8002354:	f7ff fe98 	bl	8002088 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002358:	20b1      	movs	r0, #177	; 0xb1
 800235a:	f7ff fe73 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800235e:	2000      	movs	r0, #0
 8002360:	f7ff fe92 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002364:	2018      	movs	r0, #24
 8002366:	f7ff fe8f 	bl	8002088 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800236a:	20b6      	movs	r0, #182	; 0xb6
 800236c:	f7ff fe6a 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002370:	2008      	movs	r0, #8
 8002372:	f7ff fe89 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002376:	2082      	movs	r0, #130	; 0x82
 8002378:	f7ff fe86 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800237c:	2027      	movs	r0, #39	; 0x27
 800237e:	f7ff fe83 	bl	8002088 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002382:	20f2      	movs	r0, #242	; 0xf2
 8002384:	f7ff fe5e 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff fe7d 	bl	8002088 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800238e:	2026      	movs	r0, #38	; 0x26
 8002390:	f7ff fe58 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002394:	2001      	movs	r0, #1
 8002396:	f7ff fe77 	bl	8002088 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800239a:	20e0      	movs	r0, #224	; 0xe0
 800239c:	f7ff fe52 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80023a0:	200f      	movs	r0, #15
 80023a2:	f7ff fe71 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80023a6:	2031      	movs	r0, #49	; 0x31
 80023a8:	f7ff fe6e 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80023ac:	202b      	movs	r0, #43	; 0x2b
 80023ae:	f7ff fe6b 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80023b2:	200c      	movs	r0, #12
 80023b4:	f7ff fe68 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80023b8:	200e      	movs	r0, #14
 80023ba:	f7ff fe65 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80023be:	2008      	movs	r0, #8
 80023c0:	f7ff fe62 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80023c4:	204e      	movs	r0, #78	; 0x4e
 80023c6:	f7ff fe5f 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80023ca:	20f1      	movs	r0, #241	; 0xf1
 80023cc:	f7ff fe5c 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80023d0:	2037      	movs	r0, #55	; 0x37
 80023d2:	f7ff fe59 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80023d6:	2007      	movs	r0, #7
 80023d8:	f7ff fe56 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80023dc:	2010      	movs	r0, #16
 80023de:	f7ff fe53 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80023e2:	2003      	movs	r0, #3
 80023e4:	f7ff fe50 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80023e8:	200e      	movs	r0, #14
 80023ea:	f7ff fe4d 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80023ee:	2009      	movs	r0, #9
 80023f0:	f7ff fe4a 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff fe47 	bl	8002088 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80023fa:	20e1      	movs	r0, #225	; 0xe1
 80023fc:	f7ff fe22 	bl	8002044 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff fe41 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002406:	200e      	movs	r0, #14
 8002408:	f7ff fe3e 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800240c:	2014      	movs	r0, #20
 800240e:	f7ff fe3b 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002412:	2003      	movs	r0, #3
 8002414:	f7ff fe38 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002418:	2011      	movs	r0, #17
 800241a:	f7ff fe35 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800241e:	2007      	movs	r0, #7
 8002420:	f7ff fe32 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002424:	2031      	movs	r0, #49	; 0x31
 8002426:	f7ff fe2f 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800242a:	20c1      	movs	r0, #193	; 0xc1
 800242c:	f7ff fe2c 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002430:	2048      	movs	r0, #72	; 0x48
 8002432:	f7ff fe29 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002436:	2008      	movs	r0, #8
 8002438:	f7ff fe26 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800243c:	200f      	movs	r0, #15
 800243e:	f7ff fe23 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002442:	200c      	movs	r0, #12
 8002444:	f7ff fe20 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002448:	2031      	movs	r0, #49	; 0x31
 800244a:	f7ff fe1d 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800244e:	2036      	movs	r0, #54	; 0x36
 8002450:	f7ff fe1a 	bl	8002088 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002454:	200f      	movs	r0, #15
 8002456:	f7ff fe17 	bl	8002088 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800245a:	2011      	movs	r0, #17
 800245c:	f7ff fdf2 	bl	8002044 <ILI9341_Write_Command>
HAL_Delay(120);
 8002460:	2078      	movs	r0, #120	; 0x78
 8002462:	f000 fb9d 	bl	8002ba0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002466:	2029      	movs	r0, #41	; 0x29
 8002468:	f7ff fdec 	bl	8002044 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800246c:	2000      	movs	r0, #0
 800246e:	f7ff fe97 	bl	80021a0 <ILI9341_Set_Rotation>
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800247c:	b08d      	sub	sp, #52	; 0x34
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	6039      	str	r1, [r7, #0]
 8002484:	80fb      	strh	r3, [r7, #6]
 8002486:	466b      	mov	r3, sp
 8002488:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002496:	d202      	bcs.n	800249e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249c:	e002      	b.n	80024a4 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800249e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024aa:	4840      	ldr	r0, [pc, #256]	; (80025ac <ILI9341_Draw_Colour_Burst+0x134>)
 80024ac:	f000 fe72 	bl	8003194 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b6:	483d      	ldr	r0, [pc, #244]	; (80025ac <ILI9341_Draw_Colour_Burst+0x134>)
 80024b8:	f000 fe6c 	bl	8003194 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80024c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024c8:	460b      	mov	r3, r1
 80024ca:	3b01      	subs	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	2300      	movs	r3, #0
 80024d0:	4688      	mov	r8, r1
 80024d2:	4699      	mov	r9, r3
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024e8:	2300      	movs	r3, #0
 80024ea:	460c      	mov	r4, r1
 80024ec:	461d      	mov	r5, r3
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	00eb      	lsls	r3, r5, #3
 80024f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024fc:	00e2      	lsls	r2, r4, #3
 80024fe:	1dcb      	adds	r3, r1, #7
 8002500:	08db      	lsrs	r3, r3, #3
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	ebad 0d03 	sub.w	sp, sp, r3
 8002508:	466b      	mov	r3, sp
 800250a:	3300      	adds	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800250e:	2300      	movs	r3, #0
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
 8002512:	e00e      	b.n	8002532 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	4413      	add	r3, r2
 800251a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800251e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002522:	3301      	adds	r3, #1
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	b2d1      	uxtb	r1, r2
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	3302      	adds	r3, #2
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
 8002532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	429a      	cmp	r2, r3
 8002538:	d3ec      	bcc.n	8002514 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002554:	fb01 f202 	mul.w	r2, r1, r2
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d010      	beq.n	8002584 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
 8002566:	e009      	b.n	800257c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	b29a      	uxth	r2, r3
 800256c:	230a      	movs	r3, #10
 800256e:	69b9      	ldr	r1, [r7, #24]
 8002570:	480f      	ldr	r0, [pc, #60]	; (80025b0 <ILI9341_Draw_Colour_Burst+0x138>)
 8002572:	f002 fd88 	bl	8005086 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	3301      	adds	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d3f1      	bcc.n	8002568 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	b29a      	uxth	r2, r3
 8002588:	230a      	movs	r3, #10
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	4808      	ldr	r0, [pc, #32]	; (80025b0 <ILI9341_Draw_Colour_Burst+0x138>)
 800258e:	f002 fd7a 	bl	8005086 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002592:	2201      	movs	r2, #1
 8002594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002598:	4804      	ldr	r0, [pc, #16]	; (80025ac <ILI9341_Draw_Colour_Burst+0x134>)
 800259a:	f000 fdfb 	bl	8003194 <HAL_GPIO_WritePin>
 800259e:	46b5      	mov	sp, r6
}
 80025a0:	bf00      	nop
 80025a2:	3734      	adds	r7, #52	; 0x34
 80025a4:	46bd      	mov	sp, r7
 80025a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025aa:	bf00      	nop
 80025ac:	40020800 	.word	0x40020800
 80025b0:	20000398 	.word	0x20000398

080025b4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <ILI9341_Fill_Screen+0x44>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <ILI9341_Fill_Screen+0x48>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2100      	movs	r1, #0
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7ff fd7d 	bl	80020cc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <ILI9341_Fill_Screen+0x44>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <ILI9341_Fill_Screen+0x48>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff44 	bl	8002478 <ILI9341_Draw_Colour_Burst>
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000006 	.word	0x20000006
 80025fc:	20000004 	.word	0x20000004

08002600 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	80fb      	strh	r3, [r7, #6]
 800260a:	460b      	mov	r3, r1
 800260c:	80bb      	strh	r3, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002612:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <ILI9341_Draw_Pixel+0x1a4>)
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	88fa      	ldrh	r2, [r7, #6]
 800261a:	429a      	cmp	r2, r3
 800261c:	f080 80be 	bcs.w	800279c <ILI9341_Draw_Pixel+0x19c>
 8002620:	4b61      	ldr	r3, [pc, #388]	; (80027a8 <ILI9341_Draw_Pixel+0x1a8>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	88ba      	ldrh	r2, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	f080 80b7 	bcs.w	800279c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800262e:	2200      	movs	r2, #0
 8002630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002634:	485d      	ldr	r0, [pc, #372]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 8002636:	f000 fdad 	bl	8003194 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800263a:	2200      	movs	r2, #0
 800263c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002640:	485a      	ldr	r0, [pc, #360]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 8002642:	f000 fda7 	bl	8003194 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002646:	202a      	movs	r0, #42	; 0x2a
 8002648:	f7ff fcea 	bl	8002020 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800264c:	2201      	movs	r2, #1
 800264e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002652:	4856      	ldr	r0, [pc, #344]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 8002654:	f000 fd9e 	bl	8003194 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800265e:	4853      	ldr	r0, [pc, #332]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 8002660:	f000 fd98 	bl	8003194 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800266a:	4850      	ldr	r0, [pc, #320]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 800266c:	f000 fd92 	bl	8003194 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b29b      	uxth	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	753b      	strb	r3, [r7, #20]
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	757b      	strb	r3, [r7, #21]
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	3301      	adds	r3, #1
 8002684:	121b      	asrs	r3, r3, #8
 8002686:	b2db      	uxtb	r3, r3
 8002688:	75bb      	strb	r3, [r7, #22]
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	3301      	adds	r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002694:	f107 0114 	add.w	r1, r7, #20
 8002698:	2301      	movs	r3, #1
 800269a:	2204      	movs	r2, #4
 800269c:	4844      	ldr	r0, [pc, #272]	; (80027b0 <ILI9341_Draw_Pixel+0x1b0>)
 800269e:	f002 fcf2 	bl	8005086 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80026a2:	2201      	movs	r2, #1
 80026a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a8:	4840      	ldr	r0, [pc, #256]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 80026aa:	f000 fd73 	bl	8003194 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80026ae:	2200      	movs	r2, #0
 80026b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026b4:	483d      	ldr	r0, [pc, #244]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 80026b6:	f000 fd6d 	bl	8003194 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80026ba:	2200      	movs	r2, #0
 80026bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026c0:	483a      	ldr	r0, [pc, #232]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 80026c2:	f000 fd67 	bl	8003194 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80026c6:	202b      	movs	r0, #43	; 0x2b
 80026c8:	f7ff fcaa 	bl	8002020 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80026cc:	2201      	movs	r2, #1
 80026ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026d2:	4836      	ldr	r0, [pc, #216]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 80026d4:	f000 fd5e 	bl	8003194 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80026d8:	2201      	movs	r2, #1
 80026da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026de:	4833      	ldr	r0, [pc, #204]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 80026e0:	f000 fd58 	bl	8003194 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80026e4:	2200      	movs	r2, #0
 80026e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ea:	4830      	ldr	r0, [pc, #192]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 80026ec:	f000 fd52 	bl	8003194 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80026f0:	88bb      	ldrh	r3, [r7, #4]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	743b      	strb	r3, [r7, #16]
 80026fa:	88bb      	ldrh	r3, [r7, #4]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	747b      	strb	r3, [r7, #17]
 8002700:	88bb      	ldrh	r3, [r7, #4]
 8002702:	3301      	adds	r3, #1
 8002704:	121b      	asrs	r3, r3, #8
 8002706:	b2db      	uxtb	r3, r3
 8002708:	74bb      	strb	r3, [r7, #18]
 800270a:	88bb      	ldrh	r3, [r7, #4]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	3301      	adds	r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002714:	f107 0110 	add.w	r1, r7, #16
 8002718:	2301      	movs	r3, #1
 800271a:	2204      	movs	r2, #4
 800271c:	4824      	ldr	r0, [pc, #144]	; (80027b0 <ILI9341_Draw_Pixel+0x1b0>)
 800271e:	f002 fcb2 	bl	8005086 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002722:	2201      	movs	r2, #1
 8002724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002728:	4820      	ldr	r0, [pc, #128]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 800272a:	f000 fd33 	bl	8003194 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800272e:	2200      	movs	r2, #0
 8002730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002734:	481d      	ldr	r0, [pc, #116]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 8002736:	f000 fd2d 	bl	8003194 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800273a:	2200      	movs	r2, #0
 800273c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002740:	481a      	ldr	r0, [pc, #104]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 8002742:	f000 fd27 	bl	8003194 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002746:	202c      	movs	r0, #44	; 0x2c
 8002748:	f7ff fc6a 	bl	8002020 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800274c:	2201      	movs	r2, #1
 800274e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002752:	4816      	ldr	r0, [pc, #88]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 8002754:	f000 fd1e 	bl	8003194 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002758:	2201      	movs	r2, #1
 800275a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800275e:	4813      	ldr	r0, [pc, #76]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 8002760:	f000 fd18 	bl	8003194 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002764:	2200      	movs	r2, #0
 8002766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800276a:	4810      	ldr	r0, [pc, #64]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 800276c:	f000 fd12 	bl	8003194 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002770:	887b      	ldrh	r3, [r7, #2]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	b29b      	uxth	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	733b      	strb	r3, [r7, #12]
 800277a:	887b      	ldrh	r3, [r7, #2]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002780:	f107 010c 	add.w	r1, r7, #12
 8002784:	2301      	movs	r3, #1
 8002786:	2202      	movs	r2, #2
 8002788:	4809      	ldr	r0, [pc, #36]	; (80027b0 <ILI9341_Draw_Pixel+0x1b0>)
 800278a:	f002 fc7c 	bl	8005086 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800278e:	2201      	movs	r2, #1
 8002790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002794:	4805      	ldr	r0, [pc, #20]	; (80027ac <ILI9341_Draw_Pixel+0x1ac>)
 8002796:	f000 fcfd 	bl	8003194 <HAL_GPIO_WritePin>
 800279a:	e000      	b.n	800279e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800279c:	bf00      	nop
	
}
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000006 	.word	0x20000006
 80027a8:	20000004 	.word	0x20000004
 80027ac:	40020800 	.word	0x40020800
 80027b0:	20000398 	.word	0x20000398

080027b4 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4604      	mov	r4, r0
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4623      	mov	r3, r4
 80027c4:	80fb      	strh	r3, [r7, #6]
 80027c6:	4603      	mov	r3, r0
 80027c8:	80bb      	strh	r3, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	807b      	strh	r3, [r7, #2]
 80027ce:	4613      	mov	r3, r2
 80027d0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80027d2:	4b24      	ldr	r3, [pc, #144]	; (8002864 <ILI9341_Draw_Rectangle+0xb0>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d23d      	bcs.n	800285a <ILI9341_Draw_Rectangle+0xa6>
 80027de:	4b22      	ldr	r3, [pc, #136]	; (8002868 <ILI9341_Draw_Rectangle+0xb4>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	88ba      	ldrh	r2, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d237      	bcs.n	800285a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	4413      	add	r3, r2
 80027f0:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <ILI9341_Draw_Rectangle+0xb0>)
 80027f2:	8812      	ldrh	r2, [r2, #0]
 80027f4:	b292      	uxth	r2, r2
 80027f6:	4293      	cmp	r3, r2
 80027f8:	dd05      	ble.n	8002806 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <ILI9341_Draw_Rectangle+0xb0>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002806:	88ba      	ldrh	r2, [r7, #4]
 8002808:	883b      	ldrh	r3, [r7, #0]
 800280a:	4413      	add	r3, r2
 800280c:	4a16      	ldr	r2, [pc, #88]	; (8002868 <ILI9341_Draw_Rectangle+0xb4>)
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	b292      	uxth	r2, r2
 8002812:	4293      	cmp	r3, r2
 8002814:	dd05      	ble.n	8002822 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <ILI9341_Draw_Rectangle+0xb4>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29a      	uxth	r2, r3
 800281c:	88bb      	ldrh	r3, [r7, #4]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	4413      	add	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29c      	uxth	r4, r3
 800282e:	88ba      	ldrh	r2, [r7, #4]
 8002830:	883b      	ldrh	r3, [r7, #0]
 8002832:	4413      	add	r3, r2
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29b      	uxth	r3, r3
 800283a:	88b9      	ldrh	r1, [r7, #4]
 800283c:	88f8      	ldrh	r0, [r7, #6]
 800283e:	4622      	mov	r2, r4
 8002840:	f7ff fc44 	bl	80020cc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002844:	883b      	ldrh	r3, [r7, #0]
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	461a      	mov	r2, r3
 800284e:	8b3b      	ldrh	r3, [r7, #24]
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fe10 	bl	8002478 <ILI9341_Draw_Colour_Burst>
 8002858:	e000      	b.n	800285c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800285a:	bf00      	nop
}
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}
 8002862:	bf00      	nop
 8002864:	20000006 	.word	0x20000006
 8002868:	20000004 	.word	0x20000004

0800286c <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8002872:	2310      	movs	r3, #16
 8002874:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 800287a:	e019      	b.n	80028b0 <TP_Read+0x44>
    {
        value <<= 1;
 800287c:	88bb      	ldrh	r3, [r7, #4]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002882:	2201      	movs	r2, #1
 8002884:	2108      	movs	r1, #8
 8002886:	480e      	ldr	r0, [pc, #56]	; (80028c0 <TP_Read+0x54>)
 8002888:	f000 fc84 	bl	8003194 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 800288c:	2200      	movs	r2, #0
 800288e:	2108      	movs	r1, #8
 8002890:	480b      	ldr	r0, [pc, #44]	; (80028c0 <TP_Read+0x54>)
 8002892:	f000 fc7f 	bl	8003194 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8002896:	2110      	movs	r1, #16
 8002898:	4809      	ldr	r0, [pc, #36]	; (80028c0 <TP_Read+0x54>)
 800289a:	f000 fc63 	bl	8003164 <HAL_GPIO_ReadPin>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <TP_Read+0x3e>
        {
            value++;
 80028a4:	88bb      	ldrh	r3, [r7, #4]
 80028a6:	3301      	adds	r3, #1
 80028a8:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1e2      	bne.n	800287c <TP_Read+0x10>
    };

    return value;
 80028b6:	88bb      	ldrh	r3, [r7, #4]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000

080028c4 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 80028ce:	2308      	movs	r3, #8
 80028d0:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 80028d2:	2200      	movs	r2, #0
 80028d4:	2108      	movs	r1, #8
 80028d6:	4815      	ldr	r0, [pc, #84]	; (800292c <TP_Write+0x68>)
 80028d8:	f000 fc5c 	bl	8003194 <HAL_GPIO_WritePin>
	
    while(i > 0)
 80028dc:	e01e      	b.n	800291c <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	da05      	bge.n	80028f2 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 80028e6:	2201      	movs	r2, #1
 80028e8:	2120      	movs	r1, #32
 80028ea:	4810      	ldr	r0, [pc, #64]	; (800292c <TP_Write+0x68>)
 80028ec:	f000 fc52 	bl	8003194 <HAL_GPIO_WritePin>
 80028f0:	e004      	b.n	80028fc <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2120      	movs	r1, #32
 80028f6:	480d      	ldr	r0, [pc, #52]	; (800292c <TP_Write+0x68>)
 80028f8:	f000 fc4c 	bl	8003194 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002902:	2201      	movs	r2, #1
 8002904:	2108      	movs	r1, #8
 8002906:	4809      	ldr	r0, [pc, #36]	; (800292c <TP_Write+0x68>)
 8002908:	f000 fc44 	bl	8003194 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 800290c:	2200      	movs	r2, #0
 800290e:	2108      	movs	r1, #8
 8002910:	4806      	ldr	r0, [pc, #24]	; (800292c <TP_Write+0x68>)
 8002912:	f000 fc3f 	bl	8003194 <HAL_GPIO_WritePin>
        i--;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	3b01      	subs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1dd      	bne.n	80028de <TP_Write+0x1a>
    };
}
 8002922:	bf00      	nop
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000

08002930 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002938:	2201      	movs	r2, #1
 800293a:	2108      	movs	r1, #8
 800293c:	485a      	ldr	r0, [pc, #360]	; (8002aa8 <TP_Read_Coordinates+0x178>)
 800293e:	f000 fc29 	bl	8003194 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002942:	2201      	movs	r2, #1
 8002944:	2120      	movs	r1, #32
 8002946:	4858      	ldr	r0, [pc, #352]	; (8002aa8 <TP_Read_Coordinates+0x178>)
 8002948:	f000 fc24 	bl	8003194 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 800294c:	2201      	movs	r2, #1
 800294e:	2140      	movs	r1, #64	; 0x40
 8002950:	4855      	ldr	r0, [pc, #340]	; (8002aa8 <TP_Read_Coordinates+0x178>)
 8002952:	f000 fc1f 	bl	8003194 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 800295a:	2300      	movs	r3, #0
 800295c:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002966:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800296c:	2200      	movs	r2, #0
 800296e:	2140      	movs	r1, #64	; 0x40
 8002970:	484d      	ldr	r0, [pc, #308]	; (8002aa8 <TP_Read_Coordinates+0x178>)
 8002972:	f000 fc0f 	bl	8003194 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002976:	e023      	b.n	80029c0 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002978:	2090      	movs	r0, #144	; 0x90
 800297a:	f7ff ffa3 	bl	80028c4 <TP_Write>

				rawy = TP_Read();	
 800297e:	f7ff ff75 	bl	800286c <TP_Read>
 8002982:	4603      	mov	r3, r0
 8002984:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002986:	89fb      	ldrh	r3, [r7, #14]
 8002988:	6a3a      	ldr	r2, [r7, #32]
 800298a:	4413      	add	r3, r2
 800298c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 800298e:	89fb      	ldrh	r3, [r7, #14]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4413      	add	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8002996:	20d0      	movs	r0, #208	; 0xd0
 8002998:	f7ff ff94 	bl	80028c4 <TP_Write>
        rawx = TP_Read();
 800299c:	f7ff ff66 	bl	800286c <TP_Read>
 80029a0:	4603      	mov	r3, r0
 80029a2:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 80029a4:	89bb      	ldrh	r3, [r7, #12]
 80029a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a8:	4413      	add	r3, r2
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 80029ac:	89bb      	ldrh	r3, [r7, #12]
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	4413      	add	r3, r2
 80029b2:	61fb      	str	r3, [r7, #28]
        samples--;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
				counted_samples++;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	3301      	adds	r3, #1
 80029be:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <TP_Read_Coordinates+0xa4>
 80029c6:	2104      	movs	r1, #4
 80029c8:	4837      	ldr	r0, [pc, #220]	; (8002aa8 <TP_Read_Coordinates+0x178>)
 80029ca:	f000 fbcb 	bl	8003164 <HAL_GPIO_ReadPin>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0d1      	beq.n	8002978 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80029d4:	2201      	movs	r2, #1
 80029d6:	2140      	movs	r1, #64	; 0x40
 80029d8:	4833      	ldr	r0, [pc, #204]	; (8002aa8 <TP_Read_Coordinates+0x178>)
 80029da:	f000 fbdb 	bl	8003194 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e4:	d14d      	bne.n	8002a82 <TP_Read_Coordinates+0x152>
 80029e6:	2104      	movs	r1, #4
 80029e8:	482f      	ldr	r0, [pc, #188]	; (8002aa8 <TP_Read_Coordinates+0x178>)
 80029ea:	f000 fbbb 	bl	8003164 <HAL_GPIO_ReadPin>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d146      	bne.n	8002a82 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002a10:	89bb      	ldrh	r3, [r7, #12]
 8002a12:	425b      	negs	r3, r3
 8002a14:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	425b      	negs	r3, r3
 8002a1a:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8002a1c:	89ba      	ldrh	r2, [r7, #12]
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <TP_Read_Coordinates+0x17c>)
 8002a20:	fba3 1302 	umull	r1, r3, r3, r2
 8002a24:	1ad2      	subs	r2, r2, r3
 8002a26:	0852      	lsrs	r2, r2, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a3a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002aa0 <TP_Read_Coordinates+0x170>
 8002a3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a46:	ee17 3a90 	vmov	r3, s15
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002a50:	89fb      	ldrh	r3, [r7, #14]
 8002a52:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <TP_Read_Coordinates+0x180>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	09db      	lsrs	r3, r3, #7
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b0f      	subs	r3, #15
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a66:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002aa0 <TP_Read_Coordinates+0x170>
 8002a6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3302      	adds	r3, #2
 8002a72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a76:	ee17 2a90 	vmov	r2, s15
 8002a7a:	b292      	uxth	r2, r2
 8002a7c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e007      	b.n	8002a92 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8002a90:	2300      	movs	r3, #0
		}
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3728      	adds	r7, #40	; 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	f3af 8000 	nop.w
 8002aa0:	28f5c28f 	.word	0x28f5c28f
 8002aa4:	3ff28f5c 	.word	0x3ff28f5c
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	e01e01e1 	.word	0xe01e01e1
 8002ab0:	a0a0a0a1 	.word	0xa0a0a0a1

08002ab4 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8002ab8:	2104      	movs	r1, #4
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <TP_Touchpad_Pressed+0x1c>)
 8002abc:	f000 fb52 	bl	8003164 <HAL_GPIO_ReadPin>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8002aca:	2300      	movs	r3, #0
	}
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_Init+0x28>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a07      	ldr	r2, [pc, #28]	; (8002afc <HAL_Init+0x28>)
 8002ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	f000 f94f 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f000 f808 	bl	8002b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af0:	f7fe fd24 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023c00 	.word	0x40023c00

08002b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_InitTick+0x54>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_InitTick+0x58>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	4619      	mov	r1, r3
 8002b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f967 	bl	8002df2 <HAL_SYSTICK_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e00e      	b.n	8002b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b0f      	cmp	r3, #15
 8002b32:	d80a      	bhi.n	8002b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b34:	2200      	movs	r2, #0
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f000 f92f 	bl	8002d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b40:	4a06      	ldr	r2, [pc, #24]	; (8002b5c <HAL_InitTick+0x5c>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e000      	b.n	8002b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000000 	.word	0x20000000
 8002b58:	2000000c 	.word	0x2000000c
 8002b5c:	20000008 	.word	0x20000008

08002b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_IncTick+0x20>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_IncTick+0x24>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HAL_IncTick+0x24>)
 8002b72:	6013      	str	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	2000000c 	.word	0x2000000c
 8002b84:	200004d4 	.word	0x200004d4

08002b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_GetTick+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	200004d4 	.word	0x200004d4

08002ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7ff ffee 	bl	8002b88 <HAL_GetTick>
 8002bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d005      	beq.n	8002bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_Delay+0x44>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bc6:	bf00      	nop
 8002bc8:	f7ff ffde 	bl	8002b88 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d8f7      	bhi.n	8002bc8 <HAL_Delay+0x28>
  {
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000000c 	.word	0x2000000c

08002be8 <__NVIC_SetPriorityGrouping>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <__NVIC_SetPriorityGrouping+0x40>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c16:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <__NVIC_SetPriorityGrouping+0x40>)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	60d3      	str	r3, [r2, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00
 8002c2c:	05fa0000 	.word	0x05fa0000

08002c30 <__NVIC_GetPriorityGrouping>:
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4907      	ldr	r1, [pc, #28]	; (8002c84 <__NVIC_EnableIRQ+0x38>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	; (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	; (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	; 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d54:	d301      	bcc.n	8002d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00f      	b.n	8002d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <SysTick_Config+0x40>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d62:	210f      	movs	r1, #15
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	f7ff ff8e 	bl	8002c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <SysTick_Config+0x40>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <SysTick_Config+0x40>)
 8002d74:	2207      	movs	r2, #7
 8002d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	e000e010 	.word	0xe000e010

08002d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff29 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db0:	f7ff ff3e 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	6978      	ldr	r0, [r7, #20]
 8002dbc:	f7ff ff8e 	bl	8002cdc <NVIC_EncodePriority>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff5d 	bl	8002c88 <__NVIC_SetPriority>
}
 8002dce:	bf00      	nop
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff31 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ffa2 	bl	8002d44 <SysTick_Config>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	e175      	b.n	8003118 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	f040 8164 	bne.w	8003112 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d005      	beq.n	8002e62 <HAL_GPIO_Init+0x56>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d130      	bne.n	8002ec4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e98:	2201      	movs	r2, #1
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 0201 	and.w	r2, r3, #1
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d017      	beq.n	8002f00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	2203      	movs	r2, #3
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d123      	bne.n	8002f54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	220f      	movs	r2, #15
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	08da      	lsrs	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3208      	adds	r2, #8
 8002f4e:	69b9      	ldr	r1, [r7, #24]
 8002f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2203      	movs	r2, #3
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0203 	and.w	r2, r3, #3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80be 	beq.w	8003112 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f96:	4b66      	ldr	r3, [pc, #408]	; (8003130 <HAL_GPIO_Init+0x324>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	4a65      	ldr	r2, [pc, #404]	; (8003130 <HAL_GPIO_Init+0x324>)
 8002f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fa2:	4b63      	ldr	r3, [pc, #396]	; (8003130 <HAL_GPIO_Init+0x324>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fae:	4a61      	ldr	r2, [pc, #388]	; (8003134 <HAL_GPIO_Init+0x328>)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	220f      	movs	r2, #15
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_GPIO_Init+0x32c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d037      	beq.n	800304a <HAL_GPIO_Init+0x23e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a57      	ldr	r2, [pc, #348]	; (800313c <HAL_GPIO_Init+0x330>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d031      	beq.n	8003046 <HAL_GPIO_Init+0x23a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a56      	ldr	r2, [pc, #344]	; (8003140 <HAL_GPIO_Init+0x334>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d02b      	beq.n	8003042 <HAL_GPIO_Init+0x236>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a55      	ldr	r2, [pc, #340]	; (8003144 <HAL_GPIO_Init+0x338>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d025      	beq.n	800303e <HAL_GPIO_Init+0x232>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a54      	ldr	r2, [pc, #336]	; (8003148 <HAL_GPIO_Init+0x33c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01f      	beq.n	800303a <HAL_GPIO_Init+0x22e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a53      	ldr	r2, [pc, #332]	; (800314c <HAL_GPIO_Init+0x340>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d019      	beq.n	8003036 <HAL_GPIO_Init+0x22a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a52      	ldr	r2, [pc, #328]	; (8003150 <HAL_GPIO_Init+0x344>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_GPIO_Init+0x226>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a51      	ldr	r2, [pc, #324]	; (8003154 <HAL_GPIO_Init+0x348>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00d      	beq.n	800302e <HAL_GPIO_Init+0x222>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a50      	ldr	r2, [pc, #320]	; (8003158 <HAL_GPIO_Init+0x34c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d007      	beq.n	800302a <HAL_GPIO_Init+0x21e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4f      	ldr	r2, [pc, #316]	; (800315c <HAL_GPIO_Init+0x350>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_GPIO_Init+0x21a>
 8003022:	2309      	movs	r3, #9
 8003024:	e012      	b.n	800304c <HAL_GPIO_Init+0x240>
 8003026:	230a      	movs	r3, #10
 8003028:	e010      	b.n	800304c <HAL_GPIO_Init+0x240>
 800302a:	2308      	movs	r3, #8
 800302c:	e00e      	b.n	800304c <HAL_GPIO_Init+0x240>
 800302e:	2307      	movs	r3, #7
 8003030:	e00c      	b.n	800304c <HAL_GPIO_Init+0x240>
 8003032:	2306      	movs	r3, #6
 8003034:	e00a      	b.n	800304c <HAL_GPIO_Init+0x240>
 8003036:	2305      	movs	r3, #5
 8003038:	e008      	b.n	800304c <HAL_GPIO_Init+0x240>
 800303a:	2304      	movs	r3, #4
 800303c:	e006      	b.n	800304c <HAL_GPIO_Init+0x240>
 800303e:	2303      	movs	r3, #3
 8003040:	e004      	b.n	800304c <HAL_GPIO_Init+0x240>
 8003042:	2302      	movs	r3, #2
 8003044:	e002      	b.n	800304c <HAL_GPIO_Init+0x240>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_GPIO_Init+0x240>
 800304a:	2300      	movs	r3, #0
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	f002 0203 	and.w	r2, r2, #3
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	4093      	lsls	r3, r2
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800305c:	4935      	ldr	r1, [pc, #212]	; (8003134 <HAL_GPIO_Init+0x328>)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800306a:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <HAL_GPIO_Init+0x354>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308e:	4a34      	ldr	r2, [pc, #208]	; (8003160 <HAL_GPIO_Init+0x354>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003094:	4b32      	ldr	r3, [pc, #200]	; (8003160 <HAL_GPIO_Init+0x354>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b8:	4a29      	ldr	r2, [pc, #164]	; (8003160 <HAL_GPIO_Init+0x354>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030be:	4b28      	ldr	r3, [pc, #160]	; (8003160 <HAL_GPIO_Init+0x354>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030e2:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <HAL_GPIO_Init+0x354>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <HAL_GPIO_Init+0x354>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800310c:	4a14      	ldr	r2, [pc, #80]	; (8003160 <HAL_GPIO_Init+0x354>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3301      	adds	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	f67f ae86 	bls.w	8002e2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	40013800 	.word	0x40013800
 8003138:	40020000 	.word	0x40020000
 800313c:	40020400 	.word	0x40020400
 8003140:	40020800 	.word	0x40020800
 8003144:	40020c00 	.word	0x40020c00
 8003148:	40021000 	.word	0x40021000
 800314c:	40021400 	.word	0x40021400
 8003150:	40021800 	.word	0x40021800
 8003154:	40021c00 	.word	0x40021c00
 8003158:	40022000 	.word	0x40022000
 800315c:	40022400 	.word	0x40022400
 8003160:	40013c00 	.word	0x40013c00

08003164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	e001      	b.n	8003186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
 80031a0:	4613      	mov	r3, r2
 80031a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031a4:	787b      	ldrb	r3, [r7, #1]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031b0:	e003      	b.n	80031ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	041a      	lsls	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	619a      	str	r2, [r3, #24]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07f      	b.n	80032da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fd fc1c 	bl	8000a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	; 0x24
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003218:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003228:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	e006      	b.n	8003250 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800324e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d104      	bne.n	8003262 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003260:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_I2C_Init+0x11c>)
 800326e:	430b      	orrs	r3, r1
 8003270:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003280:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69d9      	ldr	r1, [r3, #28]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1a      	ldr	r2, [r3, #32]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	02008000 	.word	0x02008000

080032e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	461a      	mov	r2, r3
 80032f4:	460b      	mov	r3, r1
 80032f6:	817b      	strh	r3, [r7, #10]
 80032f8:	4613      	mov	r3, r2
 80032fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b20      	cmp	r3, #32
 8003306:	f040 80da 	bne.w	80034be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_I2C_Master_Transmit+0x30>
 8003314:	2302      	movs	r3, #2
 8003316:	e0d3      	b.n	80034c0 <HAL_I2C_Master_Transmit+0x1d8>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003320:	f7ff fc32 	bl	8002b88 <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2319      	movs	r3, #25
 800332c:	2201      	movs	r2, #1
 800332e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f9e6 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0be      	b.n	80034c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2221      	movs	r2, #33	; 0x21
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2210      	movs	r2, #16
 800334e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	893a      	ldrh	r2, [r7, #8]
 8003362:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	2bff      	cmp	r3, #255	; 0xff
 8003372:	d90e      	bls.n	8003392 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	22ff      	movs	r2, #255	; 0xff
 8003378:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	b2da      	uxtb	r2, r3
 8003380:	8979      	ldrh	r1, [r7, #10]
 8003382:	4b51      	ldr	r3, [pc, #324]	; (80034c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fbd0 	bl	8003b30 <I2C_TransferConfig>
 8003390:	e06c      	b.n	800346c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	8979      	ldrh	r1, [r7, #10]
 80033a4:	4b48      	ldr	r3, [pc, #288]	; (80034c8 <HAL_I2C_Master_Transmit+0x1e0>)
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fbbf 	bl	8003b30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033b2:	e05b      	b.n	800346c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	6a39      	ldr	r1, [r7, #32]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f9e3 	bl	8003784 <I2C_WaitOnTXISFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e07b      	b.n	80034c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d034      	beq.n	800346c <HAL_I2C_Master_Transmit+0x184>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d130      	bne.n	800346c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	2200      	movs	r2, #0
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f975 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e04d      	b.n	80034c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2bff      	cmp	r3, #255	; 0xff
 800342c:	d90e      	bls.n	800344c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	22ff      	movs	r2, #255	; 0xff
 8003432:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	b2da      	uxtb	r2, r3
 800343a:	8979      	ldrh	r1, [r7, #10]
 800343c:	2300      	movs	r3, #0
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fb73 	bl	8003b30 <I2C_TransferConfig>
 800344a:	e00f      	b.n	800346c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345a:	b2da      	uxtb	r2, r3
 800345c:	8979      	ldrh	r1, [r7, #10]
 800345e:	2300      	movs	r3, #0
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fb62 	bl	8003b30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d19e      	bne.n	80033b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	6a39      	ldr	r1, [r7, #32]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f9c2 	bl	8003804 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e01a      	b.n	80034c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2220      	movs	r2, #32
 8003490:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_I2C_Master_Transmit+0x1e4>)
 800349e:	400b      	ands	r3, r1
 80034a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034be:	2302      	movs	r3, #2
  }
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	80002000 	.word	0x80002000
 80034cc:	fe00e800 	.word	0xfe00e800

080034d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	461a      	mov	r2, r3
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
 80034e0:	4613      	mov	r3, r2
 80034e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	f040 80db 	bne.w	80036a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_I2C_Master_Receive+0x30>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e0d4      	b.n	80036aa <HAL_I2C_Master_Receive+0x1da>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003508:	f7ff fb3e 	bl	8002b88 <HAL_GetTick>
 800350c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2319      	movs	r3, #25
 8003514:	2201      	movs	r2, #1
 8003516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f8f2 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0bf      	b.n	80036aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2222      	movs	r2, #34	; 0x22
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2210      	movs	r2, #16
 8003536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	893a      	ldrh	r2, [r7, #8]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	2bff      	cmp	r3, #255	; 0xff
 800355a:	d90e      	bls.n	800357a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	22ff      	movs	r2, #255	; 0xff
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	b2da      	uxtb	r2, r3
 8003568:	8979      	ldrh	r1, [r7, #10]
 800356a:	4b52      	ldr	r3, [pc, #328]	; (80036b4 <HAL_I2C_Master_Receive+0x1e4>)
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fadc 	bl	8003b30 <I2C_TransferConfig>
 8003578:	e06d      	b.n	8003656 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	b2da      	uxtb	r2, r3
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	4b49      	ldr	r3, [pc, #292]	; (80036b4 <HAL_I2C_Master_Receive+0x1e4>)
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 facb 	bl	8003b30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800359a:	e05c      	b.n	8003656 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	6a39      	ldr	r1, [r7, #32]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f96b 	bl	800387c <I2C_WaitOnRXNEFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e07c      	b.n	80036aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d034      	beq.n	8003656 <HAL_I2C_Master_Receive+0x186>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d130      	bne.n	8003656 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	2200      	movs	r2, #0
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f880 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e04d      	b.n	80036aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	2bff      	cmp	r3, #255	; 0xff
 8003616:	d90e      	bls.n	8003636 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	22ff      	movs	r2, #255	; 0xff
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	b2da      	uxtb	r2, r3
 8003624:	8979      	ldrh	r1, [r7, #10]
 8003626:	2300      	movs	r3, #0
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fa7e 	bl	8003b30 <I2C_TransferConfig>
 8003634:	e00f      	b.n	8003656 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003644:	b2da      	uxtb	r2, r3
 8003646:	8979      	ldrh	r1, [r7, #10]
 8003648:	2300      	movs	r3, #0
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fa6d 	bl	8003b30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d19d      	bne.n	800359c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	6a39      	ldr	r1, [r7, #32]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f8cd 	bl	8003804 <I2C_WaitOnSTOPFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e01a      	b.n	80036aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2220      	movs	r2, #32
 800367a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <HAL_I2C_Master_Receive+0x1e8>)
 8003688:	400b      	ands	r3, r1
 800368a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	80002400 	.word	0x80002400
 80036b8:	fe00e800 	.word	0xfe00e800

080036bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d103      	bne.n	80036da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d007      	beq.n	80036f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	619a      	str	r2, [r3, #24]
  }
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003714:	e022      	b.n	800375c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d01e      	beq.n	800375c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371e:	f7ff fa33 	bl	8002b88 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d302      	bcc.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x30>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d113      	bne.n	800375c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e00f      	b.n	800377c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	429a      	cmp	r2, r3
 8003778:	d0cd      	beq.n	8003716 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003790:	e02c      	b.n	80037ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f8ea 	bl	8003970 <I2C_IsErrorOccurred>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e02a      	b.n	80037fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d01e      	beq.n	80037ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ae:	f7ff f9eb 	bl	8002b88 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d302      	bcc.n	80037c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d113      	bne.n	80037ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e007      	b.n	80037fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d1cb      	bne.n	8003792 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003810:	e028      	b.n	8003864 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f8aa 	bl	8003970 <I2C_IsErrorOccurred>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e026      	b.n	8003874 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7ff f9af 	bl	8002b88 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d113      	bne.n	8003864 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	f043 0220 	orr.w	r2, r3, #32
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e007      	b.n	8003874 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b20      	cmp	r3, #32
 8003870:	d1cf      	bne.n	8003812 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003888:	e064      	b.n	8003954 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f86e 	bl	8003970 <I2C_IsErrorOccurred>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e062      	b.n	8003964 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d138      	bne.n	800391e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d105      	bne.n	80038c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e04e      	b.n	8003964 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d107      	bne.n	80038e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2210      	movs	r2, #16
 80038da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2204      	movs	r2, #4
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
 80038e2:	e002      	b.n	80038ea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2220      	movs	r2, #32
 80038f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80038fe:	400b      	ands	r3, r1
 8003900:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e022      	b.n	8003964 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7ff f933 	bl	8002b88 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10f      	bne.n	8003954 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e007      	b.n	8003964 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d193      	bne.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	fe00e800 	.word	0xfe00e800

08003970 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d068      	beq.n	8003a6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2210      	movs	r2, #16
 80039a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039a4:	e049      	b.n	8003a3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d045      	beq.n	8003a3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039ae:	f7ff f8eb 	bl	8002b88 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <I2C_IsErrorOccurred+0x54>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d13a      	bne.n	8003a3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e6:	d121      	bne.n	8003a2c <I2C_IsErrorOccurred+0xbc>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ee:	d01d      	beq.n	8003a2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039f0:	7cfb      	ldrb	r3, [r7, #19]
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d01a      	beq.n	8003a2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a06:	f7ff f8bf 	bl	8002b88 <HAL_GetTick>
 8003a0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a0c:	e00e      	b.n	8003a2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a0e:	f7ff f8bb 	bl	8002b88 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b19      	cmp	r3, #25
 8003a1a:	d907      	bls.n	8003a2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	f043 0320 	orr.w	r3, r3, #32
 8003a22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a2a:	e006      	b.n	8003a3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d1e9      	bne.n	8003a0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d003      	beq.n	8003a50 <I2C_IsErrorOccurred+0xe0>
 8003a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0aa      	beq.n	80039a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	f043 0304 	orr.w	r3, r3, #4
 8003a66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00b      	beq.n	8003a98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	f043 0308 	orr.w	r3, r3, #8
 8003aa8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00b      	beq.n	8003adc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	f043 0302 	orr.w	r3, r3, #2
 8003aca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01c      	beq.n	8003b1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f7ff fde9 	bl	80036bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <I2C_IsErrorOccurred+0x1bc>)
 8003af6:	400b      	ands	r3, r1
 8003af8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3728      	adds	r7, #40	; 0x28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	fe00e800 	.word	0xfe00e800

08003b30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	817b      	strh	r3, [r7, #10]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b42:	897b      	ldrh	r3, [r7, #10]
 8003b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b48:	7a7b      	ldrb	r3, [r7, #9]
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	0d5b      	lsrs	r3, r3, #21
 8003b6a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <I2C_TransferConfig+0x60>)
 8003b70:	430b      	orrs	r3, r1
 8003b72:	43db      	mvns	r3, r3
 8003b74:	ea02 0103 	and.w	r1, r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	03ff63ff 	.word	0x03ff63ff

08003b94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d138      	bne.n	8003c1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e032      	b.n	8003c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	; 0x24
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003be6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d139      	bne.n	8003cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e033      	b.n	8003cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2224      	movs	r2, #36	; 0x24
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd2:	6013      	str	r3, [r2, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40007000 	.word	0x40007000

08003ce4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cec:	2300      	movs	r3, #0
 8003cee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e29b      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8087 	beq.w	8003e16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d08:	4b96      	ldr	r3, [pc, #600]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d00c      	beq.n	8003d2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d14:	4b93      	ldr	r3, [pc, #588]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d112      	bne.n	8003d46 <HAL_RCC_OscConfig+0x62>
 8003d20:	4b90      	ldr	r3, [pc, #576]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2c:	d10b      	bne.n	8003d46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2e:	4b8d      	ldr	r3, [pc, #564]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d06c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x130>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d168      	bne.n	8003e14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e275      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x7a>
 8003d50:	4b84      	ldr	r3, [pc, #528]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a83      	ldr	r2, [pc, #524]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e02e      	b.n	8003dbc <HAL_RCC_OscConfig+0xd8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x9c>
 8003d66:	4b7f      	ldr	r3, [pc, #508]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7e      	ldr	r2, [pc, #504]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b7c      	ldr	r3, [pc, #496]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a7b      	ldr	r2, [pc, #492]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e01d      	b.n	8003dbc <HAL_RCC_OscConfig+0xd8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0xc0>
 8003d8a:	4b76      	ldr	r3, [pc, #472]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a75      	ldr	r2, [pc, #468]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b73      	ldr	r3, [pc, #460]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a72      	ldr	r2, [pc, #456]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xd8>
 8003da4:	4b6f      	ldr	r3, [pc, #444]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6e      	ldr	r2, [pc, #440]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b6c      	ldr	r3, [pc, #432]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a6b      	ldr	r2, [pc, #428]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fee0 	bl	8002b88 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fedc 	bl	8002b88 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e229      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b61      	ldr	r3, [pc, #388]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0xe8>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fe fecc 	bl	8002b88 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fe fec8 	bl	8002b88 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e215      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	4b57      	ldr	r3, [pc, #348]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x110>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d069      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e22:	4b50      	ldr	r3, [pc, #320]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2e:	4b4d      	ldr	r3, [pc, #308]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x190>
 8003e3a:	4b4a      	ldr	r3, [pc, #296]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x17a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1e9      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b41      	ldr	r3, [pc, #260]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	493d      	ldr	r1, [pc, #244]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	e040      	b.n	8003ef6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d023      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b39      	ldr	r3, [pc, #228]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a38      	ldr	r2, [pc, #224]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fe fe7e 	bl	8002b88 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e90:	f7fe fe7a 	bl	8002b88 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e1c7      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea2:	4b30      	ldr	r3, [pc, #192]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eae:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4929      	ldr	r1, [pc, #164]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]
 8003ec2:	e018      	b.n	8003ef6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ec4:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a26      	ldr	r2, [pc, #152]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fe5a 	bl	8002b88 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fe fe56 	bl	8002b88 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e1a3      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d038      	beq.n	8003f74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d019      	beq.n	8003f3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0a:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0e:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fe fe37 	bl	8002b88 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fe fe33 	bl	8002b88 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e180      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x23a>
 8003f3c:	e01a      	b.n	8003f74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <HAL_RCC_OscConfig+0x280>)
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fe fe1d 	bl	8002b88 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f52:	f7fe fe19 	bl	8002b88 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d903      	bls.n	8003f68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e166      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
 8003f64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	4b92      	ldr	r3, [pc, #584]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ee      	bne.n	8003f52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80a4 	beq.w	80040ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f82:	4b8c      	ldr	r3, [pc, #560]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10d      	bne.n	8003faa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8e:	4b89      	ldr	r3, [pc, #548]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	4a88      	ldr	r2, [pc, #544]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f98:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9a:	4b86      	ldr	r3, [pc, #536]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003faa:	4b83      	ldr	r3, [pc, #524]	; (80041b8 <HAL_RCC_OscConfig+0x4d4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d118      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fb6:	4b80      	ldr	r3, [pc, #512]	; (80041b8 <HAL_RCC_OscConfig+0x4d4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a7f      	ldr	r2, [pc, #508]	; (80041b8 <HAL_RCC_OscConfig+0x4d4>)
 8003fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc2:	f7fe fde1 	bl	8002b88 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fca:	f7fe fddd 	bl	8002b88 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b64      	cmp	r3, #100	; 0x64
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e12a      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fdc:	4b76      	ldr	r3, [pc, #472]	; (80041b8 <HAL_RCC_OscConfig+0x4d4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d106      	bne.n	8003ffe <HAL_RCC_OscConfig+0x31a>
 8003ff0:	4b70      	ldr	r3, [pc, #448]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	4a6f      	ldr	r2, [pc, #444]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffc:	e02d      	b.n	800405a <HAL_RCC_OscConfig+0x376>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10c      	bne.n	8004020 <HAL_RCC_OscConfig+0x33c>
 8004006:	4b6b      	ldr	r3, [pc, #428]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	4a6a      	ldr	r2, [pc, #424]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	6713      	str	r3, [r2, #112]	; 0x70
 8004012:	4b68      	ldr	r3, [pc, #416]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	4a67      	ldr	r2, [pc, #412]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004018:	f023 0304 	bic.w	r3, r3, #4
 800401c:	6713      	str	r3, [r2, #112]	; 0x70
 800401e:	e01c      	b.n	800405a <HAL_RCC_OscConfig+0x376>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b05      	cmp	r3, #5
 8004026:	d10c      	bne.n	8004042 <HAL_RCC_OscConfig+0x35e>
 8004028:	4b62      	ldr	r3, [pc, #392]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	4a61      	ldr	r2, [pc, #388]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 800402e:	f043 0304 	orr.w	r3, r3, #4
 8004032:	6713      	str	r3, [r2, #112]	; 0x70
 8004034:	4b5f      	ldr	r3, [pc, #380]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	4a5e      	ldr	r2, [pc, #376]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6713      	str	r3, [r2, #112]	; 0x70
 8004040:	e00b      	b.n	800405a <HAL_RCC_OscConfig+0x376>
 8004042:	4b5c      	ldr	r3, [pc, #368]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a5b      	ldr	r2, [pc, #364]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
 800404e:	4b59      	ldr	r3, [pc, #356]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	4a58      	ldr	r2, [pc, #352]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004054:	f023 0304 	bic.w	r3, r3, #4
 8004058:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d015      	beq.n	800408e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004062:	f7fe fd91 	bl	8002b88 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004068:	e00a      	b.n	8004080 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7fe fd8d 	bl	8002b88 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f241 3288 	movw	r2, #5000	; 0x1388
 8004078:	4293      	cmp	r3, r2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e0d8      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004080:	4b4c      	ldr	r3, [pc, #304]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0ee      	beq.n	800406a <HAL_RCC_OscConfig+0x386>
 800408c:	e014      	b.n	80040b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408e:	f7fe fd7b 	bl	8002b88 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004094:	e00a      	b.n	80040ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004096:	f7fe fd77 	bl	8002b88 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e0c2      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ac:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1ee      	bne.n	8004096 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d105      	bne.n	80040ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040be:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	4a3c      	ldr	r2, [pc, #240]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 80040c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80ae 	beq.w	8004230 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040d4:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 030c 	and.w	r3, r3, #12
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d06d      	beq.n	80041bc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d14b      	bne.n	8004180 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e8:	4b32      	ldr	r3, [pc, #200]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a31      	ldr	r2, [pc, #196]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 80040ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fe fd48 	bl	8002b88 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fe fd44 	bl	8002b88 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e091      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	019b      	lsls	r3, r3, #6
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	085b      	lsrs	r3, r3, #1
 8004132:	3b01      	subs	r3, #1
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	071b      	lsls	r3, r3, #28
 8004146:	491b      	ldr	r1, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fe fd16 	bl	8002b88 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fe fd12 	bl	8002b88 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e05f      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x47c>
 800417e:	e057      	b.n	8004230 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 8004186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800418a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fe fcfc 	bl	8002b88 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004194:	f7fe fcf8 	bl	8002b88 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e045      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a6:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <HAL_RCC_OscConfig+0x4d0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x4b0>
 80041b2:	e03d      	b.n	8004230 <HAL_RCC_OscConfig+0x54c>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <HAL_RCC_OscConfig+0x558>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d030      	beq.n	800422c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d129      	bne.n	800422c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d122      	bne.n	800422c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041ec:	4013      	ands	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d119      	bne.n	800422c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	3b01      	subs	r3, #1
 8004206:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d10f      	bne.n	800422c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d107      	bne.n	800422c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800

08004240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0d0      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004258:	4b6a      	ldr	r3, [pc, #424]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d910      	bls.n	8004288 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b67      	ldr	r3, [pc, #412]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 020f 	bic.w	r2, r3, #15
 800426e:	4965      	ldr	r1, [pc, #404]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b63      	ldr	r3, [pc, #396]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0b8      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d020      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a0:	4b59      	ldr	r3, [pc, #356]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a58      	ldr	r2, [pc, #352]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80042a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b8:	4b53      	ldr	r3, [pc, #332]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a52      	ldr	r2, [pc, #328]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80042be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c4:	4b50      	ldr	r3, [pc, #320]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	494d      	ldr	r1, [pc, #308]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d040      	beq.n	8004364 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d115      	bne.n	8004322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e07f      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004302:	4b41      	ldr	r3, [pc, #260]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e073      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004312:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e06b      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004322:	4b39      	ldr	r3, [pc, #228]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f023 0203 	bic.w	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4936      	ldr	r1, [pc, #216]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	4313      	orrs	r3, r2
 8004332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004334:	f7fe fc28 	bl	8002b88 <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433a:	e00a      	b.n	8004352 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800433c:	f7fe fc24 	bl	8002b88 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e053      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 020c 	and.w	r2, r3, #12
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	429a      	cmp	r2, r3
 8004362:	d1eb      	bne.n	800433c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d210      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 020f 	bic.w	r2, r3, #15
 800437a:	4922      	ldr	r1, [pc, #136]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b20      	ldr	r3, [pc, #128]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d001      	beq.n	8004394 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e032      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a0:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4916      	ldr	r1, [pc, #88]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	490e      	ldr	r1, [pc, #56]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043d2:	f000 f821 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80043d6:	4602      	mov	r2, r0
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	490a      	ldr	r1, [pc, #40]	; (800440c <HAL_RCC_ClockConfig+0x1cc>)
 80043e4:	5ccb      	ldrb	r3, [r1, r3]
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <HAL_RCC_ClockConfig+0x1d0>)
 80043ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_ClockConfig+0x1d4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe fb84 	bl	8002b00 <HAL_InitTick>

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40023c00 	.word	0x40023c00
 8004408:	40023800 	.word	0x40023800
 800440c:	0802f7e4 	.word	0x0802f7e4
 8004410:	20000000 	.word	0x20000000
 8004414:	20000008 	.word	0x20000008

08004418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800441c:	b094      	sub	sp, #80	; 0x50
 800441e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	647b      	str	r3, [r7, #68]	; 0x44
 8004424:	2300      	movs	r3, #0
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004428:	2300      	movs	r3, #0
 800442a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004430:	4b79      	ldr	r3, [pc, #484]	; (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b08      	cmp	r3, #8
 800443a:	d00d      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x40>
 800443c:	2b08      	cmp	r3, #8
 800443e:	f200 80e1 	bhi.w	8004604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x34>
 8004446:	2b04      	cmp	r3, #4
 8004448:	d003      	beq.n	8004452 <HAL_RCC_GetSysClockFreq+0x3a>
 800444a:	e0db      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800444c:	4b73      	ldr	r3, [pc, #460]	; (800461c <HAL_RCC_GetSysClockFreq+0x204>)
 800444e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004450:	e0db      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004452:	4b73      	ldr	r3, [pc, #460]	; (8004620 <HAL_RCC_GetSysClockFreq+0x208>)
 8004454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004456:	e0d8      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004458:	4b6f      	ldr	r3, [pc, #444]	; (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004460:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004462:	4b6d      	ldr	r3, [pc, #436]	; (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d063      	beq.n	8004536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446e:	4b6a      	ldr	r3, [pc, #424]	; (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	099b      	lsrs	r3, r3, #6
 8004474:	2200      	movs	r2, #0
 8004476:	63bb      	str	r3, [r7, #56]	; 0x38
 8004478:	63fa      	str	r2, [r7, #60]	; 0x3c
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004480:	633b      	str	r3, [r7, #48]	; 0x30
 8004482:	2300      	movs	r3, #0
 8004484:	637b      	str	r3, [r7, #52]	; 0x34
 8004486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800448a:	4622      	mov	r2, r4
 800448c:	462b      	mov	r3, r5
 800448e:	f04f 0000 	mov.w	r0, #0
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	0159      	lsls	r1, r3, #5
 8004498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800449c:	0150      	lsls	r0, r2, #5
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4621      	mov	r1, r4
 80044a4:	1a51      	subs	r1, r2, r1
 80044a6:	6139      	str	r1, [r7, #16]
 80044a8:	4629      	mov	r1, r5
 80044aa:	eb63 0301 	sbc.w	r3, r3, r1
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044bc:	4659      	mov	r1, fp
 80044be:	018b      	lsls	r3, r1, #6
 80044c0:	4651      	mov	r1, sl
 80044c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044c6:	4651      	mov	r1, sl
 80044c8:	018a      	lsls	r2, r1, #6
 80044ca:	4651      	mov	r1, sl
 80044cc:	ebb2 0801 	subs.w	r8, r2, r1
 80044d0:	4659      	mov	r1, fp
 80044d2:	eb63 0901 	sbc.w	r9, r3, r1
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ea:	4690      	mov	r8, r2
 80044ec:	4699      	mov	r9, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	eb18 0303 	adds.w	r3, r8, r3
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	462b      	mov	r3, r5
 80044f8:	eb49 0303 	adc.w	r3, r9, r3
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800450a:	4629      	mov	r1, r5
 800450c:	024b      	lsls	r3, r1, #9
 800450e:	4621      	mov	r1, r4
 8004510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004514:	4621      	mov	r1, r4
 8004516:	024a      	lsls	r2, r1, #9
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451e:	2200      	movs	r2, #0
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
 8004522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004528:	f7fb fee2 	bl	80002f0 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4613      	mov	r3, r2
 8004532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004534:	e058      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004536:	4b38      	ldr	r3, [pc, #224]	; (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	2200      	movs	r2, #0
 800453e:	4618      	mov	r0, r3
 8004540:	4611      	mov	r1, r2
 8004542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004546:	623b      	str	r3, [r7, #32]
 8004548:	2300      	movs	r3, #0
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
 800454c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	f04f 0000 	mov.w	r0, #0
 8004558:	f04f 0100 	mov.w	r1, #0
 800455c:	0159      	lsls	r1, r3, #5
 800455e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004562:	0150      	lsls	r0, r2, #5
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4641      	mov	r1, r8
 800456a:	ebb2 0a01 	subs.w	sl, r2, r1
 800456e:	4649      	mov	r1, r9
 8004570:	eb63 0b01 	sbc.w	fp, r3, r1
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004588:	ebb2 040a 	subs.w	r4, r2, sl
 800458c:	eb63 050b 	sbc.w	r5, r3, fp
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	00eb      	lsls	r3, r5, #3
 800459a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800459e:	00e2      	lsls	r2, r4, #3
 80045a0:	4614      	mov	r4, r2
 80045a2:	461d      	mov	r5, r3
 80045a4:	4643      	mov	r3, r8
 80045a6:	18e3      	adds	r3, r4, r3
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	464b      	mov	r3, r9
 80045ac:	eb45 0303 	adc.w	r3, r5, r3
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045be:	4629      	mov	r1, r5
 80045c0:	028b      	lsls	r3, r1, #10
 80045c2:	4621      	mov	r1, r4
 80045c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045c8:	4621      	mov	r1, r4
 80045ca:	028a      	lsls	r2, r1, #10
 80045cc:	4610      	mov	r0, r2
 80045ce:	4619      	mov	r1, r3
 80045d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d2:	2200      	movs	r2, #0
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	61fa      	str	r2, [r7, #28]
 80045d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045dc:	f7fb fe88 	bl	80002f0 <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4613      	mov	r3, r2
 80045e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	3301      	adds	r3, #1
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80045f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004602:	e002      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetSysClockFreq+0x204>)
 8004606:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800460a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800460c:	4618      	mov	r0, r3
 800460e:	3750      	adds	r7, #80	; 0x50
 8004610:	46bd      	mov	sp, r7
 8004612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
 800461c:	00f42400 	.word	0x00f42400
 8004620:	007a1200 	.word	0x007a1200

08004624 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004628:	4b03      	ldr	r3, [pc, #12]	; (8004638 <HAL_RCC_GetHCLKFreq+0x14>)
 800462a:	681b      	ldr	r3, [r3, #0]
}
 800462c:	4618      	mov	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20000000 	.word	0x20000000

0800463c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004640:	f7ff fff0 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 8004644:	4602      	mov	r2, r0
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	0a9b      	lsrs	r3, r3, #10
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	4903      	ldr	r1, [pc, #12]	; (8004660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004652:	5ccb      	ldrb	r3, [r1, r3]
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004658:	4618      	mov	r0, r3
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40023800 	.word	0x40023800
 8004660:	0802f7f4 	.word	0x0802f7f4

08004664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004668:	f7ff ffdc 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 800466c:	4602      	mov	r2, r0
 800466e:	4b05      	ldr	r3, [pc, #20]	; (8004684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	0b5b      	lsrs	r3, r3, #13
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	4903      	ldr	r1, [pc, #12]	; (8004688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800467a:	5ccb      	ldrb	r3, [r1, r3]
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40023800 	.word	0x40023800
 8004688:	0802f7f4 	.word	0x0802f7f4

0800468c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d012      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046b4:	4b69      	ldr	r3, [pc, #420]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a68      	ldr	r2, [pc, #416]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046be:	6093      	str	r3, [r2, #8]
 80046c0:	4b66      	ldr	r3, [pc, #408]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c8:	4964      	ldr	r1, [pc, #400]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046d6:	2301      	movs	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d017      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046e6:	4b5d      	ldr	r3, [pc, #372]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f4:	4959      	ldr	r1, [pc, #356]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004704:	d101      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004706:	2301      	movs	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004712:	2301      	movs	r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d017      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004722:	4b4e      	ldr	r3, [pc, #312]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004728:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	494a      	ldr	r1, [pc, #296]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004740:	d101      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004742:	2301      	movs	r3, #1
 8004744:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 808b 	beq.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004770:	4b3a      	ldr	r3, [pc, #232]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	4a39      	ldr	r2, [pc, #228]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477a:	6413      	str	r3, [r2, #64]	; 0x40
 800477c:	4b37      	ldr	r3, [pc, #220]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004788:	4b35      	ldr	r3, [pc, #212]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a34      	ldr	r2, [pc, #208]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800478e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004794:	f7fe f9f8 	bl	8002b88 <HAL_GetTick>
 8004798:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479c:	f7fe f9f4 	bl	8002b88 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e38f      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047ae:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ba:	4b28      	ldr	r3, [pc, #160]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d035      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d02e      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047d8:	4b20      	ldr	r3, [pc, #128]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a1d      	ldr	r2, [pc, #116]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ee:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	4a1a      	ldr	r2, [pc, #104]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047fa:	4a18      	ldr	r2, [pc, #96]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004800:	4b16      	ldr	r3, [pc, #88]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d114      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fe f9bc 	bl	8002b88 <HAL_GetTick>
 8004810:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004812:	e00a      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004814:	f7fe f9b8 	bl	8002b88 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e351      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482a:	4b0c      	ldr	r3, [pc, #48]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0ee      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004842:	d111      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004852:	400b      	ands	r3, r1
 8004854:	4901      	ldr	r1, [pc, #4]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
 800485a:	e00b      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800485c:	40023800 	.word	0x40023800
 8004860:	40007000 	.word	0x40007000
 8004864:	0ffffcff 	.word	0x0ffffcff
 8004868:	4bac      	ldr	r3, [pc, #688]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4aab      	ldr	r2, [pc, #684]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004872:	6093      	str	r3, [r2, #8]
 8004874:	4ba9      	ldr	r3, [pc, #676]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004880:	49a6      	ldr	r1, [pc, #664]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004882:	4313      	orrs	r3, r2
 8004884:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004892:	4ba2      	ldr	r3, [pc, #648]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004898:	4aa0      	ldr	r2, [pc, #640]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800489e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048a2:	4b9e      	ldr	r3, [pc, #632]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	499b      	ldr	r1, [pc, #620]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048c0:	4b96      	ldr	r3, [pc, #600]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ce:	4993      	ldr	r1, [pc, #588]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048e2:	4b8e      	ldr	r3, [pc, #568]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048f0:	498a      	ldr	r1, [pc, #552]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004904:	4b85      	ldr	r3, [pc, #532]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004912:	4982      	ldr	r1, [pc, #520]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004926:	4b7d      	ldr	r3, [pc, #500]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	4979      	ldr	r1, [pc, #484]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004948:	4b74      	ldr	r3, [pc, #464]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f023 0203 	bic.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	4971      	ldr	r1, [pc, #452]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800496a:	4b6c      	ldr	r3, [pc, #432]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004970:	f023 020c 	bic.w	r2, r3, #12
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004978:	4968      	ldr	r1, [pc, #416]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800498c:	4b63      	ldr	r3, [pc, #396]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	4960      	ldr	r1, [pc, #384]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049ae:	4b5b      	ldr	r3, [pc, #364]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	4957      	ldr	r1, [pc, #348]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049d0:	4b52      	ldr	r3, [pc, #328]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	494f      	ldr	r1, [pc, #316]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049f2:	4b4a      	ldr	r3, [pc, #296]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a00:	4946      	ldr	r1, [pc, #280]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a14:	4b41      	ldr	r3, [pc, #260]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	493e      	ldr	r1, [pc, #248]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a36:	4b39      	ldr	r3, [pc, #228]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a44:	4935      	ldr	r1, [pc, #212]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a58:	4b30      	ldr	r3, [pc, #192]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a66:	492d      	ldr	r1, [pc, #180]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d011      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a7a:	4b28      	ldr	r3, [pc, #160]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a80:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a88:	4924      	ldr	r1, [pc, #144]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a98:	d101      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aba:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac8:	4914      	ldr	r1, [pc, #80]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aec:	490b      	ldr	r1, [pc, #44]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00f      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b10:	4902      	ldr	r1, [pc, #8]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b18:	e002      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00b      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b2c:	4b8a      	ldr	r3, [pc, #552]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	4986      	ldr	r1, [pc, #536]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00b      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b50:	4b81      	ldr	r3, [pc, #516]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b60:	497d      	ldr	r1, [pc, #500]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d006      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 80d6 	beq.w	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b7c:	4b76      	ldr	r3, [pc, #472]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a75      	ldr	r2, [pc, #468]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fd fffe 	bl	8002b88 <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b90:	f7fd fffa 	bl	8002b88 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e195      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ba2:	4b6d      	ldr	r3, [pc, #436]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d021      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d11d      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bc2:	4b65      	ldr	r3, [pc, #404]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bd0:	4b61      	ldr	r3, [pc, #388]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd6:	0e1b      	lsrs	r3, r3, #24
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	019a      	lsls	r2, r3, #6
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	431a      	orrs	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	071b      	lsls	r3, r3, #28
 8004bf6:	4958      	ldr	r1, [pc, #352]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c12:	d00a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02e      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c28:	d129      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c2a:	4b4b      	ldr	r3, [pc, #300]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c38:	4b47      	ldr	r3, [pc, #284]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3e:	0f1b      	lsrs	r3, r3, #28
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	019a      	lsls	r2, r3, #6
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	061b      	lsls	r3, r3, #24
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	071b      	lsls	r3, r3, #28
 8004c5e:	493e      	ldr	r1, [pc, #248]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c66:	4b3c      	ldr	r3, [pc, #240]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c6c:	f023 021f 	bic.w	r2, r3, #31
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	3b01      	subs	r3, #1
 8004c76:	4938      	ldr	r1, [pc, #224]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01d      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c8a:	4b33      	ldr	r3, [pc, #204]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c90:	0e1b      	lsrs	r3, r3, #24
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c98:	4b2f      	ldr	r3, [pc, #188]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9e:	0f1b      	lsrs	r3, r3, #28
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	019a      	lsls	r2, r3, #6
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	041b      	lsls	r3, r3, #16
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	071b      	lsls	r3, r3, #28
 8004cbe:	4926      	ldr	r1, [pc, #152]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d011      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	019a      	lsls	r2, r3, #6
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	041b      	lsls	r3, r3, #16
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	071b      	lsls	r3, r3, #28
 8004cee:	491a      	ldr	r1, [pc, #104]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cf6:	4b18      	ldr	r3, [pc, #96]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d02:	f7fd ff41 	bl	8002b88 <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d0a:	f7fd ff3d 	bl	8002b88 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b64      	cmp	r3, #100	; 0x64
 8004d16:	d901      	bls.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e0d8      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	f040 80ce 	bne.w	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d30:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d3c:	f7fd ff24 	bl	8002b88 <HAL_GetTick>
 8004d40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d42:	e00b      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d44:	f7fd ff20 	bl	8002b88 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	; 0x64
 8004d50:	d904      	bls.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0bb      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d5c:	4b5e      	ldr	r3, [pc, #376]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d68:	d0ec      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d02e      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d12a      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d92:	4b51      	ldr	r3, [pc, #324]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	0c1b      	lsrs	r3, r3, #16
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004da0:	4b4d      	ldr	r3, [pc, #308]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	0f1b      	lsrs	r3, r3, #28
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	019a      	lsls	r2, r3, #6
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	061b      	lsls	r3, r3, #24
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	071b      	lsls	r3, r3, #28
 8004dc6:	4944      	ldr	r1, [pc, #272]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dce:	4b42      	ldr	r3, [pc, #264]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	493d      	ldr	r1, [pc, #244]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d022      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfc:	d11d      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dfe:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	0e1b      	lsrs	r3, r3, #24
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e0c:	4b32      	ldr	r3, [pc, #200]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	0f1b      	lsrs	r3, r3, #28
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	019a      	lsls	r2, r3, #6
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	431a      	orrs	r2, r3
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	071b      	lsls	r3, r3, #28
 8004e32:	4929      	ldr	r1, [pc, #164]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d028      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e46:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4c:	0e1b      	lsrs	r3, r3, #24
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e54:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	019a      	lsls	r2, r3, #6
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	061b      	lsls	r3, r3, #24
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	071b      	lsls	r3, r3, #28
 8004e7a:	4917      	ldr	r1, [pc, #92]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	4911      	ldr	r1, [pc, #68]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e98:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a0e      	ldr	r2, [pc, #56]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea4:	f7fd fe70 	bl	8002b88 <HAL_GetTick>
 8004ea8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004eac:	f7fd fe6c 	bl	8002b88 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	; 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e007      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eca:	d1ef      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800

08004edc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e01c      	b.n	8004f28 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	795b      	ldrb	r3, [r3, #5]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fc fa66 	bl	80013d0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0204 	orr.w	r2, r2, #4
 8004f18:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e09d      	b.n	800507e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d108      	bne.n	8004f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f52:	d009      	beq.n	8004f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	61da      	str	r2, [r3, #28]
 8004f5a:	e005      	b.n	8004f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fc fa96 	bl	80014b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fa8:	d902      	bls.n	8004fb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	e002      	b.n	8004fb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004fbe:	d007      	beq.n	8004fd0 <HAL_SPI_Init+0xa0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fc8:	d002      	beq.n	8004fd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005012:	ea42 0103 	orr.w	r1, r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	0c1b      	lsrs	r3, r3, #16
 800502c:	f003 0204 	and.w	r2, r3, #4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800504c:	ea42 0103 	orr.w	r1, r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800506c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b088      	sub	sp, #32
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	603b      	str	r3, [r7, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_SPI_Transmit+0x22>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e158      	b.n	800535a <HAL_SPI_Transmit+0x2d4>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050b0:	f7fd fd6a 	bl	8002b88 <HAL_GetTick>
 80050b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d002      	beq.n	80050cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
 80050c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050ca:	e13d      	b.n	8005348 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_SPI_Transmit+0x52>
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050dc:	e134      	b.n	8005348 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2203      	movs	r2, #3
 80050e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	88fa      	ldrh	r2, [r7, #6]
 80050f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005128:	d10f      	bne.n	800514a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005138:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005148:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d007      	beq.n	8005168 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005166:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005170:	d94b      	bls.n	800520a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_SPI_Transmit+0xfa>
 800517a:	8afb      	ldrh	r3, [r7, #22]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d13e      	bne.n	80051fe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	881a      	ldrh	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	1c9a      	adds	r2, r3, #2
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051a4:	e02b      	b.n	80051fe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d112      	bne.n	80051da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	881a      	ldrh	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	1c9a      	adds	r2, r3, #2
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051d8:	e011      	b.n	80051fe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051da:	f7fd fcd5 	bl	8002b88 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d803      	bhi.n	80051f2 <HAL_SPI_Transmit+0x16c>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d102      	bne.n	80051f8 <HAL_SPI_Transmit+0x172>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d102      	bne.n	80051fe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051fc:	e0a4      	b.n	8005348 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1ce      	bne.n	80051a6 <HAL_SPI_Transmit+0x120>
 8005208:	e07c      	b.n	8005304 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_SPI_Transmit+0x192>
 8005212:	8afb      	ldrh	r3, [r7, #22]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d170      	bne.n	80052fa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d912      	bls.n	8005248 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	881a      	ldrh	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	1c9a      	adds	r2, r3, #2
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b02      	subs	r3, #2
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005246:	e058      	b.n	80052fa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	330c      	adds	r3, #12
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800526e:	e044      	b.n	80052fa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d12b      	bne.n	80052d6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d912      	bls.n	80052ae <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	881a      	ldrh	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	1c9a      	adds	r2, r3, #2
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b02      	subs	r3, #2
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052ac:	e025      	b.n	80052fa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	7812      	ldrb	r2, [r2, #0]
 80052ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052d4:	e011      	b.n	80052fa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052d6:	f7fd fc57 	bl	8002b88 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d803      	bhi.n	80052ee <HAL_SPI_Transmit+0x268>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d102      	bne.n	80052f4 <HAL_SPI_Transmit+0x26e>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052f8:	e026      	b.n	8005348 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1b5      	bne.n	8005270 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	6839      	ldr	r1, [r7, #0]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f949 	bl	80055a0 <SPI_EndRxTxTransaction>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005322:	2300      	movs	r3, #0
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	e000      	b.n	8005348 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005346:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005358:	7ffb      	ldrb	r3, [r7, #31]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005374:	f7fd fc08 	bl	8002b88 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	4413      	add	r3, r2
 8005382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005384:	f7fd fc00 	bl	8002b88 <HAL_GetTick>
 8005388:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800538a:	4b39      	ldr	r3, [pc, #228]	; (8005470 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	015b      	lsls	r3, r3, #5
 8005390:	0d1b      	lsrs	r3, r3, #20
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	fb02 f303 	mul.w	r3, r2, r3
 8005398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800539a:	e054      	b.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d050      	beq.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053a4:	f7fd fbf0 	bl	8002b88 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d902      	bls.n	80053ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d13d      	bne.n	8005436 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d2:	d111      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d004      	beq.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e6:	d107      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005400:	d10f      	bne.n	8005422 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e017      	b.n	8005466 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	3b01      	subs	r3, #1
 8005444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	429a      	cmp	r2, r3
 8005462:	d19b      	bne.n	800539c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000000 	.word	0x20000000

08005474 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005486:	f7fd fb7f 	bl	8002b88 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	4413      	add	r3, r2
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005496:	f7fd fb77 	bl	8002b88 <HAL_GetTick>
 800549a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	330c      	adds	r3, #12
 80054a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054a4:	4b3d      	ldr	r3, [pc, #244]	; (800559c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	00da      	lsls	r2, r3, #3
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	0d1b      	lsrs	r3, r3, #20
 80054b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054bc:	e060      	b.n	8005580 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054c4:	d107      	bne.n	80054d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d050      	beq.n	8005580 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054de:	f7fd fb53 	bl	8002b88 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d902      	bls.n	80054f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d13d      	bne.n	8005570 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005502:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550c:	d111      	bne.n	8005532 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005516:	d004      	beq.n	8005522 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005520:	d107      	bne.n	8005532 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005530:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553a:	d10f      	bne.n	800555c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800555a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e010      	b.n	8005592 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	3b01      	subs	r3, #1
 800557e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	429a      	cmp	r2, r3
 800558e:	d196      	bne.n	80054be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3728      	adds	r7, #40	; 0x28
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000000 	.word	0x20000000

080055a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff ff5b 	bl	8005474 <SPI_WaitFifoStateUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c8:	f043 0220 	orr.w	r2, r3, #32
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e046      	b.n	8005662 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055d4:	4b25      	ldr	r3, [pc, #148]	; (800566c <SPI_EndRxTxTransaction+0xcc>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a25      	ldr	r2, [pc, #148]	; (8005670 <SPI_EndRxTxTransaction+0xd0>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	0d5b      	lsrs	r3, r3, #21
 80055e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055e4:	fb02 f303 	mul.w	r3, r2, r3
 80055e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f2:	d112      	bne.n	800561a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	2180      	movs	r1, #128	; 0x80
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7ff feb0 	bl	8005364 <SPI_WaitFlagStateUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d016      	beq.n	8005638 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e023      	b.n	8005662 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	3b01      	subs	r3, #1
 8005624:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d0f2      	beq.n	800561a <SPI_EndRxTxTransaction+0x7a>
 8005634:	e000      	b.n	8005638 <SPI_EndRxTxTransaction+0x98>
        break;
 8005636:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ff15 	bl	8005474 <SPI_WaitFifoStateUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005654:	f043 0220 	orr.w	r2, r3, #32
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e000      	b.n	8005662 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000000 	.word	0x20000000
 8005670:	165e9f81 	.word	0x165e9f81

08005674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e049      	b.n	800571a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fc f8d0 	bl	8001840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f000 faf8 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d001      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e054      	b.n	80057e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d022      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005766:	d01d      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a22      	ldr	r2, [pc, #136]	; (80057f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d018      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a21      	ldr	r2, [pc, #132]	; (80057fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <HAL_TIM_Base_Start_IT+0xdc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <HAL_TIM_Base_Start_IT+0xe0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_TIM_Base_Start_IT+0xe4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_TIM_Base_Start_IT+0xe8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d115      	bne.n	80057d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	4b19      	ldr	r3, [pc, #100]	; (8005810 <HAL_TIM_Base_Start_IT+0xec>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b06      	cmp	r3, #6
 80057b4:	d015      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0xbe>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057bc:	d011      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ce:	e008      	b.n	80057e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	e000      	b.n	80057e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00
 8005804:	40010400 	.word	0x40010400
 8005808:	40014000 	.word	0x40014000
 800580c:	40001800 	.word	0x40001800
 8005810:	00010007 	.word	0x00010007

08005814 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6a1a      	ldr	r2, [r3, #32]
 8005832:	f241 1311 	movw	r3, #4369	; 0x1111
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10f      	bne.n	800585c <HAL_TIM_Base_Stop_IT+0x48>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	f240 4344 	movw	r3, #1092	; 0x444
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d107      	bne.n	800585c <HAL_TIM_Base_Stop_IT+0x48>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b02      	cmp	r3, #2
 8005886:	d122      	bne.n	80058ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b02      	cmp	r3, #2
 8005894:	d11b      	bne.n	80058ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f06f 0202 	mvn.w	r2, #2
 800589e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f9d9 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 80058ba:	e005      	b.n	80058c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f9cb 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9dc 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d122      	bne.n	8005922 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d11b      	bne.n	8005922 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f06f 0204 	mvn.w	r2, #4
 80058f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f9af 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 800590e:	e005      	b.n	800591c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f9a1 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f9b2 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b08      	cmp	r3, #8
 800592e:	d122      	bne.n	8005976 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b08      	cmp	r3, #8
 800593c:	d11b      	bne.n	8005976 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f06f 0208 	mvn.w	r2, #8
 8005946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2204      	movs	r2, #4
 800594c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f985 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 8005962:	e005      	b.n	8005970 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f977 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f988 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b10      	cmp	r3, #16
 8005982:	d122      	bne.n	80059ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	2b10      	cmp	r3, #16
 8005990:	d11b      	bne.n	80059ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f06f 0210 	mvn.w	r2, #16
 800599a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2208      	movs	r2, #8
 80059a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f95b 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 80059b6:	e005      	b.n	80059c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f94d 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f95e 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d10e      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f06f 0201 	mvn.w	r2, #1
 80059ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f927 	bl	8005c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a00:	2b80      	cmp	r3, #128	; 0x80
 8005a02:	d10e      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0e:	2b80      	cmp	r3, #128	; 0x80
 8005a10:	d107      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb15 	bl	800604c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a30:	d10e      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d107      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fb08 	bl	8006060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b40      	cmp	r3, #64	; 0x40
 8005a5c:	d10e      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d107      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f90c 	bl	8005c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d10e      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d107      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0220 	mvn.w	r2, #32
 8005aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fac8 	bl	8006038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_TIM_ConfigClockSource+0x1c>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e0b4      	b.n	8005c36 <HAL_TIM_ConfigClockSource+0x186>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	4b56      	ldr	r3, [pc, #344]	; (8005c40 <HAL_TIM_ConfigClockSource+0x190>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005af2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b04:	d03e      	beq.n	8005b84 <HAL_TIM_ConfigClockSource+0xd4>
 8005b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0a:	f200 8087 	bhi.w	8005c1c <HAL_TIM_ConfigClockSource+0x16c>
 8005b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b12:	f000 8086 	beq.w	8005c22 <HAL_TIM_ConfigClockSource+0x172>
 8005b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1a:	d87f      	bhi.n	8005c1c <HAL_TIM_ConfigClockSource+0x16c>
 8005b1c:	2b70      	cmp	r3, #112	; 0x70
 8005b1e:	d01a      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0xa6>
 8005b20:	2b70      	cmp	r3, #112	; 0x70
 8005b22:	d87b      	bhi.n	8005c1c <HAL_TIM_ConfigClockSource+0x16c>
 8005b24:	2b60      	cmp	r3, #96	; 0x60
 8005b26:	d050      	beq.n	8005bca <HAL_TIM_ConfigClockSource+0x11a>
 8005b28:	2b60      	cmp	r3, #96	; 0x60
 8005b2a:	d877      	bhi.n	8005c1c <HAL_TIM_ConfigClockSource+0x16c>
 8005b2c:	2b50      	cmp	r3, #80	; 0x50
 8005b2e:	d03c      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0xfa>
 8005b30:	2b50      	cmp	r3, #80	; 0x50
 8005b32:	d873      	bhi.n	8005c1c <HAL_TIM_ConfigClockSource+0x16c>
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d058      	beq.n	8005bea <HAL_TIM_ConfigClockSource+0x13a>
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	d86f      	bhi.n	8005c1c <HAL_TIM_ConfigClockSource+0x16c>
 8005b3c:	2b30      	cmp	r3, #48	; 0x30
 8005b3e:	d064      	beq.n	8005c0a <HAL_TIM_ConfigClockSource+0x15a>
 8005b40:	2b30      	cmp	r3, #48	; 0x30
 8005b42:	d86b      	bhi.n	8005c1c <HAL_TIM_ConfigClockSource+0x16c>
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	d060      	beq.n	8005c0a <HAL_TIM_ConfigClockSource+0x15a>
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d867      	bhi.n	8005c1c <HAL_TIM_ConfigClockSource+0x16c>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d05c      	beq.n	8005c0a <HAL_TIM_ConfigClockSource+0x15a>
 8005b50:	2b10      	cmp	r3, #16
 8005b52:	d05a      	beq.n	8005c0a <HAL_TIM_ConfigClockSource+0x15a>
 8005b54:	e062      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b66:	f000 f9b9 	bl	8005edc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	609a      	str	r2, [r3, #8]
      break;
 8005b82:	e04f      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b94:	f000 f9a2 	bl	8005edc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ba6:	609a      	str	r2, [r3, #8]
      break;
 8005ba8:	e03c      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f000 f916 	bl	8005de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2150      	movs	r1, #80	; 0x50
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f96f 	bl	8005ea6 <TIM_ITRx_SetConfig>
      break;
 8005bc8:	e02c      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f000 f935 	bl	8005e46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2160      	movs	r1, #96	; 0x60
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 f95f 	bl	8005ea6 <TIM_ITRx_SetConfig>
      break;
 8005be8:	e01c      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f000 f8f6 	bl	8005de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2140      	movs	r1, #64	; 0x40
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f94f 	bl	8005ea6 <TIM_ITRx_SetConfig>
      break;
 8005c08:	e00c      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4619      	mov	r1, r3
 8005c14:	4610      	mov	r0, r2
 8005c16:	f000 f946 	bl	8005ea6 <TIM_ITRx_SetConfig>
      break;
 8005c1a:	e003      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c20:	e000      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	fffeff88 	.word	0xfffeff88

08005c44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a40      	ldr	r2, [pc, #256]	; (8005dbc <TIM_Base_SetConfig+0x114>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d013      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc6:	d00f      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3d      	ldr	r2, [pc, #244]	; (8005dc0 <TIM_Base_SetConfig+0x118>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3c      	ldr	r2, [pc, #240]	; (8005dc4 <TIM_Base_SetConfig+0x11c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a3b      	ldr	r2, [pc, #236]	; (8005dc8 <TIM_Base_SetConfig+0x120>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a3a      	ldr	r2, [pc, #232]	; (8005dcc <TIM_Base_SetConfig+0x124>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d108      	bne.n	8005cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2f      	ldr	r2, [pc, #188]	; (8005dbc <TIM_Base_SetConfig+0x114>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d02b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d08:	d027      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2c      	ldr	r2, [pc, #176]	; (8005dc0 <TIM_Base_SetConfig+0x118>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d023      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2b      	ldr	r2, [pc, #172]	; (8005dc4 <TIM_Base_SetConfig+0x11c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01f      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2a      	ldr	r2, [pc, #168]	; (8005dc8 <TIM_Base_SetConfig+0x120>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a29      	ldr	r2, [pc, #164]	; (8005dcc <TIM_Base_SetConfig+0x124>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d017      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a28      	ldr	r2, [pc, #160]	; (8005dd0 <TIM_Base_SetConfig+0x128>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a27      	ldr	r2, [pc, #156]	; (8005dd4 <TIM_Base_SetConfig+0x12c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00f      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a26      	ldr	r2, [pc, #152]	; (8005dd8 <TIM_Base_SetConfig+0x130>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a25      	ldr	r2, [pc, #148]	; (8005ddc <TIM_Base_SetConfig+0x134>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d007      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a24      	ldr	r2, [pc, #144]	; (8005de0 <TIM_Base_SetConfig+0x138>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a23      	ldr	r2, [pc, #140]	; (8005de4 <TIM_Base_SetConfig+0x13c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d108      	bne.n	8005d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <TIM_Base_SetConfig+0x114>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0xf8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a0c      	ldr	r2, [pc, #48]	; (8005dcc <TIM_Base_SetConfig+0x124>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d103      	bne.n	8005da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	615a      	str	r2, [r3, #20]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40000800 	.word	0x40000800
 8005dc8:	40000c00 	.word	0x40000c00
 8005dcc:	40010400 	.word	0x40010400
 8005dd0:	40014000 	.word	0x40014000
 8005dd4:	40014400 	.word	0x40014400
 8005dd8:	40014800 	.word	0x40014800
 8005ddc:	40001800 	.word	0x40001800
 8005de0:	40001c00 	.word	0x40001c00
 8005de4:	40002000 	.word	0x40002000

08005de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f023 0201 	bic.w	r2, r3, #1
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f023 030a 	bic.w	r3, r3, #10
 8005e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b087      	sub	sp, #28
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f023 0210 	bic.w	r2, r3, #16
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	031b      	lsls	r3, r3, #12
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	621a      	str	r2, [r3, #32]
}
 8005e9a:	bf00      	nop
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f043 0307 	orr.w	r3, r3, #7
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	609a      	str	r2, [r3, #8]
}
 8005ed0:	bf00      	nop
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	021a      	lsls	r2, r3, #8
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	431a      	orrs	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	609a      	str	r2, [r3, #8]
}
 8005f10:	bf00      	nop
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e06d      	b.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a30      	ldr	r2, [pc, #192]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d004      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a2f      	ldr	r2, [pc, #188]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d108      	bne.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a20      	ldr	r2, [pc, #128]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1d      	ldr	r2, [pc, #116]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1c      	ldr	r2, [pc, #112]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1a      	ldr	r2, [pc, #104]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a15      	ldr	r2, [pc, #84]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a16      	ldr	r2, [pc, #88]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a15      	ldr	r2, [pc, #84]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d10c      	bne.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40010000 	.word	0x40010000
 8006020:	40010400 	.word	0x40010400
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800
 800602c:	40000c00 	.word	0x40000c00
 8006030:	40014000 	.word	0x40014000
 8006034:	40001800 	.word	0x40001800

08006038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e040      	b.n	8006108 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fb fc26 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	; 0x24
 80060a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0201 	bic.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f8b0 	bl	8006218 <UART_SetConfig>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e022      	b.n	8006108 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fb08 	bl	80066e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fb8f 	bl	8006824 <UART_CheckIdleState>
 8006106:	4603      	mov	r3, r0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	; 0x28
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006124:	2b20      	cmp	r3, #32
 8006126:	d171      	bne.n	800620c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_UART_Transmit+0x24>
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e06a      	b.n	800620e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2221      	movs	r2, #33	; 0x21
 8006144:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006146:	f7fc fd1f 	bl	8002b88 <HAL_GetTick>
 800614a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	88fa      	ldrh	r2, [r7, #6]
 8006150:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	88fa      	ldrh	r2, [r7, #6]
 8006158:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006164:	d108      	bne.n	8006178 <HAL_UART_Transmit+0x68>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	e003      	b.n	8006180 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006180:	e02c      	b.n	80061dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2200      	movs	r2, #0
 800618a:	2180      	movs	r1, #128	; 0x80
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fb96 	bl	80068be <UART_WaitOnFlagUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e038      	b.n	800620e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10b      	bne.n	80061ba <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	3302      	adds	r3, #2
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	e007      	b.n	80061ca <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	781a      	ldrb	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	3301      	adds	r3, #1
 80061c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1cc      	bne.n	8006182 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2200      	movs	r2, #0
 80061f0:	2140      	movs	r1, #64	; 0x40
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fb63 	bl	80068be <UART_WaitOnFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e005      	b.n	800620e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2220      	movs	r2, #32
 8006206:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	e000      	b.n	800620e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800620c:	2302      	movs	r3, #2
  }
}
 800620e:	4618      	mov	r0, r3
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4ba6      	ldr	r3, [pc, #664]	; (80064dc <UART_SetConfig+0x2c4>)
 8006244:	4013      	ands	r3, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	6979      	ldr	r1, [r7, #20]
 800624c:	430b      	orrs	r3, r1
 800624e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	430a      	orrs	r2, r1
 8006288:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a94      	ldr	r2, [pc, #592]	; (80064e0 <UART_SetConfig+0x2c8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d120      	bne.n	80062d6 <UART_SetConfig+0xbe>
 8006294:	4b93      	ldr	r3, [pc, #588]	; (80064e4 <UART_SetConfig+0x2cc>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d816      	bhi.n	80062d0 <UART_SetConfig+0xb8>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <UART_SetConfig+0x90>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062b9 	.word	0x080062b9
 80062ac:	080062c5 	.word	0x080062c5
 80062b0:	080062bf 	.word	0x080062bf
 80062b4:	080062cb 	.word	0x080062cb
 80062b8:	2301      	movs	r3, #1
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e150      	b.n	8006560 <UART_SetConfig+0x348>
 80062be:	2302      	movs	r3, #2
 80062c0:	77fb      	strb	r3, [r7, #31]
 80062c2:	e14d      	b.n	8006560 <UART_SetConfig+0x348>
 80062c4:	2304      	movs	r3, #4
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e14a      	b.n	8006560 <UART_SetConfig+0x348>
 80062ca:	2308      	movs	r3, #8
 80062cc:	77fb      	strb	r3, [r7, #31]
 80062ce:	e147      	b.n	8006560 <UART_SetConfig+0x348>
 80062d0:	2310      	movs	r3, #16
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e144      	b.n	8006560 <UART_SetConfig+0x348>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a83      	ldr	r2, [pc, #524]	; (80064e8 <UART_SetConfig+0x2d0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d132      	bne.n	8006346 <UART_SetConfig+0x12e>
 80062e0:	4b80      	ldr	r3, [pc, #512]	; (80064e4 <UART_SetConfig+0x2cc>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e6:	f003 030c 	and.w	r3, r3, #12
 80062ea:	2b0c      	cmp	r3, #12
 80062ec:	d828      	bhi.n	8006340 <UART_SetConfig+0x128>
 80062ee:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <UART_SetConfig+0xdc>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006329 	.word	0x08006329
 80062f8:	08006341 	.word	0x08006341
 80062fc:	08006341 	.word	0x08006341
 8006300:	08006341 	.word	0x08006341
 8006304:	08006335 	.word	0x08006335
 8006308:	08006341 	.word	0x08006341
 800630c:	08006341 	.word	0x08006341
 8006310:	08006341 	.word	0x08006341
 8006314:	0800632f 	.word	0x0800632f
 8006318:	08006341 	.word	0x08006341
 800631c:	08006341 	.word	0x08006341
 8006320:	08006341 	.word	0x08006341
 8006324:	0800633b 	.word	0x0800633b
 8006328:	2300      	movs	r3, #0
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e118      	b.n	8006560 <UART_SetConfig+0x348>
 800632e:	2302      	movs	r3, #2
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e115      	b.n	8006560 <UART_SetConfig+0x348>
 8006334:	2304      	movs	r3, #4
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e112      	b.n	8006560 <UART_SetConfig+0x348>
 800633a:	2308      	movs	r3, #8
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e10f      	b.n	8006560 <UART_SetConfig+0x348>
 8006340:	2310      	movs	r3, #16
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e10c      	b.n	8006560 <UART_SetConfig+0x348>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a68      	ldr	r2, [pc, #416]	; (80064ec <UART_SetConfig+0x2d4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d120      	bne.n	8006392 <UART_SetConfig+0x17a>
 8006350:	4b64      	ldr	r3, [pc, #400]	; (80064e4 <UART_SetConfig+0x2cc>)
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006356:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800635a:	2b30      	cmp	r3, #48	; 0x30
 800635c:	d013      	beq.n	8006386 <UART_SetConfig+0x16e>
 800635e:	2b30      	cmp	r3, #48	; 0x30
 8006360:	d814      	bhi.n	800638c <UART_SetConfig+0x174>
 8006362:	2b20      	cmp	r3, #32
 8006364:	d009      	beq.n	800637a <UART_SetConfig+0x162>
 8006366:	2b20      	cmp	r3, #32
 8006368:	d810      	bhi.n	800638c <UART_SetConfig+0x174>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <UART_SetConfig+0x15c>
 800636e:	2b10      	cmp	r3, #16
 8006370:	d006      	beq.n	8006380 <UART_SetConfig+0x168>
 8006372:	e00b      	b.n	800638c <UART_SetConfig+0x174>
 8006374:	2300      	movs	r3, #0
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e0f2      	b.n	8006560 <UART_SetConfig+0x348>
 800637a:	2302      	movs	r3, #2
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e0ef      	b.n	8006560 <UART_SetConfig+0x348>
 8006380:	2304      	movs	r3, #4
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e0ec      	b.n	8006560 <UART_SetConfig+0x348>
 8006386:	2308      	movs	r3, #8
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e0e9      	b.n	8006560 <UART_SetConfig+0x348>
 800638c:	2310      	movs	r3, #16
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e0e6      	b.n	8006560 <UART_SetConfig+0x348>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a56      	ldr	r2, [pc, #344]	; (80064f0 <UART_SetConfig+0x2d8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d120      	bne.n	80063de <UART_SetConfig+0x1c6>
 800639c:	4b51      	ldr	r3, [pc, #324]	; (80064e4 <UART_SetConfig+0x2cc>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063a6:	2bc0      	cmp	r3, #192	; 0xc0
 80063a8:	d013      	beq.n	80063d2 <UART_SetConfig+0x1ba>
 80063aa:	2bc0      	cmp	r3, #192	; 0xc0
 80063ac:	d814      	bhi.n	80063d8 <UART_SetConfig+0x1c0>
 80063ae:	2b80      	cmp	r3, #128	; 0x80
 80063b0:	d009      	beq.n	80063c6 <UART_SetConfig+0x1ae>
 80063b2:	2b80      	cmp	r3, #128	; 0x80
 80063b4:	d810      	bhi.n	80063d8 <UART_SetConfig+0x1c0>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <UART_SetConfig+0x1a8>
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d006      	beq.n	80063cc <UART_SetConfig+0x1b4>
 80063be:	e00b      	b.n	80063d8 <UART_SetConfig+0x1c0>
 80063c0:	2300      	movs	r3, #0
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e0cc      	b.n	8006560 <UART_SetConfig+0x348>
 80063c6:	2302      	movs	r3, #2
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e0c9      	b.n	8006560 <UART_SetConfig+0x348>
 80063cc:	2304      	movs	r3, #4
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	e0c6      	b.n	8006560 <UART_SetConfig+0x348>
 80063d2:	2308      	movs	r3, #8
 80063d4:	77fb      	strb	r3, [r7, #31]
 80063d6:	e0c3      	b.n	8006560 <UART_SetConfig+0x348>
 80063d8:	2310      	movs	r3, #16
 80063da:	77fb      	strb	r3, [r7, #31]
 80063dc:	e0c0      	b.n	8006560 <UART_SetConfig+0x348>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a44      	ldr	r2, [pc, #272]	; (80064f4 <UART_SetConfig+0x2dc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d125      	bne.n	8006434 <UART_SetConfig+0x21c>
 80063e8:	4b3e      	ldr	r3, [pc, #248]	; (80064e4 <UART_SetConfig+0x2cc>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063f6:	d017      	beq.n	8006428 <UART_SetConfig+0x210>
 80063f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063fc:	d817      	bhi.n	800642e <UART_SetConfig+0x216>
 80063fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006402:	d00b      	beq.n	800641c <UART_SetConfig+0x204>
 8006404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006408:	d811      	bhi.n	800642e <UART_SetConfig+0x216>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <UART_SetConfig+0x1fe>
 800640e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006412:	d006      	beq.n	8006422 <UART_SetConfig+0x20a>
 8006414:	e00b      	b.n	800642e <UART_SetConfig+0x216>
 8006416:	2300      	movs	r3, #0
 8006418:	77fb      	strb	r3, [r7, #31]
 800641a:	e0a1      	b.n	8006560 <UART_SetConfig+0x348>
 800641c:	2302      	movs	r3, #2
 800641e:	77fb      	strb	r3, [r7, #31]
 8006420:	e09e      	b.n	8006560 <UART_SetConfig+0x348>
 8006422:	2304      	movs	r3, #4
 8006424:	77fb      	strb	r3, [r7, #31]
 8006426:	e09b      	b.n	8006560 <UART_SetConfig+0x348>
 8006428:	2308      	movs	r3, #8
 800642a:	77fb      	strb	r3, [r7, #31]
 800642c:	e098      	b.n	8006560 <UART_SetConfig+0x348>
 800642e:	2310      	movs	r3, #16
 8006430:	77fb      	strb	r3, [r7, #31]
 8006432:	e095      	b.n	8006560 <UART_SetConfig+0x348>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a2f      	ldr	r2, [pc, #188]	; (80064f8 <UART_SetConfig+0x2e0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d125      	bne.n	800648a <UART_SetConfig+0x272>
 800643e:	4b29      	ldr	r3, [pc, #164]	; (80064e4 <UART_SetConfig+0x2cc>)
 8006440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006444:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006448:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800644c:	d017      	beq.n	800647e <UART_SetConfig+0x266>
 800644e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006452:	d817      	bhi.n	8006484 <UART_SetConfig+0x26c>
 8006454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006458:	d00b      	beq.n	8006472 <UART_SetConfig+0x25a>
 800645a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800645e:	d811      	bhi.n	8006484 <UART_SetConfig+0x26c>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <UART_SetConfig+0x254>
 8006464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006468:	d006      	beq.n	8006478 <UART_SetConfig+0x260>
 800646a:	e00b      	b.n	8006484 <UART_SetConfig+0x26c>
 800646c:	2301      	movs	r3, #1
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e076      	b.n	8006560 <UART_SetConfig+0x348>
 8006472:	2302      	movs	r3, #2
 8006474:	77fb      	strb	r3, [r7, #31]
 8006476:	e073      	b.n	8006560 <UART_SetConfig+0x348>
 8006478:	2304      	movs	r3, #4
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e070      	b.n	8006560 <UART_SetConfig+0x348>
 800647e:	2308      	movs	r3, #8
 8006480:	77fb      	strb	r3, [r7, #31]
 8006482:	e06d      	b.n	8006560 <UART_SetConfig+0x348>
 8006484:	2310      	movs	r3, #16
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	e06a      	b.n	8006560 <UART_SetConfig+0x348>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <UART_SetConfig+0x2e4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d138      	bne.n	8006506 <UART_SetConfig+0x2ee>
 8006494:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <UART_SetConfig+0x2cc>)
 8006496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800649e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064a2:	d017      	beq.n	80064d4 <UART_SetConfig+0x2bc>
 80064a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064a8:	d82a      	bhi.n	8006500 <UART_SetConfig+0x2e8>
 80064aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ae:	d00b      	beq.n	80064c8 <UART_SetConfig+0x2b0>
 80064b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b4:	d824      	bhi.n	8006500 <UART_SetConfig+0x2e8>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <UART_SetConfig+0x2aa>
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064be:	d006      	beq.n	80064ce <UART_SetConfig+0x2b6>
 80064c0:	e01e      	b.n	8006500 <UART_SetConfig+0x2e8>
 80064c2:	2300      	movs	r3, #0
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	e04b      	b.n	8006560 <UART_SetConfig+0x348>
 80064c8:	2302      	movs	r3, #2
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e048      	b.n	8006560 <UART_SetConfig+0x348>
 80064ce:	2304      	movs	r3, #4
 80064d0:	77fb      	strb	r3, [r7, #31]
 80064d2:	e045      	b.n	8006560 <UART_SetConfig+0x348>
 80064d4:	2308      	movs	r3, #8
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e042      	b.n	8006560 <UART_SetConfig+0x348>
 80064da:	bf00      	nop
 80064dc:	efff69f3 	.word	0xefff69f3
 80064e0:	40011000 	.word	0x40011000
 80064e4:	40023800 	.word	0x40023800
 80064e8:	40004400 	.word	0x40004400
 80064ec:	40004800 	.word	0x40004800
 80064f0:	40004c00 	.word	0x40004c00
 80064f4:	40005000 	.word	0x40005000
 80064f8:	40011400 	.word	0x40011400
 80064fc:	40007800 	.word	0x40007800
 8006500:	2310      	movs	r3, #16
 8006502:	77fb      	strb	r3, [r7, #31]
 8006504:	e02c      	b.n	8006560 <UART_SetConfig+0x348>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a72      	ldr	r2, [pc, #456]	; (80066d4 <UART_SetConfig+0x4bc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d125      	bne.n	800655c <UART_SetConfig+0x344>
 8006510:	4b71      	ldr	r3, [pc, #452]	; (80066d8 <UART_SetConfig+0x4c0>)
 8006512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006516:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800651a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800651e:	d017      	beq.n	8006550 <UART_SetConfig+0x338>
 8006520:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006524:	d817      	bhi.n	8006556 <UART_SetConfig+0x33e>
 8006526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652a:	d00b      	beq.n	8006544 <UART_SetConfig+0x32c>
 800652c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006530:	d811      	bhi.n	8006556 <UART_SetConfig+0x33e>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <UART_SetConfig+0x326>
 8006536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800653a:	d006      	beq.n	800654a <UART_SetConfig+0x332>
 800653c:	e00b      	b.n	8006556 <UART_SetConfig+0x33e>
 800653e:	2300      	movs	r3, #0
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	e00d      	b.n	8006560 <UART_SetConfig+0x348>
 8006544:	2302      	movs	r3, #2
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e00a      	b.n	8006560 <UART_SetConfig+0x348>
 800654a:	2304      	movs	r3, #4
 800654c:	77fb      	strb	r3, [r7, #31]
 800654e:	e007      	b.n	8006560 <UART_SetConfig+0x348>
 8006550:	2308      	movs	r3, #8
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e004      	b.n	8006560 <UART_SetConfig+0x348>
 8006556:	2310      	movs	r3, #16
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e001      	b.n	8006560 <UART_SetConfig+0x348>
 800655c:	2310      	movs	r3, #16
 800655e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006568:	d15b      	bne.n	8006622 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800656a:	7ffb      	ldrb	r3, [r7, #31]
 800656c:	2b08      	cmp	r3, #8
 800656e:	d828      	bhi.n	80065c2 <UART_SetConfig+0x3aa>
 8006570:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <UART_SetConfig+0x360>)
 8006572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006576:	bf00      	nop
 8006578:	0800659d 	.word	0x0800659d
 800657c:	080065a5 	.word	0x080065a5
 8006580:	080065ad 	.word	0x080065ad
 8006584:	080065c3 	.word	0x080065c3
 8006588:	080065b3 	.word	0x080065b3
 800658c:	080065c3 	.word	0x080065c3
 8006590:	080065c3 	.word	0x080065c3
 8006594:	080065c3 	.word	0x080065c3
 8006598:	080065bb 	.word	0x080065bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800659c:	f7fe f84e 	bl	800463c <HAL_RCC_GetPCLK1Freq>
 80065a0:	61b8      	str	r0, [r7, #24]
        break;
 80065a2:	e013      	b.n	80065cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a4:	f7fe f85e 	bl	8004664 <HAL_RCC_GetPCLK2Freq>
 80065a8:	61b8      	str	r0, [r7, #24]
        break;
 80065aa:	e00f      	b.n	80065cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065ac:	4b4b      	ldr	r3, [pc, #300]	; (80066dc <UART_SetConfig+0x4c4>)
 80065ae:	61bb      	str	r3, [r7, #24]
        break;
 80065b0:	e00c      	b.n	80065cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b2:	f7fd ff31 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80065b6:	61b8      	str	r0, [r7, #24]
        break;
 80065b8:	e008      	b.n	80065cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065be:	61bb      	str	r3, [r7, #24]
        break;
 80065c0:	e004      	b.n	80065cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	77bb      	strb	r3, [r7, #30]
        break;
 80065ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d074      	beq.n	80066bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	005a      	lsls	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	441a      	add	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d916      	bls.n	800661c <UART_SetConfig+0x404>
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f4:	d212      	bcs.n	800661c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f023 030f 	bic.w	r3, r3, #15
 80065fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	b29b      	uxth	r3, r3
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	b29a      	uxth	r2, r3
 800660c:	89fb      	ldrh	r3, [r7, #14]
 800660e:	4313      	orrs	r3, r2
 8006610:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	89fa      	ldrh	r2, [r7, #14]
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	e04f      	b.n	80066bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	77bb      	strb	r3, [r7, #30]
 8006620:	e04c      	b.n	80066bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006622:	7ffb      	ldrb	r3, [r7, #31]
 8006624:	2b08      	cmp	r3, #8
 8006626:	d828      	bhi.n	800667a <UART_SetConfig+0x462>
 8006628:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <UART_SetConfig+0x418>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006655 	.word	0x08006655
 8006634:	0800665d 	.word	0x0800665d
 8006638:	08006665 	.word	0x08006665
 800663c:	0800667b 	.word	0x0800667b
 8006640:	0800666b 	.word	0x0800666b
 8006644:	0800667b 	.word	0x0800667b
 8006648:	0800667b 	.word	0x0800667b
 800664c:	0800667b 	.word	0x0800667b
 8006650:	08006673 	.word	0x08006673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006654:	f7fd fff2 	bl	800463c <HAL_RCC_GetPCLK1Freq>
 8006658:	61b8      	str	r0, [r7, #24]
        break;
 800665a:	e013      	b.n	8006684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800665c:	f7fe f802 	bl	8004664 <HAL_RCC_GetPCLK2Freq>
 8006660:	61b8      	str	r0, [r7, #24]
        break;
 8006662:	e00f      	b.n	8006684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006664:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <UART_SetConfig+0x4c4>)
 8006666:	61bb      	str	r3, [r7, #24]
        break;
 8006668:	e00c      	b.n	8006684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666a:	f7fd fed5 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 800666e:	61b8      	str	r0, [r7, #24]
        break;
 8006670:	e008      	b.n	8006684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006676:	61bb      	str	r3, [r7, #24]
        break;
 8006678:	e004      	b.n	8006684 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	77bb      	strb	r3, [r7, #30]
        break;
 8006682:	bf00      	nop
    }

    if (pclk != 0U)
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d018      	beq.n	80066bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	085a      	lsrs	r2, r3, #1
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	441a      	add	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2b0f      	cmp	r3, #15
 80066a2:	d909      	bls.n	80066b8 <UART_SetConfig+0x4a0>
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066aa:	d205      	bcs.n	80066b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60da      	str	r2, [r3, #12]
 80066b6:	e001      	b.n	80066bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	40007c00 	.word	0x40007c00
 80066d8:	40023800 	.word	0x40023800
 80066dc:	00f42400 	.word	0x00f42400

080066e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01a      	beq.n	80067f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067de:	d10a      	bne.n	80067f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	605a      	str	r2, [r3, #4]
  }
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af02      	add	r7, sp, #8
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006834:	f7fc f9a8 	bl	8002b88 <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b08      	cmp	r3, #8
 8006846:	d10e      	bne.n	8006866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f831 	bl	80068be <UART_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e027      	b.n	80068b6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d10e      	bne.n	8006892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f81b 	bl	80068be <UART_WaitOnFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e011      	b.n	80068b6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b09c      	sub	sp, #112	; 0x70
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	603b      	str	r3, [r7, #0]
 80068ca:	4613      	mov	r3, r2
 80068cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ce:	e0a7      	b.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d6:	f000 80a3 	beq.w	8006a20 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068da:	f7fc f955 	bl	8002b88 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d302      	bcc.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80068ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d13f      	bne.n	8006970 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006900:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006904:	667b      	str	r3, [r7, #100]	; 0x64
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800690e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006910:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006914:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800691c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e6      	bne.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3308      	adds	r3, #8
 8006928:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	f023 0301 	bic.w	r3, r3, #1
 8006938:	663b      	str	r3, [r7, #96]	; 0x60
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3308      	adds	r3, #8
 8006940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006942:	64ba      	str	r2, [r7, #72]	; 0x48
 8006944:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e5      	bne.n	8006922 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e068      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	d050      	beq.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698c:	d148      	bne.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006996:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
 80069b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e6      	bne.n	8006998 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	613b      	str	r3, [r7, #16]
   return(result);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f023 0301 	bic.w	r3, r3, #1
 80069e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3308      	adds	r3, #8
 80069e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069ea:	623a      	str	r2, [r7, #32]
 80069ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	69f9      	ldr	r1, [r7, #28]
 80069f0:	6a3a      	ldr	r2, [r7, #32]
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e5      	bne.n	80069ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2220      	movs	r2, #32
 8006a02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e010      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69da      	ldr	r2, [r3, #28]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	f43f af48 	beq.w	80068d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3770      	adds	r7, #112	; 0x70
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <__cvt>:
 8006a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4c:	ed2d 8b02 	vpush	{d8}
 8006a50:	eeb0 8b40 	vmov.f64	d8, d0
 8006a54:	b085      	sub	sp, #20
 8006a56:	4617      	mov	r7, r2
 8006a58:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006a5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006a5c:	ee18 2a90 	vmov	r2, s17
 8006a60:	f025 0520 	bic.w	r5, r5, #32
 8006a64:	2a00      	cmp	r2, #0
 8006a66:	bfb6      	itet	lt
 8006a68:	222d      	movlt	r2, #45	; 0x2d
 8006a6a:	2200      	movge	r2, #0
 8006a6c:	eeb1 8b40 	vneglt.f64	d8, d0
 8006a70:	2d46      	cmp	r5, #70	; 0x46
 8006a72:	460c      	mov	r4, r1
 8006a74:	701a      	strb	r2, [r3, #0]
 8006a76:	d004      	beq.n	8006a82 <__cvt+0x38>
 8006a78:	2d45      	cmp	r5, #69	; 0x45
 8006a7a:	d100      	bne.n	8006a7e <__cvt+0x34>
 8006a7c:	3401      	adds	r4, #1
 8006a7e:	2102      	movs	r1, #2
 8006a80:	e000      	b.n	8006a84 <__cvt+0x3a>
 8006a82:	2103      	movs	r1, #3
 8006a84:	ab03      	add	r3, sp, #12
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	ab02      	add	r3, sp, #8
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	4633      	mov	r3, r6
 8006a90:	eeb0 0b48 	vmov.f64	d0, d8
 8006a94:	f000 fe60 	bl	8007758 <_dtoa_r>
 8006a98:	2d47      	cmp	r5, #71	; 0x47
 8006a9a:	d101      	bne.n	8006aa0 <__cvt+0x56>
 8006a9c:	07fb      	lsls	r3, r7, #31
 8006a9e:	d51a      	bpl.n	8006ad6 <__cvt+0x8c>
 8006aa0:	2d46      	cmp	r5, #70	; 0x46
 8006aa2:	eb00 0204 	add.w	r2, r0, r4
 8006aa6:	d10c      	bne.n	8006ac2 <__cvt+0x78>
 8006aa8:	7803      	ldrb	r3, [r0, #0]
 8006aaa:	2b30      	cmp	r3, #48	; 0x30
 8006aac:	d107      	bne.n	8006abe <__cvt+0x74>
 8006aae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab6:	bf1c      	itt	ne
 8006ab8:	f1c4 0401 	rsbne	r4, r4, #1
 8006abc:	6034      	strne	r4, [r6, #0]
 8006abe:	6833      	ldr	r3, [r6, #0]
 8006ac0:	441a      	add	r2, r3
 8006ac2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aca:	bf08      	it	eq
 8006acc:	9203      	streq	r2, [sp, #12]
 8006ace:	2130      	movs	r1, #48	; 0x30
 8006ad0:	9b03      	ldr	r3, [sp, #12]
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d307      	bcc.n	8006ae6 <__cvt+0x9c>
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ada:	1a1b      	subs	r3, r3, r0
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	b005      	add	sp, #20
 8006ae0:	ecbd 8b02 	vpop	{d8}
 8006ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ae6:	1c5c      	adds	r4, r3, #1
 8006ae8:	9403      	str	r4, [sp, #12]
 8006aea:	7019      	strb	r1, [r3, #0]
 8006aec:	e7f0      	b.n	8006ad0 <__cvt+0x86>

08006aee <__exponent>:
 8006aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006af0:	4603      	mov	r3, r0
 8006af2:	2900      	cmp	r1, #0
 8006af4:	bfb8      	it	lt
 8006af6:	4249      	neglt	r1, r1
 8006af8:	f803 2b02 	strb.w	r2, [r3], #2
 8006afc:	bfb4      	ite	lt
 8006afe:	222d      	movlt	r2, #45	; 0x2d
 8006b00:	222b      	movge	r2, #43	; 0x2b
 8006b02:	2909      	cmp	r1, #9
 8006b04:	7042      	strb	r2, [r0, #1]
 8006b06:	dd2a      	ble.n	8006b5e <__exponent+0x70>
 8006b08:	f10d 0207 	add.w	r2, sp, #7
 8006b0c:	4617      	mov	r7, r2
 8006b0e:	260a      	movs	r6, #10
 8006b10:	4694      	mov	ip, r2
 8006b12:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b16:	fb06 1415 	mls	r4, r6, r5, r1
 8006b1a:	3430      	adds	r4, #48	; 0x30
 8006b1c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006b20:	460c      	mov	r4, r1
 8006b22:	2c63      	cmp	r4, #99	; 0x63
 8006b24:	f102 32ff 	add.w	r2, r2, #4294967295
 8006b28:	4629      	mov	r1, r5
 8006b2a:	dcf1      	bgt.n	8006b10 <__exponent+0x22>
 8006b2c:	3130      	adds	r1, #48	; 0x30
 8006b2e:	f1ac 0402 	sub.w	r4, ip, #2
 8006b32:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b36:	1c41      	adds	r1, r0, #1
 8006b38:	4622      	mov	r2, r4
 8006b3a:	42ba      	cmp	r2, r7
 8006b3c:	d30a      	bcc.n	8006b54 <__exponent+0x66>
 8006b3e:	f10d 0209 	add.w	r2, sp, #9
 8006b42:	eba2 020c 	sub.w	r2, r2, ip
 8006b46:	42bc      	cmp	r4, r7
 8006b48:	bf88      	it	hi
 8006b4a:	2200      	movhi	r2, #0
 8006b4c:	4413      	add	r3, r2
 8006b4e:	1a18      	subs	r0, r3, r0
 8006b50:	b003      	add	sp, #12
 8006b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b54:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b58:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b5c:	e7ed      	b.n	8006b3a <__exponent+0x4c>
 8006b5e:	2330      	movs	r3, #48	; 0x30
 8006b60:	3130      	adds	r1, #48	; 0x30
 8006b62:	7083      	strb	r3, [r0, #2]
 8006b64:	70c1      	strb	r1, [r0, #3]
 8006b66:	1d03      	adds	r3, r0, #4
 8006b68:	e7f1      	b.n	8006b4e <__exponent+0x60>
 8006b6a:	0000      	movs	r0, r0
 8006b6c:	0000      	movs	r0, r0
	...

08006b70 <_printf_float>:
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	b08b      	sub	sp, #44	; 0x2c
 8006b76:	460c      	mov	r4, r1
 8006b78:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006b7c:	4616      	mov	r6, r2
 8006b7e:	461f      	mov	r7, r3
 8006b80:	4605      	mov	r5, r0
 8006b82:	f000 fce9 	bl	8007558 <_localeconv_r>
 8006b86:	f8d0 b000 	ldr.w	fp, [r0]
 8006b8a:	4658      	mov	r0, fp
 8006b8c:	f7f9 fba8 	bl	80002e0 <strlen>
 8006b90:	2300      	movs	r3, #0
 8006b92:	9308      	str	r3, [sp, #32]
 8006b94:	f8d8 3000 	ldr.w	r3, [r8]
 8006b98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b9c:	6822      	ldr	r2, [r4, #0]
 8006b9e:	3307      	adds	r3, #7
 8006ba0:	f023 0307 	bic.w	r3, r3, #7
 8006ba4:	f103 0108 	add.w	r1, r3, #8
 8006ba8:	f8c8 1000 	str.w	r1, [r8]
 8006bac:	ed93 0b00 	vldr	d0, [r3]
 8006bb0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006e10 <_printf_float+0x2a0>
 8006bb4:	eeb0 7bc0 	vabs.f64	d7, d0
 8006bb8:	eeb4 7b46 	vcmp.f64	d7, d6
 8006bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8006bc4:	4682      	mov	sl, r0
 8006bc6:	dd24      	ble.n	8006c12 <_printf_float+0xa2>
 8006bc8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd0:	d502      	bpl.n	8006bd8 <_printf_float+0x68>
 8006bd2:	232d      	movs	r3, #45	; 0x2d
 8006bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd8:	498f      	ldr	r1, [pc, #572]	; (8006e18 <_printf_float+0x2a8>)
 8006bda:	4b90      	ldr	r3, [pc, #576]	; (8006e1c <_printf_float+0x2ac>)
 8006bdc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006be0:	bf94      	ite	ls
 8006be2:	4688      	movls	r8, r1
 8006be4:	4698      	movhi	r8, r3
 8006be6:	2303      	movs	r3, #3
 8006be8:	6123      	str	r3, [r4, #16]
 8006bea:	f022 0204 	bic.w	r2, r2, #4
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6022      	str	r2, [r4, #0]
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	9700      	str	r7, [sp, #0]
 8006bf6:	4633      	mov	r3, r6
 8006bf8:	aa09      	add	r2, sp, #36	; 0x24
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f000 f9d1 	bl	8006fa4 <_printf_common>
 8006c02:	3001      	adds	r0, #1
 8006c04:	f040 808a 	bne.w	8006d1c <_printf_float+0x1ac>
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	b00b      	add	sp, #44	; 0x2c
 8006c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c12:	eeb4 0b40 	vcmp.f64	d0, d0
 8006c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c1a:	d709      	bvc.n	8006c30 <_printf_float+0xc0>
 8006c1c:	ee10 3a90 	vmov	r3, s1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bfbc      	itt	lt
 8006c24:	232d      	movlt	r3, #45	; 0x2d
 8006c26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c2a:	497d      	ldr	r1, [pc, #500]	; (8006e20 <_printf_float+0x2b0>)
 8006c2c:	4b7d      	ldr	r3, [pc, #500]	; (8006e24 <_printf_float+0x2b4>)
 8006c2e:	e7d5      	b.n	8006bdc <_printf_float+0x6c>
 8006c30:	6863      	ldr	r3, [r4, #4]
 8006c32:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c36:	9104      	str	r1, [sp, #16]
 8006c38:	1c59      	adds	r1, r3, #1
 8006c3a:	d13c      	bne.n	8006cb6 <_printf_float+0x146>
 8006c3c:	2306      	movs	r3, #6
 8006c3e:	6063      	str	r3, [r4, #4]
 8006c40:	2300      	movs	r3, #0
 8006c42:	9303      	str	r3, [sp, #12]
 8006c44:	ab08      	add	r3, sp, #32
 8006c46:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006c4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c4e:	ab07      	add	r3, sp, #28
 8006c50:	6861      	ldr	r1, [r4, #4]
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	6022      	str	r2, [r4, #0]
 8006c56:	f10d 031b 	add.w	r3, sp, #27
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f7ff fef5 	bl	8006a4a <__cvt>
 8006c60:	9b04      	ldr	r3, [sp, #16]
 8006c62:	9907      	ldr	r1, [sp, #28]
 8006c64:	2b47      	cmp	r3, #71	; 0x47
 8006c66:	4680      	mov	r8, r0
 8006c68:	d108      	bne.n	8006c7c <_printf_float+0x10c>
 8006c6a:	1cc8      	adds	r0, r1, #3
 8006c6c:	db02      	blt.n	8006c74 <_printf_float+0x104>
 8006c6e:	6863      	ldr	r3, [r4, #4]
 8006c70:	4299      	cmp	r1, r3
 8006c72:	dd41      	ble.n	8006cf8 <_printf_float+0x188>
 8006c74:	f1a9 0902 	sub.w	r9, r9, #2
 8006c78:	fa5f f989 	uxtb.w	r9, r9
 8006c7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c80:	d820      	bhi.n	8006cc4 <_printf_float+0x154>
 8006c82:	3901      	subs	r1, #1
 8006c84:	464a      	mov	r2, r9
 8006c86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c8a:	9107      	str	r1, [sp, #28]
 8006c8c:	f7ff ff2f 	bl	8006aee <__exponent>
 8006c90:	9a08      	ldr	r2, [sp, #32]
 8006c92:	9004      	str	r0, [sp, #16]
 8006c94:	1813      	adds	r3, r2, r0
 8006c96:	2a01      	cmp	r2, #1
 8006c98:	6123      	str	r3, [r4, #16]
 8006c9a:	dc02      	bgt.n	8006ca2 <_printf_float+0x132>
 8006c9c:	6822      	ldr	r2, [r4, #0]
 8006c9e:	07d2      	lsls	r2, r2, #31
 8006ca0:	d501      	bpl.n	8006ca6 <_printf_float+0x136>
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	6123      	str	r3, [r4, #16]
 8006ca6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0a2      	beq.n	8006bf4 <_printf_float+0x84>
 8006cae:	232d      	movs	r3, #45	; 0x2d
 8006cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb4:	e79e      	b.n	8006bf4 <_printf_float+0x84>
 8006cb6:	9904      	ldr	r1, [sp, #16]
 8006cb8:	2947      	cmp	r1, #71	; 0x47
 8006cba:	d1c1      	bne.n	8006c40 <_printf_float+0xd0>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1bf      	bne.n	8006c40 <_printf_float+0xd0>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e7bc      	b.n	8006c3e <_printf_float+0xce>
 8006cc4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006cc8:	d118      	bne.n	8006cfc <_printf_float+0x18c>
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	6863      	ldr	r3, [r4, #4]
 8006cce:	dd0b      	ble.n	8006ce8 <_printf_float+0x178>
 8006cd0:	6121      	str	r1, [r4, #16]
 8006cd2:	b913      	cbnz	r3, 8006cda <_printf_float+0x16a>
 8006cd4:	6822      	ldr	r2, [r4, #0]
 8006cd6:	07d0      	lsls	r0, r2, #31
 8006cd8:	d502      	bpl.n	8006ce0 <_printf_float+0x170>
 8006cda:	3301      	adds	r3, #1
 8006cdc:	440b      	add	r3, r1
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ce4:	9304      	str	r3, [sp, #16]
 8006ce6:	e7de      	b.n	8006ca6 <_printf_float+0x136>
 8006ce8:	b913      	cbnz	r3, 8006cf0 <_printf_float+0x180>
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	07d2      	lsls	r2, r2, #31
 8006cee:	d501      	bpl.n	8006cf4 <_printf_float+0x184>
 8006cf0:	3302      	adds	r3, #2
 8006cf2:	e7f4      	b.n	8006cde <_printf_float+0x16e>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e7f2      	b.n	8006cde <_printf_float+0x16e>
 8006cf8:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006cfc:	9b08      	ldr	r3, [sp, #32]
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	db05      	blt.n	8006d0e <_printf_float+0x19e>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	6121      	str	r1, [r4, #16]
 8006d06:	07d8      	lsls	r0, r3, #31
 8006d08:	d5ea      	bpl.n	8006ce0 <_printf_float+0x170>
 8006d0a:	1c4b      	adds	r3, r1, #1
 8006d0c:	e7e7      	b.n	8006cde <_printf_float+0x16e>
 8006d0e:	2900      	cmp	r1, #0
 8006d10:	bfd4      	ite	le
 8006d12:	f1c1 0202 	rsble	r2, r1, #2
 8006d16:	2201      	movgt	r2, #1
 8006d18:	4413      	add	r3, r2
 8006d1a:	e7e0      	b.n	8006cde <_printf_float+0x16e>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	055a      	lsls	r2, r3, #21
 8006d20:	d407      	bmi.n	8006d32 <_printf_float+0x1c2>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	4642      	mov	r2, r8
 8006d26:	4631      	mov	r1, r6
 8006d28:	4628      	mov	r0, r5
 8006d2a:	47b8      	blx	r7
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d12a      	bne.n	8006d86 <_printf_float+0x216>
 8006d30:	e76a      	b.n	8006c08 <_printf_float+0x98>
 8006d32:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d36:	f240 80e0 	bls.w	8006efa <_printf_float+0x38a>
 8006d3a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006d3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d46:	d133      	bne.n	8006db0 <_printf_float+0x240>
 8006d48:	4a37      	ldr	r2, [pc, #220]	; (8006e28 <_printf_float+0x2b8>)
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f af58 	beq.w	8006c08 <_printf_float+0x98>
 8006d58:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	db02      	blt.n	8006d66 <_printf_float+0x1f6>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	07d8      	lsls	r0, r3, #31
 8006d64:	d50f      	bpl.n	8006d86 <_printf_float+0x216>
 8006d66:	4653      	mov	r3, sl
 8006d68:	465a      	mov	r2, fp
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	47b8      	blx	r7
 8006d70:	3001      	adds	r0, #1
 8006d72:	f43f af49 	beq.w	8006c08 <_printf_float+0x98>
 8006d76:	f04f 0800 	mov.w	r8, #0
 8006d7a:	f104 091a 	add.w	r9, r4, #26
 8006d7e:	9b08      	ldr	r3, [sp, #32]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	4543      	cmp	r3, r8
 8006d84:	dc09      	bgt.n	8006d9a <_printf_float+0x22a>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	079b      	lsls	r3, r3, #30
 8006d8a:	f100 8106 	bmi.w	8006f9a <_printf_float+0x42a>
 8006d8e:	68e0      	ldr	r0, [r4, #12]
 8006d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d92:	4298      	cmp	r0, r3
 8006d94:	bfb8      	it	lt
 8006d96:	4618      	movlt	r0, r3
 8006d98:	e738      	b.n	8006c0c <_printf_float+0x9c>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	464a      	mov	r2, r9
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b8      	blx	r7
 8006da4:	3001      	adds	r0, #1
 8006da6:	f43f af2f 	beq.w	8006c08 <_printf_float+0x98>
 8006daa:	f108 0801 	add.w	r8, r8, #1
 8006dae:	e7e6      	b.n	8006d7e <_printf_float+0x20e>
 8006db0:	9b07      	ldr	r3, [sp, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dc3a      	bgt.n	8006e2c <_printf_float+0x2bc>
 8006db6:	4a1c      	ldr	r2, [pc, #112]	; (8006e28 <_printf_float+0x2b8>)
 8006db8:	2301      	movs	r3, #1
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	f43f af21 	beq.w	8006c08 <_printf_float+0x98>
 8006dc6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	d102      	bne.n	8006dd4 <_printf_float+0x264>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	07d9      	lsls	r1, r3, #31
 8006dd2:	d5d8      	bpl.n	8006d86 <_printf_float+0x216>
 8006dd4:	4653      	mov	r3, sl
 8006dd6:	465a      	mov	r2, fp
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4628      	mov	r0, r5
 8006ddc:	47b8      	blx	r7
 8006dde:	3001      	adds	r0, #1
 8006de0:	f43f af12 	beq.w	8006c08 <_printf_float+0x98>
 8006de4:	f04f 0900 	mov.w	r9, #0
 8006de8:	f104 0a1a 	add.w	sl, r4, #26
 8006dec:	9b07      	ldr	r3, [sp, #28]
 8006dee:	425b      	negs	r3, r3
 8006df0:	454b      	cmp	r3, r9
 8006df2:	dc01      	bgt.n	8006df8 <_printf_float+0x288>
 8006df4:	9b08      	ldr	r3, [sp, #32]
 8006df6:	e795      	b.n	8006d24 <_printf_float+0x1b4>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4652      	mov	r2, sl
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f af00 	beq.w	8006c08 <_printf_float+0x98>
 8006e08:	f109 0901 	add.w	r9, r9, #1
 8006e0c:	e7ee      	b.n	8006dec <_printf_float+0x27c>
 8006e0e:	bf00      	nop
 8006e10:	ffffffff 	.word	0xffffffff
 8006e14:	7fefffff 	.word	0x7fefffff
 8006e18:	0802fa3c 	.word	0x0802fa3c
 8006e1c:	0802fa40 	.word	0x0802fa40
 8006e20:	0802fa44 	.word	0x0802fa44
 8006e24:	0802fa48 	.word	0x0802fa48
 8006e28:	0802fc7b 	.word	0x0802fc7b
 8006e2c:	9a08      	ldr	r2, [sp, #32]
 8006e2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e30:	429a      	cmp	r2, r3
 8006e32:	bfa8      	it	ge
 8006e34:	461a      	movge	r2, r3
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	4691      	mov	r9, r2
 8006e3a:	dc38      	bgt.n	8006eae <_printf_float+0x33e>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	9305      	str	r3, [sp, #20]
 8006e40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e44:	f104 021a 	add.w	r2, r4, #26
 8006e48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e4a:	9905      	ldr	r1, [sp, #20]
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	eba3 0309 	sub.w	r3, r3, r9
 8006e52:	428b      	cmp	r3, r1
 8006e54:	dc33      	bgt.n	8006ebe <_printf_float+0x34e>
 8006e56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	db3c      	blt.n	8006ed8 <_printf_float+0x368>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	07da      	lsls	r2, r3, #31
 8006e62:	d439      	bmi.n	8006ed8 <_printf_float+0x368>
 8006e64:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006e68:	eba2 0903 	sub.w	r9, r2, r3
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	4591      	cmp	r9, r2
 8006e72:	bfa8      	it	ge
 8006e74:	4691      	movge	r9, r2
 8006e76:	f1b9 0f00 	cmp.w	r9, #0
 8006e7a:	dc35      	bgt.n	8006ee8 <_printf_float+0x378>
 8006e7c:	f04f 0800 	mov.w	r8, #0
 8006e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e84:	f104 0a1a 	add.w	sl, r4, #26
 8006e88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e8c:	1a9b      	subs	r3, r3, r2
 8006e8e:	eba3 0309 	sub.w	r3, r3, r9
 8006e92:	4543      	cmp	r3, r8
 8006e94:	f77f af77 	ble.w	8006d86 <_printf_float+0x216>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	4652      	mov	r2, sl
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	47b8      	blx	r7
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	f43f aeb0 	beq.w	8006c08 <_printf_float+0x98>
 8006ea8:	f108 0801 	add.w	r8, r8, #1
 8006eac:	e7ec      	b.n	8006e88 <_printf_float+0x318>
 8006eae:	4613      	mov	r3, r2
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	4642      	mov	r2, r8
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b8      	blx	r7
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d1bf      	bne.n	8006e3c <_printf_float+0x2cc>
 8006ebc:	e6a4      	b.n	8006c08 <_printf_float+0x98>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4631      	mov	r1, r6
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	9204      	str	r2, [sp, #16]
 8006ec6:	47b8      	blx	r7
 8006ec8:	3001      	adds	r0, #1
 8006eca:	f43f ae9d 	beq.w	8006c08 <_printf_float+0x98>
 8006ece:	9b05      	ldr	r3, [sp, #20]
 8006ed0:	9a04      	ldr	r2, [sp, #16]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	9305      	str	r3, [sp, #20]
 8006ed6:	e7b7      	b.n	8006e48 <_printf_float+0x2d8>
 8006ed8:	4653      	mov	r3, sl
 8006eda:	465a      	mov	r2, fp
 8006edc:	4631      	mov	r1, r6
 8006ede:	4628      	mov	r0, r5
 8006ee0:	47b8      	blx	r7
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	d1be      	bne.n	8006e64 <_printf_float+0x2f4>
 8006ee6:	e68f      	b.n	8006c08 <_printf_float+0x98>
 8006ee8:	9a04      	ldr	r2, [sp, #16]
 8006eea:	464b      	mov	r3, r9
 8006eec:	4442      	add	r2, r8
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d1c1      	bne.n	8006e7c <_printf_float+0x30c>
 8006ef8:	e686      	b.n	8006c08 <_printf_float+0x98>
 8006efa:	9a08      	ldr	r2, [sp, #32]
 8006efc:	2a01      	cmp	r2, #1
 8006efe:	dc01      	bgt.n	8006f04 <_printf_float+0x394>
 8006f00:	07db      	lsls	r3, r3, #31
 8006f02:	d537      	bpl.n	8006f74 <_printf_float+0x404>
 8006f04:	2301      	movs	r3, #1
 8006f06:	4642      	mov	r2, r8
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b8      	blx	r7
 8006f0e:	3001      	adds	r0, #1
 8006f10:	f43f ae7a 	beq.w	8006c08 <_printf_float+0x98>
 8006f14:	4653      	mov	r3, sl
 8006f16:	465a      	mov	r2, fp
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	f43f ae72 	beq.w	8006c08 <_printf_float+0x98>
 8006f24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006f28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f30:	9b08      	ldr	r3, [sp, #32]
 8006f32:	d01a      	beq.n	8006f6a <_printf_float+0x3fa>
 8006f34:	3b01      	subs	r3, #1
 8006f36:	f108 0201 	add.w	r2, r8, #1
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	d10e      	bne.n	8006f62 <_printf_float+0x3f2>
 8006f44:	e660      	b.n	8006c08 <_printf_float+0x98>
 8006f46:	2301      	movs	r3, #1
 8006f48:	464a      	mov	r2, r9
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b8      	blx	r7
 8006f50:	3001      	adds	r0, #1
 8006f52:	f43f ae59 	beq.w	8006c08 <_printf_float+0x98>
 8006f56:	f108 0801 	add.w	r8, r8, #1
 8006f5a:	9b08      	ldr	r3, [sp, #32]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	4543      	cmp	r3, r8
 8006f60:	dcf1      	bgt.n	8006f46 <_printf_float+0x3d6>
 8006f62:	9b04      	ldr	r3, [sp, #16]
 8006f64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f68:	e6dd      	b.n	8006d26 <_printf_float+0x1b6>
 8006f6a:	f04f 0800 	mov.w	r8, #0
 8006f6e:	f104 091a 	add.w	r9, r4, #26
 8006f72:	e7f2      	b.n	8006f5a <_printf_float+0x3ea>
 8006f74:	2301      	movs	r3, #1
 8006f76:	4642      	mov	r2, r8
 8006f78:	e7df      	b.n	8006f3a <_printf_float+0x3ca>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	464a      	mov	r2, r9
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4628      	mov	r0, r5
 8006f82:	47b8      	blx	r7
 8006f84:	3001      	adds	r0, #1
 8006f86:	f43f ae3f 	beq.w	8006c08 <_printf_float+0x98>
 8006f8a:	f108 0801 	add.w	r8, r8, #1
 8006f8e:	68e3      	ldr	r3, [r4, #12]
 8006f90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f92:	1a5b      	subs	r3, r3, r1
 8006f94:	4543      	cmp	r3, r8
 8006f96:	dcf0      	bgt.n	8006f7a <_printf_float+0x40a>
 8006f98:	e6f9      	b.n	8006d8e <_printf_float+0x21e>
 8006f9a:	f04f 0800 	mov.w	r8, #0
 8006f9e:	f104 0919 	add.w	r9, r4, #25
 8006fa2:	e7f4      	b.n	8006f8e <_printf_float+0x41e>

08006fa4 <_printf_common>:
 8006fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	4616      	mov	r6, r2
 8006faa:	4699      	mov	r9, r3
 8006fac:	688a      	ldr	r2, [r1, #8]
 8006fae:	690b      	ldr	r3, [r1, #16]
 8006fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	bfb8      	it	lt
 8006fb8:	4613      	movlt	r3, r2
 8006fba:	6033      	str	r3, [r6, #0]
 8006fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fc0:	4607      	mov	r7, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	b10a      	cbz	r2, 8006fca <_printf_common+0x26>
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	6033      	str	r3, [r6, #0]
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	0699      	lsls	r1, r3, #26
 8006fce:	bf42      	ittt	mi
 8006fd0:	6833      	ldrmi	r3, [r6, #0]
 8006fd2:	3302      	addmi	r3, #2
 8006fd4:	6033      	strmi	r3, [r6, #0]
 8006fd6:	6825      	ldr	r5, [r4, #0]
 8006fd8:	f015 0506 	ands.w	r5, r5, #6
 8006fdc:	d106      	bne.n	8006fec <_printf_common+0x48>
 8006fde:	f104 0a19 	add.w	sl, r4, #25
 8006fe2:	68e3      	ldr	r3, [r4, #12]
 8006fe4:	6832      	ldr	r2, [r6, #0]
 8006fe6:	1a9b      	subs	r3, r3, r2
 8006fe8:	42ab      	cmp	r3, r5
 8006fea:	dc26      	bgt.n	800703a <_printf_common+0x96>
 8006fec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ff0:	1e13      	subs	r3, r2, #0
 8006ff2:	6822      	ldr	r2, [r4, #0]
 8006ff4:	bf18      	it	ne
 8006ff6:	2301      	movne	r3, #1
 8006ff8:	0692      	lsls	r2, r2, #26
 8006ffa:	d42b      	bmi.n	8007054 <_printf_common+0xb0>
 8006ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007000:	4649      	mov	r1, r9
 8007002:	4638      	mov	r0, r7
 8007004:	47c0      	blx	r8
 8007006:	3001      	adds	r0, #1
 8007008:	d01e      	beq.n	8007048 <_printf_common+0xa4>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	6922      	ldr	r2, [r4, #16]
 800700e:	f003 0306 	and.w	r3, r3, #6
 8007012:	2b04      	cmp	r3, #4
 8007014:	bf02      	ittt	eq
 8007016:	68e5      	ldreq	r5, [r4, #12]
 8007018:	6833      	ldreq	r3, [r6, #0]
 800701a:	1aed      	subeq	r5, r5, r3
 800701c:	68a3      	ldr	r3, [r4, #8]
 800701e:	bf0c      	ite	eq
 8007020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007024:	2500      	movne	r5, #0
 8007026:	4293      	cmp	r3, r2
 8007028:	bfc4      	itt	gt
 800702a:	1a9b      	subgt	r3, r3, r2
 800702c:	18ed      	addgt	r5, r5, r3
 800702e:	2600      	movs	r6, #0
 8007030:	341a      	adds	r4, #26
 8007032:	42b5      	cmp	r5, r6
 8007034:	d11a      	bne.n	800706c <_printf_common+0xc8>
 8007036:	2000      	movs	r0, #0
 8007038:	e008      	b.n	800704c <_printf_common+0xa8>
 800703a:	2301      	movs	r3, #1
 800703c:	4652      	mov	r2, sl
 800703e:	4649      	mov	r1, r9
 8007040:	4638      	mov	r0, r7
 8007042:	47c0      	blx	r8
 8007044:	3001      	adds	r0, #1
 8007046:	d103      	bne.n	8007050 <_printf_common+0xac>
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007050:	3501      	adds	r5, #1
 8007052:	e7c6      	b.n	8006fe2 <_printf_common+0x3e>
 8007054:	18e1      	adds	r1, r4, r3
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	2030      	movs	r0, #48	; 0x30
 800705a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800705e:	4422      	add	r2, r4
 8007060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007068:	3302      	adds	r3, #2
 800706a:	e7c7      	b.n	8006ffc <_printf_common+0x58>
 800706c:	2301      	movs	r3, #1
 800706e:	4622      	mov	r2, r4
 8007070:	4649      	mov	r1, r9
 8007072:	4638      	mov	r0, r7
 8007074:	47c0      	blx	r8
 8007076:	3001      	adds	r0, #1
 8007078:	d0e6      	beq.n	8007048 <_printf_common+0xa4>
 800707a:	3601      	adds	r6, #1
 800707c:	e7d9      	b.n	8007032 <_printf_common+0x8e>
	...

08007080 <_printf_i>:
 8007080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007084:	7e0f      	ldrb	r7, [r1, #24]
 8007086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007088:	2f78      	cmp	r7, #120	; 0x78
 800708a:	4691      	mov	r9, r2
 800708c:	4680      	mov	r8, r0
 800708e:	460c      	mov	r4, r1
 8007090:	469a      	mov	sl, r3
 8007092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007096:	d807      	bhi.n	80070a8 <_printf_i+0x28>
 8007098:	2f62      	cmp	r7, #98	; 0x62
 800709a:	d80a      	bhi.n	80070b2 <_printf_i+0x32>
 800709c:	2f00      	cmp	r7, #0
 800709e:	f000 80d4 	beq.w	800724a <_printf_i+0x1ca>
 80070a2:	2f58      	cmp	r7, #88	; 0x58
 80070a4:	f000 80c0 	beq.w	8007228 <_printf_i+0x1a8>
 80070a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070b0:	e03a      	b.n	8007128 <_printf_i+0xa8>
 80070b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070b6:	2b15      	cmp	r3, #21
 80070b8:	d8f6      	bhi.n	80070a8 <_printf_i+0x28>
 80070ba:	a101      	add	r1, pc, #4	; (adr r1, 80070c0 <_printf_i+0x40>)
 80070bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070c0:	08007119 	.word	0x08007119
 80070c4:	0800712d 	.word	0x0800712d
 80070c8:	080070a9 	.word	0x080070a9
 80070cc:	080070a9 	.word	0x080070a9
 80070d0:	080070a9 	.word	0x080070a9
 80070d4:	080070a9 	.word	0x080070a9
 80070d8:	0800712d 	.word	0x0800712d
 80070dc:	080070a9 	.word	0x080070a9
 80070e0:	080070a9 	.word	0x080070a9
 80070e4:	080070a9 	.word	0x080070a9
 80070e8:	080070a9 	.word	0x080070a9
 80070ec:	08007231 	.word	0x08007231
 80070f0:	08007159 	.word	0x08007159
 80070f4:	080071eb 	.word	0x080071eb
 80070f8:	080070a9 	.word	0x080070a9
 80070fc:	080070a9 	.word	0x080070a9
 8007100:	08007253 	.word	0x08007253
 8007104:	080070a9 	.word	0x080070a9
 8007108:	08007159 	.word	0x08007159
 800710c:	080070a9 	.word	0x080070a9
 8007110:	080070a9 	.word	0x080070a9
 8007114:	080071f3 	.word	0x080071f3
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	1d1a      	adds	r2, r3, #4
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	602a      	str	r2, [r5, #0]
 8007120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007128:	2301      	movs	r3, #1
 800712a:	e09f      	b.n	800726c <_printf_i+0x1ec>
 800712c:	6820      	ldr	r0, [r4, #0]
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	0607      	lsls	r7, r0, #24
 8007132:	f103 0104 	add.w	r1, r3, #4
 8007136:	6029      	str	r1, [r5, #0]
 8007138:	d501      	bpl.n	800713e <_printf_i+0xbe>
 800713a:	681e      	ldr	r6, [r3, #0]
 800713c:	e003      	b.n	8007146 <_printf_i+0xc6>
 800713e:	0646      	lsls	r6, r0, #25
 8007140:	d5fb      	bpl.n	800713a <_printf_i+0xba>
 8007142:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007146:	2e00      	cmp	r6, #0
 8007148:	da03      	bge.n	8007152 <_printf_i+0xd2>
 800714a:	232d      	movs	r3, #45	; 0x2d
 800714c:	4276      	negs	r6, r6
 800714e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007152:	485a      	ldr	r0, [pc, #360]	; (80072bc <_printf_i+0x23c>)
 8007154:	230a      	movs	r3, #10
 8007156:	e012      	b.n	800717e <_printf_i+0xfe>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	6820      	ldr	r0, [r4, #0]
 800715c:	1d19      	adds	r1, r3, #4
 800715e:	6029      	str	r1, [r5, #0]
 8007160:	0605      	lsls	r5, r0, #24
 8007162:	d501      	bpl.n	8007168 <_printf_i+0xe8>
 8007164:	681e      	ldr	r6, [r3, #0]
 8007166:	e002      	b.n	800716e <_printf_i+0xee>
 8007168:	0641      	lsls	r1, r0, #25
 800716a:	d5fb      	bpl.n	8007164 <_printf_i+0xe4>
 800716c:	881e      	ldrh	r6, [r3, #0]
 800716e:	4853      	ldr	r0, [pc, #332]	; (80072bc <_printf_i+0x23c>)
 8007170:	2f6f      	cmp	r7, #111	; 0x6f
 8007172:	bf0c      	ite	eq
 8007174:	2308      	moveq	r3, #8
 8007176:	230a      	movne	r3, #10
 8007178:	2100      	movs	r1, #0
 800717a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800717e:	6865      	ldr	r5, [r4, #4]
 8007180:	60a5      	str	r5, [r4, #8]
 8007182:	2d00      	cmp	r5, #0
 8007184:	bfa2      	ittt	ge
 8007186:	6821      	ldrge	r1, [r4, #0]
 8007188:	f021 0104 	bicge.w	r1, r1, #4
 800718c:	6021      	strge	r1, [r4, #0]
 800718e:	b90e      	cbnz	r6, 8007194 <_printf_i+0x114>
 8007190:	2d00      	cmp	r5, #0
 8007192:	d04b      	beq.n	800722c <_printf_i+0x1ac>
 8007194:	4615      	mov	r5, r2
 8007196:	fbb6 f1f3 	udiv	r1, r6, r3
 800719a:	fb03 6711 	mls	r7, r3, r1, r6
 800719e:	5dc7      	ldrb	r7, [r0, r7]
 80071a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071a4:	4637      	mov	r7, r6
 80071a6:	42bb      	cmp	r3, r7
 80071a8:	460e      	mov	r6, r1
 80071aa:	d9f4      	bls.n	8007196 <_printf_i+0x116>
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d10b      	bne.n	80071c8 <_printf_i+0x148>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	07de      	lsls	r6, r3, #31
 80071b4:	d508      	bpl.n	80071c8 <_printf_i+0x148>
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	6861      	ldr	r1, [r4, #4]
 80071ba:	4299      	cmp	r1, r3
 80071bc:	bfde      	ittt	le
 80071be:	2330      	movle	r3, #48	; 0x30
 80071c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071c8:	1b52      	subs	r2, r2, r5
 80071ca:	6122      	str	r2, [r4, #16]
 80071cc:	f8cd a000 	str.w	sl, [sp]
 80071d0:	464b      	mov	r3, r9
 80071d2:	aa03      	add	r2, sp, #12
 80071d4:	4621      	mov	r1, r4
 80071d6:	4640      	mov	r0, r8
 80071d8:	f7ff fee4 	bl	8006fa4 <_printf_common>
 80071dc:	3001      	adds	r0, #1
 80071de:	d14a      	bne.n	8007276 <_printf_i+0x1f6>
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	b004      	add	sp, #16
 80071e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	f043 0320 	orr.w	r3, r3, #32
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	4833      	ldr	r0, [pc, #204]	; (80072c0 <_printf_i+0x240>)
 80071f4:	2778      	movs	r7, #120	; 0x78
 80071f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	6829      	ldr	r1, [r5, #0]
 80071fe:	061f      	lsls	r7, r3, #24
 8007200:	f851 6b04 	ldr.w	r6, [r1], #4
 8007204:	d402      	bmi.n	800720c <_printf_i+0x18c>
 8007206:	065f      	lsls	r7, r3, #25
 8007208:	bf48      	it	mi
 800720a:	b2b6      	uxthmi	r6, r6
 800720c:	07df      	lsls	r7, r3, #31
 800720e:	bf48      	it	mi
 8007210:	f043 0320 	orrmi.w	r3, r3, #32
 8007214:	6029      	str	r1, [r5, #0]
 8007216:	bf48      	it	mi
 8007218:	6023      	strmi	r3, [r4, #0]
 800721a:	b91e      	cbnz	r6, 8007224 <_printf_i+0x1a4>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	f023 0320 	bic.w	r3, r3, #32
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	2310      	movs	r3, #16
 8007226:	e7a7      	b.n	8007178 <_printf_i+0xf8>
 8007228:	4824      	ldr	r0, [pc, #144]	; (80072bc <_printf_i+0x23c>)
 800722a:	e7e4      	b.n	80071f6 <_printf_i+0x176>
 800722c:	4615      	mov	r5, r2
 800722e:	e7bd      	b.n	80071ac <_printf_i+0x12c>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	6826      	ldr	r6, [r4, #0]
 8007234:	6961      	ldr	r1, [r4, #20]
 8007236:	1d18      	adds	r0, r3, #4
 8007238:	6028      	str	r0, [r5, #0]
 800723a:	0635      	lsls	r5, r6, #24
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	d501      	bpl.n	8007244 <_printf_i+0x1c4>
 8007240:	6019      	str	r1, [r3, #0]
 8007242:	e002      	b.n	800724a <_printf_i+0x1ca>
 8007244:	0670      	lsls	r0, r6, #25
 8007246:	d5fb      	bpl.n	8007240 <_printf_i+0x1c0>
 8007248:	8019      	strh	r1, [r3, #0]
 800724a:	2300      	movs	r3, #0
 800724c:	6123      	str	r3, [r4, #16]
 800724e:	4615      	mov	r5, r2
 8007250:	e7bc      	b.n	80071cc <_printf_i+0x14c>
 8007252:	682b      	ldr	r3, [r5, #0]
 8007254:	1d1a      	adds	r2, r3, #4
 8007256:	602a      	str	r2, [r5, #0]
 8007258:	681d      	ldr	r5, [r3, #0]
 800725a:	6862      	ldr	r2, [r4, #4]
 800725c:	2100      	movs	r1, #0
 800725e:	4628      	mov	r0, r5
 8007260:	f7f8 ffee 	bl	8000240 <memchr>
 8007264:	b108      	cbz	r0, 800726a <_printf_i+0x1ea>
 8007266:	1b40      	subs	r0, r0, r5
 8007268:	6060      	str	r0, [r4, #4]
 800726a:	6863      	ldr	r3, [r4, #4]
 800726c:	6123      	str	r3, [r4, #16]
 800726e:	2300      	movs	r3, #0
 8007270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007274:	e7aa      	b.n	80071cc <_printf_i+0x14c>
 8007276:	6923      	ldr	r3, [r4, #16]
 8007278:	462a      	mov	r2, r5
 800727a:	4649      	mov	r1, r9
 800727c:	4640      	mov	r0, r8
 800727e:	47d0      	blx	sl
 8007280:	3001      	adds	r0, #1
 8007282:	d0ad      	beq.n	80071e0 <_printf_i+0x160>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	079b      	lsls	r3, r3, #30
 8007288:	d413      	bmi.n	80072b2 <_printf_i+0x232>
 800728a:	68e0      	ldr	r0, [r4, #12]
 800728c:	9b03      	ldr	r3, [sp, #12]
 800728e:	4298      	cmp	r0, r3
 8007290:	bfb8      	it	lt
 8007292:	4618      	movlt	r0, r3
 8007294:	e7a6      	b.n	80071e4 <_printf_i+0x164>
 8007296:	2301      	movs	r3, #1
 8007298:	4632      	mov	r2, r6
 800729a:	4649      	mov	r1, r9
 800729c:	4640      	mov	r0, r8
 800729e:	47d0      	blx	sl
 80072a0:	3001      	adds	r0, #1
 80072a2:	d09d      	beq.n	80071e0 <_printf_i+0x160>
 80072a4:	3501      	adds	r5, #1
 80072a6:	68e3      	ldr	r3, [r4, #12]
 80072a8:	9903      	ldr	r1, [sp, #12]
 80072aa:	1a5b      	subs	r3, r3, r1
 80072ac:	42ab      	cmp	r3, r5
 80072ae:	dcf2      	bgt.n	8007296 <_printf_i+0x216>
 80072b0:	e7eb      	b.n	800728a <_printf_i+0x20a>
 80072b2:	2500      	movs	r5, #0
 80072b4:	f104 0619 	add.w	r6, r4, #25
 80072b8:	e7f5      	b.n	80072a6 <_printf_i+0x226>
 80072ba:	bf00      	nop
 80072bc:	0802fa4c 	.word	0x0802fa4c
 80072c0:	0802fa5d 	.word	0x0802fa5d

080072c4 <std>:
 80072c4:	2300      	movs	r3, #0
 80072c6:	b510      	push	{r4, lr}
 80072c8:	4604      	mov	r4, r0
 80072ca:	e9c0 3300 	strd	r3, r3, [r0]
 80072ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072d2:	6083      	str	r3, [r0, #8]
 80072d4:	8181      	strh	r1, [r0, #12]
 80072d6:	6643      	str	r3, [r0, #100]	; 0x64
 80072d8:	81c2      	strh	r2, [r0, #14]
 80072da:	6183      	str	r3, [r0, #24]
 80072dc:	4619      	mov	r1, r3
 80072de:	2208      	movs	r2, #8
 80072e0:	305c      	adds	r0, #92	; 0x5c
 80072e2:	f000 f930 	bl	8007546 <memset>
 80072e6:	4b05      	ldr	r3, [pc, #20]	; (80072fc <std+0x38>)
 80072e8:	6263      	str	r3, [r4, #36]	; 0x24
 80072ea:	4b05      	ldr	r3, [pc, #20]	; (8007300 <std+0x3c>)
 80072ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <std+0x40>)
 80072f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072f2:	4b05      	ldr	r3, [pc, #20]	; (8007308 <std+0x44>)
 80072f4:	6224      	str	r4, [r4, #32]
 80072f6:	6323      	str	r3, [r4, #48]	; 0x30
 80072f8:	bd10      	pop	{r4, pc}
 80072fa:	bf00      	nop
 80072fc:	080074bd 	.word	0x080074bd
 8007300:	080074e3 	.word	0x080074e3
 8007304:	0800751b 	.word	0x0800751b
 8007308:	0800753f 	.word	0x0800753f

0800730c <stdio_exit_handler>:
 800730c:	4a02      	ldr	r2, [pc, #8]	; (8007318 <stdio_exit_handler+0xc>)
 800730e:	4903      	ldr	r1, [pc, #12]	; (800731c <stdio_exit_handler+0x10>)
 8007310:	4803      	ldr	r0, [pc, #12]	; (8007320 <stdio_exit_handler+0x14>)
 8007312:	f000 b869 	b.w	80073e8 <_fwalk_sglue>
 8007316:	bf00      	nop
 8007318:	20000010 	.word	0x20000010
 800731c:	08009525 	.word	0x08009525
 8007320:	2000001c 	.word	0x2000001c

08007324 <cleanup_stdio>:
 8007324:	6841      	ldr	r1, [r0, #4]
 8007326:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <cleanup_stdio+0x34>)
 8007328:	4299      	cmp	r1, r3
 800732a:	b510      	push	{r4, lr}
 800732c:	4604      	mov	r4, r0
 800732e:	d001      	beq.n	8007334 <cleanup_stdio+0x10>
 8007330:	f002 f8f8 	bl	8009524 <_fflush_r>
 8007334:	68a1      	ldr	r1, [r4, #8]
 8007336:	4b09      	ldr	r3, [pc, #36]	; (800735c <cleanup_stdio+0x38>)
 8007338:	4299      	cmp	r1, r3
 800733a:	d002      	beq.n	8007342 <cleanup_stdio+0x1e>
 800733c:	4620      	mov	r0, r4
 800733e:	f002 f8f1 	bl	8009524 <_fflush_r>
 8007342:	68e1      	ldr	r1, [r4, #12]
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <cleanup_stdio+0x3c>)
 8007346:	4299      	cmp	r1, r3
 8007348:	d004      	beq.n	8007354 <cleanup_stdio+0x30>
 800734a:	4620      	mov	r0, r4
 800734c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007350:	f002 b8e8 	b.w	8009524 <_fflush_r>
 8007354:	bd10      	pop	{r4, pc}
 8007356:	bf00      	nop
 8007358:	200004d8 	.word	0x200004d8
 800735c:	20000540 	.word	0x20000540
 8007360:	200005a8 	.word	0x200005a8

08007364 <global_stdio_init.part.0>:
 8007364:	b510      	push	{r4, lr}
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <global_stdio_init.part.0+0x30>)
 8007368:	4c0b      	ldr	r4, [pc, #44]	; (8007398 <global_stdio_init.part.0+0x34>)
 800736a:	4a0c      	ldr	r2, [pc, #48]	; (800739c <global_stdio_init.part.0+0x38>)
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	4620      	mov	r0, r4
 8007370:	2200      	movs	r2, #0
 8007372:	2104      	movs	r1, #4
 8007374:	f7ff ffa6 	bl	80072c4 <std>
 8007378:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800737c:	2201      	movs	r2, #1
 800737e:	2109      	movs	r1, #9
 8007380:	f7ff ffa0 	bl	80072c4 <std>
 8007384:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007388:	2202      	movs	r2, #2
 800738a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800738e:	2112      	movs	r1, #18
 8007390:	f7ff bf98 	b.w	80072c4 <std>
 8007394:	20000610 	.word	0x20000610
 8007398:	200004d8 	.word	0x200004d8
 800739c:	0800730d 	.word	0x0800730d

080073a0 <__sfp_lock_acquire>:
 80073a0:	4801      	ldr	r0, [pc, #4]	; (80073a8 <__sfp_lock_acquire+0x8>)
 80073a2:	f000 b94d 	b.w	8007640 <__retarget_lock_acquire_recursive>
 80073a6:	bf00      	nop
 80073a8:	20000619 	.word	0x20000619

080073ac <__sfp_lock_release>:
 80073ac:	4801      	ldr	r0, [pc, #4]	; (80073b4 <__sfp_lock_release+0x8>)
 80073ae:	f000 b948 	b.w	8007642 <__retarget_lock_release_recursive>
 80073b2:	bf00      	nop
 80073b4:	20000619 	.word	0x20000619

080073b8 <__sinit>:
 80073b8:	b510      	push	{r4, lr}
 80073ba:	4604      	mov	r4, r0
 80073bc:	f7ff fff0 	bl	80073a0 <__sfp_lock_acquire>
 80073c0:	6a23      	ldr	r3, [r4, #32]
 80073c2:	b11b      	cbz	r3, 80073cc <__sinit+0x14>
 80073c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c8:	f7ff bff0 	b.w	80073ac <__sfp_lock_release>
 80073cc:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <__sinit+0x28>)
 80073ce:	6223      	str	r3, [r4, #32]
 80073d0:	4b04      	ldr	r3, [pc, #16]	; (80073e4 <__sinit+0x2c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1f5      	bne.n	80073c4 <__sinit+0xc>
 80073d8:	f7ff ffc4 	bl	8007364 <global_stdio_init.part.0>
 80073dc:	e7f2      	b.n	80073c4 <__sinit+0xc>
 80073de:	bf00      	nop
 80073e0:	08007325 	.word	0x08007325
 80073e4:	20000610 	.word	0x20000610

080073e8 <_fwalk_sglue>:
 80073e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ec:	4607      	mov	r7, r0
 80073ee:	4688      	mov	r8, r1
 80073f0:	4614      	mov	r4, r2
 80073f2:	2600      	movs	r6, #0
 80073f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073f8:	f1b9 0901 	subs.w	r9, r9, #1
 80073fc:	d505      	bpl.n	800740a <_fwalk_sglue+0x22>
 80073fe:	6824      	ldr	r4, [r4, #0]
 8007400:	2c00      	cmp	r4, #0
 8007402:	d1f7      	bne.n	80073f4 <_fwalk_sglue+0xc>
 8007404:	4630      	mov	r0, r6
 8007406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740a:	89ab      	ldrh	r3, [r5, #12]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d907      	bls.n	8007420 <_fwalk_sglue+0x38>
 8007410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007414:	3301      	adds	r3, #1
 8007416:	d003      	beq.n	8007420 <_fwalk_sglue+0x38>
 8007418:	4629      	mov	r1, r5
 800741a:	4638      	mov	r0, r7
 800741c:	47c0      	blx	r8
 800741e:	4306      	orrs	r6, r0
 8007420:	3568      	adds	r5, #104	; 0x68
 8007422:	e7e9      	b.n	80073f8 <_fwalk_sglue+0x10>

08007424 <siprintf>:
 8007424:	b40e      	push	{r1, r2, r3}
 8007426:	b500      	push	{lr}
 8007428:	b09c      	sub	sp, #112	; 0x70
 800742a:	ab1d      	add	r3, sp, #116	; 0x74
 800742c:	9002      	str	r0, [sp, #8]
 800742e:	9006      	str	r0, [sp, #24]
 8007430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007434:	4809      	ldr	r0, [pc, #36]	; (800745c <siprintf+0x38>)
 8007436:	9107      	str	r1, [sp, #28]
 8007438:	9104      	str	r1, [sp, #16]
 800743a:	4909      	ldr	r1, [pc, #36]	; (8007460 <siprintf+0x3c>)
 800743c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007440:	9105      	str	r1, [sp, #20]
 8007442:	6800      	ldr	r0, [r0, #0]
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	a902      	add	r1, sp, #8
 8007448:	f001 fbc8 	bl	8008bdc <_svfiprintf_r>
 800744c:	9b02      	ldr	r3, [sp, #8]
 800744e:	2200      	movs	r2, #0
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	b01c      	add	sp, #112	; 0x70
 8007454:	f85d eb04 	ldr.w	lr, [sp], #4
 8007458:	b003      	add	sp, #12
 800745a:	4770      	bx	lr
 800745c:	20000068 	.word	0x20000068
 8007460:	ffff0208 	.word	0xffff0208

08007464 <siscanf>:
 8007464:	b40e      	push	{r1, r2, r3}
 8007466:	b510      	push	{r4, lr}
 8007468:	b09f      	sub	sp, #124	; 0x7c
 800746a:	ac21      	add	r4, sp, #132	; 0x84
 800746c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007470:	f854 2b04 	ldr.w	r2, [r4], #4
 8007474:	9201      	str	r2, [sp, #4]
 8007476:	f8ad 101c 	strh.w	r1, [sp, #28]
 800747a:	9004      	str	r0, [sp, #16]
 800747c:	9008      	str	r0, [sp, #32]
 800747e:	f7f8 ff2f 	bl	80002e0 <strlen>
 8007482:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <siscanf+0x50>)
 8007484:	9005      	str	r0, [sp, #20]
 8007486:	9009      	str	r0, [sp, #36]	; 0x24
 8007488:	930d      	str	r3, [sp, #52]	; 0x34
 800748a:	480b      	ldr	r0, [pc, #44]	; (80074b8 <siscanf+0x54>)
 800748c:	9a01      	ldr	r2, [sp, #4]
 800748e:	6800      	ldr	r0, [r0, #0]
 8007490:	9403      	str	r4, [sp, #12]
 8007492:	2300      	movs	r3, #0
 8007494:	9311      	str	r3, [sp, #68]	; 0x44
 8007496:	9316      	str	r3, [sp, #88]	; 0x58
 8007498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800749c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80074a0:	a904      	add	r1, sp, #16
 80074a2:	4623      	mov	r3, r4
 80074a4:	f001 fcf2 	bl	8008e8c <__ssvfiscanf_r>
 80074a8:	b01f      	add	sp, #124	; 0x7c
 80074aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ae:	b003      	add	sp, #12
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	080074df 	.word	0x080074df
 80074b8:	20000068 	.word	0x20000068

080074bc <__sread>:
 80074bc:	b510      	push	{r4, lr}
 80074be:	460c      	mov	r4, r1
 80074c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c4:	f000 f86e 	bl	80075a4 <_read_r>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	bfab      	itete	ge
 80074cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074ce:	89a3      	ldrhlt	r3, [r4, #12]
 80074d0:	181b      	addge	r3, r3, r0
 80074d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074d6:	bfac      	ite	ge
 80074d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80074da:	81a3      	strhlt	r3, [r4, #12]
 80074dc:	bd10      	pop	{r4, pc}

080074de <__seofread>:
 80074de:	2000      	movs	r0, #0
 80074e0:	4770      	bx	lr

080074e2 <__swrite>:
 80074e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e6:	461f      	mov	r7, r3
 80074e8:	898b      	ldrh	r3, [r1, #12]
 80074ea:	05db      	lsls	r3, r3, #23
 80074ec:	4605      	mov	r5, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	4616      	mov	r6, r2
 80074f2:	d505      	bpl.n	8007500 <__swrite+0x1e>
 80074f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f8:	2302      	movs	r3, #2
 80074fa:	2200      	movs	r2, #0
 80074fc:	f000 f840 	bl	8007580 <_lseek_r>
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800750a:	81a3      	strh	r3, [r4, #12]
 800750c:	4632      	mov	r2, r6
 800750e:	463b      	mov	r3, r7
 8007510:	4628      	mov	r0, r5
 8007512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007516:	f000 b857 	b.w	80075c8 <_write_r>

0800751a <__sseek>:
 800751a:	b510      	push	{r4, lr}
 800751c:	460c      	mov	r4, r1
 800751e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007522:	f000 f82d 	bl	8007580 <_lseek_r>
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	bf15      	itete	ne
 800752c:	6560      	strne	r0, [r4, #84]	; 0x54
 800752e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007536:	81a3      	strheq	r3, [r4, #12]
 8007538:	bf18      	it	ne
 800753a:	81a3      	strhne	r3, [r4, #12]
 800753c:	bd10      	pop	{r4, pc}

0800753e <__sclose>:
 800753e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007542:	f000 b80d 	b.w	8007560 <_close_r>

08007546 <memset>:
 8007546:	4402      	add	r2, r0
 8007548:	4603      	mov	r3, r0
 800754a:	4293      	cmp	r3, r2
 800754c:	d100      	bne.n	8007550 <memset+0xa>
 800754e:	4770      	bx	lr
 8007550:	f803 1b01 	strb.w	r1, [r3], #1
 8007554:	e7f9      	b.n	800754a <memset+0x4>
	...

08007558 <_localeconv_r>:
 8007558:	4800      	ldr	r0, [pc, #0]	; (800755c <_localeconv_r+0x4>)
 800755a:	4770      	bx	lr
 800755c:	2000015c 	.word	0x2000015c

08007560 <_close_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d06      	ldr	r5, [pc, #24]	; (800757c <_close_r+0x1c>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	f7fa f879 	bl	8001662 <_close>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_close_r+0x1a>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_close_r+0x1a>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	20000614 	.word	0x20000614

08007580 <_lseek_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4d07      	ldr	r5, [pc, #28]	; (80075a0 <_lseek_r+0x20>)
 8007584:	4604      	mov	r4, r0
 8007586:	4608      	mov	r0, r1
 8007588:	4611      	mov	r1, r2
 800758a:	2200      	movs	r2, #0
 800758c:	602a      	str	r2, [r5, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	f7fa f88e 	bl	80016b0 <_lseek>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d102      	bne.n	800759e <_lseek_r+0x1e>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	b103      	cbz	r3, 800759e <_lseek_r+0x1e>
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	20000614 	.word	0x20000614

080075a4 <_read_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4d07      	ldr	r5, [pc, #28]	; (80075c4 <_read_r+0x20>)
 80075a8:	4604      	mov	r4, r0
 80075aa:	4608      	mov	r0, r1
 80075ac:	4611      	mov	r1, r2
 80075ae:	2200      	movs	r2, #0
 80075b0:	602a      	str	r2, [r5, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	f7fa f81c 	bl	80015f0 <_read>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_read_r+0x1e>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_read_r+0x1e>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	20000614 	.word	0x20000614

080075c8 <_write_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d07      	ldr	r5, [pc, #28]	; (80075e8 <_write_r+0x20>)
 80075cc:	4604      	mov	r4, r0
 80075ce:	4608      	mov	r0, r1
 80075d0:	4611      	mov	r1, r2
 80075d2:	2200      	movs	r2, #0
 80075d4:	602a      	str	r2, [r5, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f7fa f827 	bl	800162a <_write>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_write_r+0x1e>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_write_r+0x1e>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20000614 	.word	0x20000614

080075ec <__errno>:
 80075ec:	4b01      	ldr	r3, [pc, #4]	; (80075f4 <__errno+0x8>)
 80075ee:	6818      	ldr	r0, [r3, #0]
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000068 	.word	0x20000068

080075f8 <__libc_init_array>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	4d0d      	ldr	r5, [pc, #52]	; (8007630 <__libc_init_array+0x38>)
 80075fc:	4c0d      	ldr	r4, [pc, #52]	; (8007634 <__libc_init_array+0x3c>)
 80075fe:	1b64      	subs	r4, r4, r5
 8007600:	10a4      	asrs	r4, r4, #2
 8007602:	2600      	movs	r6, #0
 8007604:	42a6      	cmp	r6, r4
 8007606:	d109      	bne.n	800761c <__libc_init_array+0x24>
 8007608:	4d0b      	ldr	r5, [pc, #44]	; (8007638 <__libc_init_array+0x40>)
 800760a:	4c0c      	ldr	r4, [pc, #48]	; (800763c <__libc_init_array+0x44>)
 800760c:	f002 fc9c 	bl	8009f48 <_init>
 8007610:	1b64      	subs	r4, r4, r5
 8007612:	10a4      	asrs	r4, r4, #2
 8007614:	2600      	movs	r6, #0
 8007616:	42a6      	cmp	r6, r4
 8007618:	d105      	bne.n	8007626 <__libc_init_array+0x2e>
 800761a:	bd70      	pop	{r4, r5, r6, pc}
 800761c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007620:	4798      	blx	r3
 8007622:	3601      	adds	r6, #1
 8007624:	e7ee      	b.n	8007604 <__libc_init_array+0xc>
 8007626:	f855 3b04 	ldr.w	r3, [r5], #4
 800762a:	4798      	blx	r3
 800762c:	3601      	adds	r6, #1
 800762e:	e7f2      	b.n	8007616 <__libc_init_array+0x1e>
 8007630:	0802fdd0 	.word	0x0802fdd0
 8007634:	0802fdd0 	.word	0x0802fdd0
 8007638:	0802fdd0 	.word	0x0802fdd0
 800763c:	0802fdd4 	.word	0x0802fdd4

08007640 <__retarget_lock_acquire_recursive>:
 8007640:	4770      	bx	lr

08007642 <__retarget_lock_release_recursive>:
 8007642:	4770      	bx	lr

08007644 <quorem>:
 8007644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	6903      	ldr	r3, [r0, #16]
 800764a:	690c      	ldr	r4, [r1, #16]
 800764c:	42a3      	cmp	r3, r4
 800764e:	4607      	mov	r7, r0
 8007650:	db7e      	blt.n	8007750 <quorem+0x10c>
 8007652:	3c01      	subs	r4, #1
 8007654:	f101 0814 	add.w	r8, r1, #20
 8007658:	f100 0514 	add.w	r5, r0, #20
 800765c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800766a:	3301      	adds	r3, #1
 800766c:	429a      	cmp	r2, r3
 800766e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007672:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007676:	fbb2 f6f3 	udiv	r6, r2, r3
 800767a:	d331      	bcc.n	80076e0 <quorem+0x9c>
 800767c:	f04f 0e00 	mov.w	lr, #0
 8007680:	4640      	mov	r0, r8
 8007682:	46ac      	mov	ip, r5
 8007684:	46f2      	mov	sl, lr
 8007686:	f850 2b04 	ldr.w	r2, [r0], #4
 800768a:	b293      	uxth	r3, r2
 800768c:	fb06 e303 	mla	r3, r6, r3, lr
 8007690:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007694:	0c1a      	lsrs	r2, r3, #16
 8007696:	b29b      	uxth	r3, r3
 8007698:	ebaa 0303 	sub.w	r3, sl, r3
 800769c:	f8dc a000 	ldr.w	sl, [ip]
 80076a0:	fa13 f38a 	uxtah	r3, r3, sl
 80076a4:	fb06 220e 	mla	r2, r6, lr, r2
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	9b00      	ldr	r3, [sp, #0]
 80076ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076b0:	b292      	uxth	r2, r2
 80076b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80076be:	4581      	cmp	r9, r0
 80076c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c4:	f84c 3b04 	str.w	r3, [ip], #4
 80076c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076cc:	d2db      	bcs.n	8007686 <quorem+0x42>
 80076ce:	f855 300b 	ldr.w	r3, [r5, fp]
 80076d2:	b92b      	cbnz	r3, 80076e0 <quorem+0x9c>
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	3b04      	subs	r3, #4
 80076d8:	429d      	cmp	r5, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	d32c      	bcc.n	8007738 <quorem+0xf4>
 80076de:	613c      	str	r4, [r7, #16]
 80076e0:	4638      	mov	r0, r7
 80076e2:	f001 f921 	bl	8008928 <__mcmp>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	db22      	blt.n	8007730 <quorem+0xec>
 80076ea:	3601      	adds	r6, #1
 80076ec:	4629      	mov	r1, r5
 80076ee:	2000      	movs	r0, #0
 80076f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80076f4:	f8d1 c000 	ldr.w	ip, [r1]
 80076f8:	b293      	uxth	r3, r2
 80076fa:	1ac3      	subs	r3, r0, r3
 80076fc:	0c12      	lsrs	r2, r2, #16
 80076fe:	fa13 f38c 	uxtah	r3, r3, ip
 8007702:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007706:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800770a:	b29b      	uxth	r3, r3
 800770c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007710:	45c1      	cmp	r9, r8
 8007712:	f841 3b04 	str.w	r3, [r1], #4
 8007716:	ea4f 4022 	mov.w	r0, r2, asr #16
 800771a:	d2e9      	bcs.n	80076f0 <quorem+0xac>
 800771c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007720:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007724:	b922      	cbnz	r2, 8007730 <quorem+0xec>
 8007726:	3b04      	subs	r3, #4
 8007728:	429d      	cmp	r5, r3
 800772a:	461a      	mov	r2, r3
 800772c:	d30a      	bcc.n	8007744 <quorem+0x100>
 800772e:	613c      	str	r4, [r7, #16]
 8007730:	4630      	mov	r0, r6
 8007732:	b003      	add	sp, #12
 8007734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	3b04      	subs	r3, #4
 800773c:	2a00      	cmp	r2, #0
 800773e:	d1ce      	bne.n	80076de <quorem+0x9a>
 8007740:	3c01      	subs	r4, #1
 8007742:	e7c9      	b.n	80076d8 <quorem+0x94>
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	3b04      	subs	r3, #4
 8007748:	2a00      	cmp	r2, #0
 800774a:	d1f0      	bne.n	800772e <quorem+0xea>
 800774c:	3c01      	subs	r4, #1
 800774e:	e7eb      	b.n	8007728 <quorem+0xe4>
 8007750:	2000      	movs	r0, #0
 8007752:	e7ee      	b.n	8007732 <quorem+0xee>
 8007754:	0000      	movs	r0, r0
	...

08007758 <_dtoa_r>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	ed2d 8b02 	vpush	{d8}
 8007760:	69c5      	ldr	r5, [r0, #28]
 8007762:	b091      	sub	sp, #68	; 0x44
 8007764:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007768:	ec59 8b10 	vmov	r8, r9, d0
 800776c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800776e:	9106      	str	r1, [sp, #24]
 8007770:	4606      	mov	r6, r0
 8007772:	9208      	str	r2, [sp, #32]
 8007774:	930c      	str	r3, [sp, #48]	; 0x30
 8007776:	b975      	cbnz	r5, 8007796 <_dtoa_r+0x3e>
 8007778:	2010      	movs	r0, #16
 800777a:	f000 fda5 	bl	80082c8 <malloc>
 800777e:	4602      	mov	r2, r0
 8007780:	61f0      	str	r0, [r6, #28]
 8007782:	b920      	cbnz	r0, 800778e <_dtoa_r+0x36>
 8007784:	4ba6      	ldr	r3, [pc, #664]	; (8007a20 <_dtoa_r+0x2c8>)
 8007786:	21ef      	movs	r1, #239	; 0xef
 8007788:	48a6      	ldr	r0, [pc, #664]	; (8007a24 <_dtoa_r+0x2cc>)
 800778a:	f001 ff9f 	bl	80096cc <__assert_func>
 800778e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007792:	6005      	str	r5, [r0, #0]
 8007794:	60c5      	str	r5, [r0, #12]
 8007796:	69f3      	ldr	r3, [r6, #28]
 8007798:	6819      	ldr	r1, [r3, #0]
 800779a:	b151      	cbz	r1, 80077b2 <_dtoa_r+0x5a>
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	604a      	str	r2, [r1, #4]
 80077a0:	2301      	movs	r3, #1
 80077a2:	4093      	lsls	r3, r2
 80077a4:	608b      	str	r3, [r1, #8]
 80077a6:	4630      	mov	r0, r6
 80077a8:	f000 fe82 	bl	80084b0 <_Bfree>
 80077ac:	69f3      	ldr	r3, [r6, #28]
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	f1b9 0300 	subs.w	r3, r9, #0
 80077b6:	bfbb      	ittet	lt
 80077b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077bc:	9303      	strlt	r3, [sp, #12]
 80077be:	2300      	movge	r3, #0
 80077c0:	2201      	movlt	r2, #1
 80077c2:	bfac      	ite	ge
 80077c4:	6023      	strge	r3, [r4, #0]
 80077c6:	6022      	strlt	r2, [r4, #0]
 80077c8:	4b97      	ldr	r3, [pc, #604]	; (8007a28 <_dtoa_r+0x2d0>)
 80077ca:	9c03      	ldr	r4, [sp, #12]
 80077cc:	43a3      	bics	r3, r4
 80077ce:	d11c      	bne.n	800780a <_dtoa_r+0xb2>
 80077d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80077dc:	ea53 0308 	orrs.w	r3, r3, r8
 80077e0:	f000 84fb 	beq.w	80081da <_dtoa_r+0xa82>
 80077e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077e6:	b963      	cbnz	r3, 8007802 <_dtoa_r+0xaa>
 80077e8:	4b90      	ldr	r3, [pc, #576]	; (8007a2c <_dtoa_r+0x2d4>)
 80077ea:	e020      	b.n	800782e <_dtoa_r+0xd6>
 80077ec:	4b90      	ldr	r3, [pc, #576]	; (8007a30 <_dtoa_r+0x2d8>)
 80077ee:	9301      	str	r3, [sp, #4]
 80077f0:	3308      	adds	r3, #8
 80077f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	9801      	ldr	r0, [sp, #4]
 80077f8:	b011      	add	sp, #68	; 0x44
 80077fa:	ecbd 8b02 	vpop	{d8}
 80077fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007802:	4b8a      	ldr	r3, [pc, #552]	; (8007a2c <_dtoa_r+0x2d4>)
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	3303      	adds	r3, #3
 8007808:	e7f3      	b.n	80077f2 <_dtoa_r+0x9a>
 800780a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800780e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007816:	d10c      	bne.n	8007832 <_dtoa_r+0xda>
 8007818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800781a:	2301      	movs	r3, #1
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 84d7 	beq.w	80081d4 <_dtoa_r+0xa7c>
 8007826:	4b83      	ldr	r3, [pc, #524]	; (8007a34 <_dtoa_r+0x2dc>)
 8007828:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	3b01      	subs	r3, #1
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	e7e1      	b.n	80077f6 <_dtoa_r+0x9e>
 8007832:	aa0e      	add	r2, sp, #56	; 0x38
 8007834:	a90f      	add	r1, sp, #60	; 0x3c
 8007836:	4630      	mov	r0, r6
 8007838:	eeb0 0b48 	vmov.f64	d0, d8
 800783c:	f001 f91a 	bl	8008a74 <__d2b>
 8007840:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007844:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007846:	4605      	mov	r5, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d046      	beq.n	80078da <_dtoa_r+0x182>
 800784c:	eeb0 7b48 	vmov.f64	d7, d8
 8007850:	ee18 1a90 	vmov	r1, s17
 8007854:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007858:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800785c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007860:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007864:	2000      	movs	r0, #0
 8007866:	ee07 1a90 	vmov	s15, r1
 800786a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800786e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007a08 <_dtoa_r+0x2b0>
 8007872:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007876:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007a10 <_dtoa_r+0x2b8>
 800787a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800787e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007a18 <_dtoa_r+0x2c0>
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800788a:	eeb0 7b46 	vmov.f64	d7, d6
 800788e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007892:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007896:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800789a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789e:	ee16 ba90 	vmov	fp, s13
 80078a2:	9009      	str	r0, [sp, #36]	; 0x24
 80078a4:	d508      	bpl.n	80078b8 <_dtoa_r+0x160>
 80078a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80078aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80078ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b2:	bf18      	it	ne
 80078b4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80078b8:	f1bb 0f16 	cmp.w	fp, #22
 80078bc:	d82b      	bhi.n	8007916 <_dtoa_r+0x1be>
 80078be:	495e      	ldr	r1, [pc, #376]	; (8007a38 <_dtoa_r+0x2e0>)
 80078c0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80078c4:	ed91 7b00 	vldr	d7, [r1]
 80078c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80078cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d0:	d501      	bpl.n	80078d6 <_dtoa_r+0x17e>
 80078d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078d6:	2100      	movs	r1, #0
 80078d8:	e01e      	b.n	8007918 <_dtoa_r+0x1c0>
 80078da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078dc:	4413      	add	r3, r2
 80078de:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80078e2:	2920      	cmp	r1, #32
 80078e4:	bfc1      	itttt	gt
 80078e6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80078ea:	408c      	lslgt	r4, r1
 80078ec:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80078f0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80078f4:	bfd6      	itet	le
 80078f6:	f1c1 0120 	rsble	r1, r1, #32
 80078fa:	4321      	orrgt	r1, r4
 80078fc:	fa08 f101 	lslle.w	r1, r8, r1
 8007900:	ee07 1a90 	vmov	s15, r1
 8007904:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007908:	3b01      	subs	r3, #1
 800790a:	ee17 1a90 	vmov	r1, s15
 800790e:	2001      	movs	r0, #1
 8007910:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007914:	e7a7      	b.n	8007866 <_dtoa_r+0x10e>
 8007916:	2101      	movs	r1, #1
 8007918:	1ad2      	subs	r2, r2, r3
 800791a:	1e53      	subs	r3, r2, #1
 800791c:	9305      	str	r3, [sp, #20]
 800791e:	bf45      	ittet	mi
 8007920:	f1c2 0301 	rsbmi	r3, r2, #1
 8007924:	9304      	strmi	r3, [sp, #16]
 8007926:	2300      	movpl	r3, #0
 8007928:	2300      	movmi	r3, #0
 800792a:	bf4c      	ite	mi
 800792c:	9305      	strmi	r3, [sp, #20]
 800792e:	9304      	strpl	r3, [sp, #16]
 8007930:	f1bb 0f00 	cmp.w	fp, #0
 8007934:	910b      	str	r1, [sp, #44]	; 0x2c
 8007936:	db18      	blt.n	800796a <_dtoa_r+0x212>
 8007938:	9b05      	ldr	r3, [sp, #20]
 800793a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800793e:	445b      	add	r3, fp
 8007940:	9305      	str	r3, [sp, #20]
 8007942:	2300      	movs	r3, #0
 8007944:	9a06      	ldr	r2, [sp, #24]
 8007946:	2a09      	cmp	r2, #9
 8007948:	d848      	bhi.n	80079dc <_dtoa_r+0x284>
 800794a:	2a05      	cmp	r2, #5
 800794c:	bfc4      	itt	gt
 800794e:	3a04      	subgt	r2, #4
 8007950:	9206      	strgt	r2, [sp, #24]
 8007952:	9a06      	ldr	r2, [sp, #24]
 8007954:	f1a2 0202 	sub.w	r2, r2, #2
 8007958:	bfcc      	ite	gt
 800795a:	2400      	movgt	r4, #0
 800795c:	2401      	movle	r4, #1
 800795e:	2a03      	cmp	r2, #3
 8007960:	d847      	bhi.n	80079f2 <_dtoa_r+0x29a>
 8007962:	e8df f002 	tbb	[pc, r2]
 8007966:	2d0b      	.short	0x2d0b
 8007968:	392b      	.short	0x392b
 800796a:	9b04      	ldr	r3, [sp, #16]
 800796c:	2200      	movs	r2, #0
 800796e:	eba3 030b 	sub.w	r3, r3, fp
 8007972:	9304      	str	r3, [sp, #16]
 8007974:	920a      	str	r2, [sp, #40]	; 0x28
 8007976:	f1cb 0300 	rsb	r3, fp, #0
 800797a:	e7e3      	b.n	8007944 <_dtoa_r+0x1ec>
 800797c:	2200      	movs	r2, #0
 800797e:	9207      	str	r2, [sp, #28]
 8007980:	9a08      	ldr	r2, [sp, #32]
 8007982:	2a00      	cmp	r2, #0
 8007984:	dc38      	bgt.n	80079f8 <_dtoa_r+0x2a0>
 8007986:	f04f 0a01 	mov.w	sl, #1
 800798a:	46d1      	mov	r9, sl
 800798c:	4652      	mov	r2, sl
 800798e:	f8cd a020 	str.w	sl, [sp, #32]
 8007992:	69f7      	ldr	r7, [r6, #28]
 8007994:	2100      	movs	r1, #0
 8007996:	2004      	movs	r0, #4
 8007998:	f100 0c14 	add.w	ip, r0, #20
 800799c:	4594      	cmp	ip, r2
 800799e:	d930      	bls.n	8007a02 <_dtoa_r+0x2aa>
 80079a0:	6079      	str	r1, [r7, #4]
 80079a2:	4630      	mov	r0, r6
 80079a4:	930d      	str	r3, [sp, #52]	; 0x34
 80079a6:	f000 fd43 	bl	8008430 <_Balloc>
 80079aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079ac:	9001      	str	r0, [sp, #4]
 80079ae:	4602      	mov	r2, r0
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d145      	bne.n	8007a40 <_dtoa_r+0x2e8>
 80079b4:	4b21      	ldr	r3, [pc, #132]	; (8007a3c <_dtoa_r+0x2e4>)
 80079b6:	f240 11af 	movw	r1, #431	; 0x1af
 80079ba:	e6e5      	b.n	8007788 <_dtoa_r+0x30>
 80079bc:	2201      	movs	r2, #1
 80079be:	e7de      	b.n	800797e <_dtoa_r+0x226>
 80079c0:	2200      	movs	r2, #0
 80079c2:	9207      	str	r2, [sp, #28]
 80079c4:	9a08      	ldr	r2, [sp, #32]
 80079c6:	eb0b 0a02 	add.w	sl, fp, r2
 80079ca:	f10a 0901 	add.w	r9, sl, #1
 80079ce:	464a      	mov	r2, r9
 80079d0:	2a01      	cmp	r2, #1
 80079d2:	bfb8      	it	lt
 80079d4:	2201      	movlt	r2, #1
 80079d6:	e7dc      	b.n	8007992 <_dtoa_r+0x23a>
 80079d8:	2201      	movs	r2, #1
 80079da:	e7f2      	b.n	80079c2 <_dtoa_r+0x26a>
 80079dc:	2401      	movs	r4, #1
 80079de:	2200      	movs	r2, #0
 80079e0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80079e4:	f04f 3aff 	mov.w	sl, #4294967295
 80079e8:	2100      	movs	r1, #0
 80079ea:	46d1      	mov	r9, sl
 80079ec:	2212      	movs	r2, #18
 80079ee:	9108      	str	r1, [sp, #32]
 80079f0:	e7cf      	b.n	8007992 <_dtoa_r+0x23a>
 80079f2:	2201      	movs	r2, #1
 80079f4:	9207      	str	r2, [sp, #28]
 80079f6:	e7f5      	b.n	80079e4 <_dtoa_r+0x28c>
 80079f8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80079fc:	46d1      	mov	r9, sl
 80079fe:	4652      	mov	r2, sl
 8007a00:	e7c7      	b.n	8007992 <_dtoa_r+0x23a>
 8007a02:	3101      	adds	r1, #1
 8007a04:	0040      	lsls	r0, r0, #1
 8007a06:	e7c7      	b.n	8007998 <_dtoa_r+0x240>
 8007a08:	636f4361 	.word	0x636f4361
 8007a0c:	3fd287a7 	.word	0x3fd287a7
 8007a10:	8b60c8b3 	.word	0x8b60c8b3
 8007a14:	3fc68a28 	.word	0x3fc68a28
 8007a18:	509f79fb 	.word	0x509f79fb
 8007a1c:	3fd34413 	.word	0x3fd34413
 8007a20:	0802fa7b 	.word	0x0802fa7b
 8007a24:	0802fa92 	.word	0x0802fa92
 8007a28:	7ff00000 	.word	0x7ff00000
 8007a2c:	0802fa77 	.word	0x0802fa77
 8007a30:	0802fa6e 	.word	0x0802fa6e
 8007a34:	0802fc7c 	.word	0x0802fc7c
 8007a38:	0802fb80 	.word	0x0802fb80
 8007a3c:	0802faea 	.word	0x0802faea
 8007a40:	69f2      	ldr	r2, [r6, #28]
 8007a42:	9901      	ldr	r1, [sp, #4]
 8007a44:	6011      	str	r1, [r2, #0]
 8007a46:	f1b9 0f0e 	cmp.w	r9, #14
 8007a4a:	d86c      	bhi.n	8007b26 <_dtoa_r+0x3ce>
 8007a4c:	2c00      	cmp	r4, #0
 8007a4e:	d06a      	beq.n	8007b26 <_dtoa_r+0x3ce>
 8007a50:	f1bb 0f00 	cmp.w	fp, #0
 8007a54:	f340 80a0 	ble.w	8007b98 <_dtoa_r+0x440>
 8007a58:	4ac1      	ldr	r2, [pc, #772]	; (8007d60 <_dtoa_r+0x608>)
 8007a5a:	f00b 010f 	and.w	r1, fp, #15
 8007a5e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007a62:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a66:	ed92 7b00 	vldr	d7, [r2]
 8007a6a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8007a6e:	f000 8087 	beq.w	8007b80 <_dtoa_r+0x428>
 8007a72:	49bc      	ldr	r1, [pc, #752]	; (8007d64 <_dtoa_r+0x60c>)
 8007a74:	ed91 6b08 	vldr	d6, [r1, #32]
 8007a78:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007a7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007a80:	f002 020f 	and.w	r2, r2, #15
 8007a84:	2103      	movs	r1, #3
 8007a86:	48b7      	ldr	r0, [pc, #732]	; (8007d64 <_dtoa_r+0x60c>)
 8007a88:	2a00      	cmp	r2, #0
 8007a8a:	d17b      	bne.n	8007b84 <_dtoa_r+0x42c>
 8007a8c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007a90:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007a94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	f000 80a0 	beq.w	8007be4 <_dtoa_r+0x48c>
 8007aa4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007aa8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab0:	f140 8098 	bpl.w	8007be4 <_dtoa_r+0x48c>
 8007ab4:	f1b9 0f00 	cmp.w	r9, #0
 8007ab8:	f000 8094 	beq.w	8007be4 <_dtoa_r+0x48c>
 8007abc:	f1ba 0f00 	cmp.w	sl, #0
 8007ac0:	dd2f      	ble.n	8007b22 <_dtoa_r+0x3ca>
 8007ac2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007ac6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007aca:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ace:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007ad2:	3101      	adds	r1, #1
 8007ad4:	4654      	mov	r4, sl
 8007ad6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007ada:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007ade:	ee07 1a90 	vmov	s15, r1
 8007ae2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007ae6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007aea:	ee15 7a90 	vmov	r7, s11
 8007aee:	ec51 0b15 	vmov	r0, r1, d5
 8007af2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007af6:	2c00      	cmp	r4, #0
 8007af8:	d177      	bne.n	8007bea <_dtoa_r+0x492>
 8007afa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007afe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007b02:	ec41 0b17 	vmov	d7, r0, r1
 8007b06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0e:	f300 826a 	bgt.w	8007fe6 <_dtoa_r+0x88e>
 8007b12:	eeb1 7b47 	vneg.f64	d7, d7
 8007b16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1e:	f100 8260 	bmi.w	8007fe2 <_dtoa_r+0x88a>
 8007b22:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007b26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b28:	2a00      	cmp	r2, #0
 8007b2a:	f2c0 811d 	blt.w	8007d68 <_dtoa_r+0x610>
 8007b2e:	f1bb 0f0e 	cmp.w	fp, #14
 8007b32:	f300 8119 	bgt.w	8007d68 <_dtoa_r+0x610>
 8007b36:	4b8a      	ldr	r3, [pc, #552]	; (8007d60 <_dtoa_r+0x608>)
 8007b38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b3c:	ed93 6b00 	vldr	d6, [r3]
 8007b40:	9b08      	ldr	r3, [sp, #32]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f280 80b7 	bge.w	8007cb6 <_dtoa_r+0x55e>
 8007b48:	f1b9 0f00 	cmp.w	r9, #0
 8007b4c:	f300 80b3 	bgt.w	8007cb6 <_dtoa_r+0x55e>
 8007b50:	f040 8246 	bne.w	8007fe0 <_dtoa_r+0x888>
 8007b54:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007b58:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007b5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b68:	464c      	mov	r4, r9
 8007b6a:	464f      	mov	r7, r9
 8007b6c:	f280 821c 	bge.w	8007fa8 <_dtoa_r+0x850>
 8007b70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b74:	2331      	movs	r3, #49	; 0x31
 8007b76:	f808 3b01 	strb.w	r3, [r8], #1
 8007b7a:	f10b 0b01 	add.w	fp, fp, #1
 8007b7e:	e218      	b.n	8007fb2 <_dtoa_r+0x85a>
 8007b80:	2102      	movs	r1, #2
 8007b82:	e780      	b.n	8007a86 <_dtoa_r+0x32e>
 8007b84:	07d4      	lsls	r4, r2, #31
 8007b86:	d504      	bpl.n	8007b92 <_dtoa_r+0x43a>
 8007b88:	ed90 6b00 	vldr	d6, [r0]
 8007b8c:	3101      	adds	r1, #1
 8007b8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b92:	1052      	asrs	r2, r2, #1
 8007b94:	3008      	adds	r0, #8
 8007b96:	e777      	b.n	8007a88 <_dtoa_r+0x330>
 8007b98:	d022      	beq.n	8007be0 <_dtoa_r+0x488>
 8007b9a:	f1cb 0200 	rsb	r2, fp, #0
 8007b9e:	4970      	ldr	r1, [pc, #448]	; (8007d60 <_dtoa_r+0x608>)
 8007ba0:	f002 000f 	and.w	r0, r2, #15
 8007ba4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007ba8:	ed91 7b00 	vldr	d7, [r1]
 8007bac:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007bb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bb4:	486b      	ldr	r0, [pc, #428]	; (8007d64 <_dtoa_r+0x60c>)
 8007bb6:	1112      	asrs	r2, r2, #4
 8007bb8:	2400      	movs	r4, #0
 8007bba:	2102      	movs	r1, #2
 8007bbc:	b92a      	cbnz	r2, 8007bca <_dtoa_r+0x472>
 8007bbe:	2c00      	cmp	r4, #0
 8007bc0:	f43f af6a 	beq.w	8007a98 <_dtoa_r+0x340>
 8007bc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bc8:	e766      	b.n	8007a98 <_dtoa_r+0x340>
 8007bca:	07d7      	lsls	r7, r2, #31
 8007bcc:	d505      	bpl.n	8007bda <_dtoa_r+0x482>
 8007bce:	ed90 6b00 	vldr	d6, [r0]
 8007bd2:	3101      	adds	r1, #1
 8007bd4:	2401      	movs	r4, #1
 8007bd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bda:	1052      	asrs	r2, r2, #1
 8007bdc:	3008      	adds	r0, #8
 8007bde:	e7ed      	b.n	8007bbc <_dtoa_r+0x464>
 8007be0:	2102      	movs	r1, #2
 8007be2:	e759      	b.n	8007a98 <_dtoa_r+0x340>
 8007be4:	465a      	mov	r2, fp
 8007be6:	464c      	mov	r4, r9
 8007be8:	e775      	b.n	8007ad6 <_dtoa_r+0x37e>
 8007bea:	ec41 0b17 	vmov	d7, r0, r1
 8007bee:	495c      	ldr	r1, [pc, #368]	; (8007d60 <_dtoa_r+0x608>)
 8007bf0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007bf4:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007bf8:	9901      	ldr	r1, [sp, #4]
 8007bfa:	440c      	add	r4, r1
 8007bfc:	9907      	ldr	r1, [sp, #28]
 8007bfe:	b351      	cbz	r1, 8007c56 <_dtoa_r+0x4fe>
 8007c00:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007c04:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007c08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c0c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007c10:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007c14:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007c18:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007c1c:	ee14 1a90 	vmov	r1, s9
 8007c20:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007c24:	3130      	adds	r1, #48	; 0x30
 8007c26:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007c2a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c32:	f808 1b01 	strb.w	r1, [r8], #1
 8007c36:	d439      	bmi.n	8007cac <_dtoa_r+0x554>
 8007c38:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007c3c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c44:	d472      	bmi.n	8007d2c <_dtoa_r+0x5d4>
 8007c46:	45a0      	cmp	r8, r4
 8007c48:	f43f af6b 	beq.w	8007b22 <_dtoa_r+0x3ca>
 8007c4c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007c50:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007c54:	e7e0      	b.n	8007c18 <_dtoa_r+0x4c0>
 8007c56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c5a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007c5e:	4620      	mov	r0, r4
 8007c60:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007c64:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007c68:	ee14 1a90 	vmov	r1, s9
 8007c6c:	3130      	adds	r1, #48	; 0x30
 8007c6e:	f808 1b01 	strb.w	r1, [r8], #1
 8007c72:	45a0      	cmp	r8, r4
 8007c74:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007c78:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007c7c:	d118      	bne.n	8007cb0 <_dtoa_r+0x558>
 8007c7e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007c82:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007c86:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c8e:	dc4d      	bgt.n	8007d2c <_dtoa_r+0x5d4>
 8007c90:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007c94:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c9c:	f57f af41 	bpl.w	8007b22 <_dtoa_r+0x3ca>
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	3801      	subs	r0, #1
 8007ca4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007ca8:	2b30      	cmp	r3, #48	; 0x30
 8007caa:	d0f9      	beq.n	8007ca0 <_dtoa_r+0x548>
 8007cac:	4693      	mov	fp, r2
 8007cae:	e02a      	b.n	8007d06 <_dtoa_r+0x5ae>
 8007cb0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007cb4:	e7d6      	b.n	8007c64 <_dtoa_r+0x50c>
 8007cb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007cba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007cbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007cc2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007cc6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007cca:	ee15 3a10 	vmov	r3, s10
 8007cce:	3330      	adds	r3, #48	; 0x30
 8007cd0:	f808 3b01 	strb.w	r3, [r8], #1
 8007cd4:	9b01      	ldr	r3, [sp, #4]
 8007cd6:	eba8 0303 	sub.w	r3, r8, r3
 8007cda:	4599      	cmp	r9, r3
 8007cdc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007ce0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007ce4:	d133      	bne.n	8007d4e <_dtoa_r+0x5f6>
 8007ce6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007cea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf2:	dc1a      	bgt.n	8007d2a <_dtoa_r+0x5d2>
 8007cf4:	eeb4 7b46 	vcmp.f64	d7, d6
 8007cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cfc:	d103      	bne.n	8007d06 <_dtoa_r+0x5ae>
 8007cfe:	ee15 3a10 	vmov	r3, s10
 8007d02:	07d9      	lsls	r1, r3, #31
 8007d04:	d411      	bmi.n	8007d2a <_dtoa_r+0x5d2>
 8007d06:	4629      	mov	r1, r5
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f000 fbd1 	bl	80084b0 <_Bfree>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d12:	f888 3000 	strb.w	r3, [r8]
 8007d16:	f10b 0301 	add.w	r3, fp, #1
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f43f ad69 	beq.w	80077f6 <_dtoa_r+0x9e>
 8007d24:	f8c3 8000 	str.w	r8, [r3]
 8007d28:	e565      	b.n	80077f6 <_dtoa_r+0x9e>
 8007d2a:	465a      	mov	r2, fp
 8007d2c:	4643      	mov	r3, r8
 8007d2e:	4698      	mov	r8, r3
 8007d30:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007d34:	2939      	cmp	r1, #57	; 0x39
 8007d36:	d106      	bne.n	8007d46 <_dtoa_r+0x5ee>
 8007d38:	9901      	ldr	r1, [sp, #4]
 8007d3a:	4299      	cmp	r1, r3
 8007d3c:	d1f7      	bne.n	8007d2e <_dtoa_r+0x5d6>
 8007d3e:	9801      	ldr	r0, [sp, #4]
 8007d40:	2130      	movs	r1, #48	; 0x30
 8007d42:	3201      	adds	r2, #1
 8007d44:	7001      	strb	r1, [r0, #0]
 8007d46:	7819      	ldrb	r1, [r3, #0]
 8007d48:	3101      	adds	r1, #1
 8007d4a:	7019      	strb	r1, [r3, #0]
 8007d4c:	e7ae      	b.n	8007cac <_dtoa_r+0x554>
 8007d4e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5a:	d1b2      	bne.n	8007cc2 <_dtoa_r+0x56a>
 8007d5c:	e7d3      	b.n	8007d06 <_dtoa_r+0x5ae>
 8007d5e:	bf00      	nop
 8007d60:	0802fb80 	.word	0x0802fb80
 8007d64:	0802fb58 	.word	0x0802fb58
 8007d68:	9907      	ldr	r1, [sp, #28]
 8007d6a:	2900      	cmp	r1, #0
 8007d6c:	f000 80d0 	beq.w	8007f10 <_dtoa_r+0x7b8>
 8007d70:	9906      	ldr	r1, [sp, #24]
 8007d72:	2901      	cmp	r1, #1
 8007d74:	f300 80b4 	bgt.w	8007ee0 <_dtoa_r+0x788>
 8007d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d7a:	2900      	cmp	r1, #0
 8007d7c:	f000 80ac 	beq.w	8007ed8 <_dtoa_r+0x780>
 8007d80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007d84:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007d88:	461c      	mov	r4, r3
 8007d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8c:	9b04      	ldr	r3, [sp, #16]
 8007d8e:	4413      	add	r3, r2
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	9b05      	ldr	r3, [sp, #20]
 8007d94:	2101      	movs	r1, #1
 8007d96:	4413      	add	r3, r2
 8007d98:	4630      	mov	r0, r6
 8007d9a:	9305      	str	r3, [sp, #20]
 8007d9c:	f000 fc3e 	bl	800861c <__i2b>
 8007da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da2:	4607      	mov	r7, r0
 8007da4:	f1b8 0f00 	cmp.w	r8, #0
 8007da8:	d00d      	beq.n	8007dc6 <_dtoa_r+0x66e>
 8007daa:	9a05      	ldr	r2, [sp, #20]
 8007dac:	2a00      	cmp	r2, #0
 8007dae:	dd0a      	ble.n	8007dc6 <_dtoa_r+0x66e>
 8007db0:	4542      	cmp	r2, r8
 8007db2:	9904      	ldr	r1, [sp, #16]
 8007db4:	bfa8      	it	ge
 8007db6:	4642      	movge	r2, r8
 8007db8:	1a89      	subs	r1, r1, r2
 8007dba:	9104      	str	r1, [sp, #16]
 8007dbc:	9905      	ldr	r1, [sp, #20]
 8007dbe:	eba8 0802 	sub.w	r8, r8, r2
 8007dc2:	1a8a      	subs	r2, r1, r2
 8007dc4:	9205      	str	r2, [sp, #20]
 8007dc6:	b303      	cbz	r3, 8007e0a <_dtoa_r+0x6b2>
 8007dc8:	9a07      	ldr	r2, [sp, #28]
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	f000 80a5 	beq.w	8007f1a <_dtoa_r+0x7c2>
 8007dd0:	2c00      	cmp	r4, #0
 8007dd2:	dd13      	ble.n	8007dfc <_dtoa_r+0x6a4>
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	4622      	mov	r2, r4
 8007dd8:	4630      	mov	r0, r6
 8007dda:	930d      	str	r3, [sp, #52]	; 0x34
 8007ddc:	f000 fcde 	bl	800879c <__pow5mult>
 8007de0:	462a      	mov	r2, r5
 8007de2:	4601      	mov	r1, r0
 8007de4:	4607      	mov	r7, r0
 8007de6:	4630      	mov	r0, r6
 8007de8:	f000 fc2e 	bl	8008648 <__multiply>
 8007dec:	4629      	mov	r1, r5
 8007dee:	9009      	str	r0, [sp, #36]	; 0x24
 8007df0:	4630      	mov	r0, r6
 8007df2:	f000 fb5d 	bl	80084b0 <_Bfree>
 8007df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dfa:	4615      	mov	r5, r2
 8007dfc:	1b1a      	subs	r2, r3, r4
 8007dfe:	d004      	beq.n	8007e0a <_dtoa_r+0x6b2>
 8007e00:	4629      	mov	r1, r5
 8007e02:	4630      	mov	r0, r6
 8007e04:	f000 fcca 	bl	800879c <__pow5mult>
 8007e08:	4605      	mov	r5, r0
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f000 fc05 	bl	800861c <__i2b>
 8007e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	4604      	mov	r4, r0
 8007e18:	f340 8081 	ble.w	8007f1e <_dtoa_r+0x7c6>
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	4601      	mov	r1, r0
 8007e20:	4630      	mov	r0, r6
 8007e22:	f000 fcbb 	bl	800879c <__pow5mult>
 8007e26:	9b06      	ldr	r3, [sp, #24]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	dd7a      	ble.n	8007f24 <_dtoa_r+0x7cc>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9309      	str	r3, [sp, #36]	; 0x24
 8007e32:	6922      	ldr	r2, [r4, #16]
 8007e34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007e38:	6910      	ldr	r0, [r2, #16]
 8007e3a:	f000 fba1 	bl	8008580 <__hi0bits>
 8007e3e:	f1c0 0020 	rsb	r0, r0, #32
 8007e42:	9b05      	ldr	r3, [sp, #20]
 8007e44:	4418      	add	r0, r3
 8007e46:	f010 001f 	ands.w	r0, r0, #31
 8007e4a:	f000 8093 	beq.w	8007f74 <_dtoa_r+0x81c>
 8007e4e:	f1c0 0220 	rsb	r2, r0, #32
 8007e52:	2a04      	cmp	r2, #4
 8007e54:	f340 8085 	ble.w	8007f62 <_dtoa_r+0x80a>
 8007e58:	9b04      	ldr	r3, [sp, #16]
 8007e5a:	f1c0 001c 	rsb	r0, r0, #28
 8007e5e:	4403      	add	r3, r0
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	9b05      	ldr	r3, [sp, #20]
 8007e64:	4480      	add	r8, r0
 8007e66:	4403      	add	r3, r0
 8007e68:	9305      	str	r3, [sp, #20]
 8007e6a:	9b04      	ldr	r3, [sp, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd05      	ble.n	8007e7c <_dtoa_r+0x724>
 8007e70:	4629      	mov	r1, r5
 8007e72:	461a      	mov	r2, r3
 8007e74:	4630      	mov	r0, r6
 8007e76:	f000 fceb 	bl	8008850 <__lshift>
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	9b05      	ldr	r3, [sp, #20]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	dd05      	ble.n	8007e8e <_dtoa_r+0x736>
 8007e82:	4621      	mov	r1, r4
 8007e84:	461a      	mov	r2, r3
 8007e86:	4630      	mov	r0, r6
 8007e88:	f000 fce2 	bl	8008850 <__lshift>
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d071      	beq.n	8007f78 <_dtoa_r+0x820>
 8007e94:	4621      	mov	r1, r4
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 fd46 	bl	8008928 <__mcmp>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	da6b      	bge.n	8007f78 <_dtoa_r+0x820>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	220a      	movs	r2, #10
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f000 fb24 	bl	80084f4 <__multadd>
 8007eac:	9b07      	ldr	r3, [sp, #28]
 8007eae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8197 	beq.w	80081e8 <_dtoa_r+0xa90>
 8007eba:	4639      	mov	r1, r7
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	220a      	movs	r2, #10
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f000 fb17 	bl	80084f4 <__multadd>
 8007ec6:	f1ba 0f00 	cmp.w	sl, #0
 8007eca:	4607      	mov	r7, r0
 8007ecc:	f300 8093 	bgt.w	8007ff6 <_dtoa_r+0x89e>
 8007ed0:	9b06      	ldr	r3, [sp, #24]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	dc57      	bgt.n	8007f86 <_dtoa_r+0x82e>
 8007ed6:	e08e      	b.n	8007ff6 <_dtoa_r+0x89e>
 8007ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007eda:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007ede:	e751      	b.n	8007d84 <_dtoa_r+0x62c>
 8007ee0:	f109 34ff 	add.w	r4, r9, #4294967295
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	bfbf      	itttt	lt
 8007ee8:	1ae2      	sublt	r2, r4, r3
 8007eea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007eec:	189b      	addlt	r3, r3, r2
 8007eee:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007ef0:	bfae      	itee	ge
 8007ef2:	1b1c      	subge	r4, r3, r4
 8007ef4:	4623      	movlt	r3, r4
 8007ef6:	2400      	movlt	r4, #0
 8007ef8:	f1b9 0f00 	cmp.w	r9, #0
 8007efc:	bfb5      	itete	lt
 8007efe:	9a04      	ldrlt	r2, [sp, #16]
 8007f00:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007f04:	eba2 0809 	sublt.w	r8, r2, r9
 8007f08:	464a      	movge	r2, r9
 8007f0a:	bfb8      	it	lt
 8007f0c:	2200      	movlt	r2, #0
 8007f0e:	e73c      	b.n	8007d8a <_dtoa_r+0x632>
 8007f10:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007f14:	9f07      	ldr	r7, [sp, #28]
 8007f16:	461c      	mov	r4, r3
 8007f18:	e744      	b.n	8007da4 <_dtoa_r+0x64c>
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	e770      	b.n	8007e00 <_dtoa_r+0x6a8>
 8007f1e:	9b06      	ldr	r3, [sp, #24]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	dc18      	bgt.n	8007f56 <_dtoa_r+0x7fe>
 8007f24:	9b02      	ldr	r3, [sp, #8]
 8007f26:	b9b3      	cbnz	r3, 8007f56 <_dtoa_r+0x7fe>
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007f2e:	b9a2      	cbnz	r2, 8007f5a <_dtoa_r+0x802>
 8007f30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f34:	0d12      	lsrs	r2, r2, #20
 8007f36:	0512      	lsls	r2, r2, #20
 8007f38:	b18a      	cbz	r2, 8007f5e <_dtoa_r+0x806>
 8007f3a:	9b04      	ldr	r3, [sp, #16]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	9304      	str	r3, [sp, #16]
 8007f40:	9b05      	ldr	r3, [sp, #20]
 8007f42:	3301      	adds	r3, #1
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	2301      	movs	r3, #1
 8007f48:	9309      	str	r3, [sp, #36]	; 0x24
 8007f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f47f af70 	bne.w	8007e32 <_dtoa_r+0x6da>
 8007f52:	2001      	movs	r0, #1
 8007f54:	e775      	b.n	8007e42 <_dtoa_r+0x6ea>
 8007f56:	2300      	movs	r3, #0
 8007f58:	e7f6      	b.n	8007f48 <_dtoa_r+0x7f0>
 8007f5a:	9b02      	ldr	r3, [sp, #8]
 8007f5c:	e7f4      	b.n	8007f48 <_dtoa_r+0x7f0>
 8007f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8007f60:	e7f3      	b.n	8007f4a <_dtoa_r+0x7f2>
 8007f62:	d082      	beq.n	8007e6a <_dtoa_r+0x712>
 8007f64:	9b04      	ldr	r3, [sp, #16]
 8007f66:	321c      	adds	r2, #28
 8007f68:	4413      	add	r3, r2
 8007f6a:	9304      	str	r3, [sp, #16]
 8007f6c:	9b05      	ldr	r3, [sp, #20]
 8007f6e:	4490      	add	r8, r2
 8007f70:	4413      	add	r3, r2
 8007f72:	e779      	b.n	8007e68 <_dtoa_r+0x710>
 8007f74:	4602      	mov	r2, r0
 8007f76:	e7f5      	b.n	8007f64 <_dtoa_r+0x80c>
 8007f78:	f1b9 0f00 	cmp.w	r9, #0
 8007f7c:	dc36      	bgt.n	8007fec <_dtoa_r+0x894>
 8007f7e:	9b06      	ldr	r3, [sp, #24]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	dd33      	ble.n	8007fec <_dtoa_r+0x894>
 8007f84:	46ca      	mov	sl, r9
 8007f86:	f1ba 0f00 	cmp.w	sl, #0
 8007f8a:	d10d      	bne.n	8007fa8 <_dtoa_r+0x850>
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4653      	mov	r3, sl
 8007f90:	2205      	movs	r2, #5
 8007f92:	4630      	mov	r0, r6
 8007f94:	f000 faae 	bl	80084f4 <__multadd>
 8007f98:	4601      	mov	r1, r0
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f000 fcc3 	bl	8008928 <__mcmp>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	f73f ade4 	bgt.w	8007b70 <_dtoa_r+0x418>
 8007fa8:	9b08      	ldr	r3, [sp, #32]
 8007faa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007fae:	ea6f 0b03 	mvn.w	fp, r3
 8007fb2:	f04f 0900 	mov.w	r9, #0
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f000 fa79 	bl	80084b0 <_Bfree>
 8007fbe:	2f00      	cmp	r7, #0
 8007fc0:	f43f aea1 	beq.w	8007d06 <_dtoa_r+0x5ae>
 8007fc4:	f1b9 0f00 	cmp.w	r9, #0
 8007fc8:	d005      	beq.n	8007fd6 <_dtoa_r+0x87e>
 8007fca:	45b9      	cmp	r9, r7
 8007fcc:	d003      	beq.n	8007fd6 <_dtoa_r+0x87e>
 8007fce:	4649      	mov	r1, r9
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f000 fa6d 	bl	80084b0 <_Bfree>
 8007fd6:	4639      	mov	r1, r7
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f000 fa69 	bl	80084b0 <_Bfree>
 8007fde:	e692      	b.n	8007d06 <_dtoa_r+0x5ae>
 8007fe0:	2400      	movs	r4, #0
 8007fe2:	4627      	mov	r7, r4
 8007fe4:	e7e0      	b.n	8007fa8 <_dtoa_r+0x850>
 8007fe6:	4693      	mov	fp, r2
 8007fe8:	4627      	mov	r7, r4
 8007fea:	e5c1      	b.n	8007b70 <_dtoa_r+0x418>
 8007fec:	9b07      	ldr	r3, [sp, #28]
 8007fee:	46ca      	mov	sl, r9
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 8100 	beq.w	80081f6 <_dtoa_r+0xa9e>
 8007ff6:	f1b8 0f00 	cmp.w	r8, #0
 8007ffa:	dd05      	ble.n	8008008 <_dtoa_r+0x8b0>
 8007ffc:	4639      	mov	r1, r7
 8007ffe:	4642      	mov	r2, r8
 8008000:	4630      	mov	r0, r6
 8008002:	f000 fc25 	bl	8008850 <__lshift>
 8008006:	4607      	mov	r7, r0
 8008008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800a:	2b00      	cmp	r3, #0
 800800c:	d05d      	beq.n	80080ca <_dtoa_r+0x972>
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	4630      	mov	r0, r6
 8008012:	f000 fa0d 	bl	8008430 <_Balloc>
 8008016:	4680      	mov	r8, r0
 8008018:	b928      	cbnz	r0, 8008026 <_dtoa_r+0x8ce>
 800801a:	4b82      	ldr	r3, [pc, #520]	; (8008224 <_dtoa_r+0xacc>)
 800801c:	4602      	mov	r2, r0
 800801e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008022:	f7ff bbb1 	b.w	8007788 <_dtoa_r+0x30>
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	3202      	adds	r2, #2
 800802a:	0092      	lsls	r2, r2, #2
 800802c:	f107 010c 	add.w	r1, r7, #12
 8008030:	300c      	adds	r0, #12
 8008032:	f001 fb3d 	bl	80096b0 <memcpy>
 8008036:	2201      	movs	r2, #1
 8008038:	4641      	mov	r1, r8
 800803a:	4630      	mov	r0, r6
 800803c:	f000 fc08 	bl	8008850 <__lshift>
 8008040:	9b01      	ldr	r3, [sp, #4]
 8008042:	3301      	adds	r3, #1
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	9b01      	ldr	r3, [sp, #4]
 8008048:	4453      	add	r3, sl
 800804a:	9308      	str	r3, [sp, #32]
 800804c:	9b02      	ldr	r3, [sp, #8]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	46b9      	mov	r9, r7
 8008054:	9307      	str	r3, [sp, #28]
 8008056:	4607      	mov	r7, r0
 8008058:	9b04      	ldr	r3, [sp, #16]
 800805a:	4621      	mov	r1, r4
 800805c:	3b01      	subs	r3, #1
 800805e:	4628      	mov	r0, r5
 8008060:	9302      	str	r3, [sp, #8]
 8008062:	f7ff faef 	bl	8007644 <quorem>
 8008066:	4603      	mov	r3, r0
 8008068:	3330      	adds	r3, #48	; 0x30
 800806a:	9005      	str	r0, [sp, #20]
 800806c:	4649      	mov	r1, r9
 800806e:	4628      	mov	r0, r5
 8008070:	9309      	str	r3, [sp, #36]	; 0x24
 8008072:	f000 fc59 	bl	8008928 <__mcmp>
 8008076:	463a      	mov	r2, r7
 8008078:	4682      	mov	sl, r0
 800807a:	4621      	mov	r1, r4
 800807c:	4630      	mov	r0, r6
 800807e:	f000 fc6f 	bl	8008960 <__mdiff>
 8008082:	68c2      	ldr	r2, [r0, #12]
 8008084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008086:	4680      	mov	r8, r0
 8008088:	bb0a      	cbnz	r2, 80080ce <_dtoa_r+0x976>
 800808a:	4601      	mov	r1, r0
 800808c:	4628      	mov	r0, r5
 800808e:	f000 fc4b 	bl	8008928 <__mcmp>
 8008092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008094:	4602      	mov	r2, r0
 8008096:	4641      	mov	r1, r8
 8008098:	4630      	mov	r0, r6
 800809a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800809e:	f000 fa07 	bl	80084b0 <_Bfree>
 80080a2:	9b06      	ldr	r3, [sp, #24]
 80080a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080a6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80080aa:	ea43 0102 	orr.w	r1, r3, r2
 80080ae:	9b07      	ldr	r3, [sp, #28]
 80080b0:	4319      	orrs	r1, r3
 80080b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b4:	d10d      	bne.n	80080d2 <_dtoa_r+0x97a>
 80080b6:	2b39      	cmp	r3, #57	; 0x39
 80080b8:	d029      	beq.n	800810e <_dtoa_r+0x9b6>
 80080ba:	f1ba 0f00 	cmp.w	sl, #0
 80080be:	dd01      	ble.n	80080c4 <_dtoa_r+0x96c>
 80080c0:	9b05      	ldr	r3, [sp, #20]
 80080c2:	3331      	adds	r3, #49	; 0x31
 80080c4:	9a02      	ldr	r2, [sp, #8]
 80080c6:	7013      	strb	r3, [r2, #0]
 80080c8:	e775      	b.n	8007fb6 <_dtoa_r+0x85e>
 80080ca:	4638      	mov	r0, r7
 80080cc:	e7b8      	b.n	8008040 <_dtoa_r+0x8e8>
 80080ce:	2201      	movs	r2, #1
 80080d0:	e7e1      	b.n	8008096 <_dtoa_r+0x93e>
 80080d2:	f1ba 0f00 	cmp.w	sl, #0
 80080d6:	db06      	blt.n	80080e6 <_dtoa_r+0x98e>
 80080d8:	9906      	ldr	r1, [sp, #24]
 80080da:	ea41 0a0a 	orr.w	sl, r1, sl
 80080de:	9907      	ldr	r1, [sp, #28]
 80080e0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80080e4:	d120      	bne.n	8008128 <_dtoa_r+0x9d0>
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	ddec      	ble.n	80080c4 <_dtoa_r+0x96c>
 80080ea:	4629      	mov	r1, r5
 80080ec:	2201      	movs	r2, #1
 80080ee:	4630      	mov	r0, r6
 80080f0:	9304      	str	r3, [sp, #16]
 80080f2:	f000 fbad 	bl	8008850 <__lshift>
 80080f6:	4621      	mov	r1, r4
 80080f8:	4605      	mov	r5, r0
 80080fa:	f000 fc15 	bl	8008928 <__mcmp>
 80080fe:	2800      	cmp	r0, #0
 8008100:	9b04      	ldr	r3, [sp, #16]
 8008102:	dc02      	bgt.n	800810a <_dtoa_r+0x9b2>
 8008104:	d1de      	bne.n	80080c4 <_dtoa_r+0x96c>
 8008106:	07da      	lsls	r2, r3, #31
 8008108:	d5dc      	bpl.n	80080c4 <_dtoa_r+0x96c>
 800810a:	2b39      	cmp	r3, #57	; 0x39
 800810c:	d1d8      	bne.n	80080c0 <_dtoa_r+0x968>
 800810e:	9a02      	ldr	r2, [sp, #8]
 8008110:	2339      	movs	r3, #57	; 0x39
 8008112:	7013      	strb	r3, [r2, #0]
 8008114:	4643      	mov	r3, r8
 8008116:	4698      	mov	r8, r3
 8008118:	3b01      	subs	r3, #1
 800811a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800811e:	2a39      	cmp	r2, #57	; 0x39
 8008120:	d051      	beq.n	80081c6 <_dtoa_r+0xa6e>
 8008122:	3201      	adds	r2, #1
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	e746      	b.n	8007fb6 <_dtoa_r+0x85e>
 8008128:	2a00      	cmp	r2, #0
 800812a:	dd03      	ble.n	8008134 <_dtoa_r+0x9dc>
 800812c:	2b39      	cmp	r3, #57	; 0x39
 800812e:	d0ee      	beq.n	800810e <_dtoa_r+0x9b6>
 8008130:	3301      	adds	r3, #1
 8008132:	e7c7      	b.n	80080c4 <_dtoa_r+0x96c>
 8008134:	9a04      	ldr	r2, [sp, #16]
 8008136:	9908      	ldr	r1, [sp, #32]
 8008138:	f802 3c01 	strb.w	r3, [r2, #-1]
 800813c:	428a      	cmp	r2, r1
 800813e:	d02b      	beq.n	8008198 <_dtoa_r+0xa40>
 8008140:	4629      	mov	r1, r5
 8008142:	2300      	movs	r3, #0
 8008144:	220a      	movs	r2, #10
 8008146:	4630      	mov	r0, r6
 8008148:	f000 f9d4 	bl	80084f4 <__multadd>
 800814c:	45b9      	cmp	r9, r7
 800814e:	4605      	mov	r5, r0
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	f04f 020a 	mov.w	r2, #10
 8008158:	4649      	mov	r1, r9
 800815a:	4630      	mov	r0, r6
 800815c:	d107      	bne.n	800816e <_dtoa_r+0xa16>
 800815e:	f000 f9c9 	bl	80084f4 <__multadd>
 8008162:	4681      	mov	r9, r0
 8008164:	4607      	mov	r7, r0
 8008166:	9b04      	ldr	r3, [sp, #16]
 8008168:	3301      	adds	r3, #1
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	e774      	b.n	8008058 <_dtoa_r+0x900>
 800816e:	f000 f9c1 	bl	80084f4 <__multadd>
 8008172:	4639      	mov	r1, r7
 8008174:	4681      	mov	r9, r0
 8008176:	2300      	movs	r3, #0
 8008178:	220a      	movs	r2, #10
 800817a:	4630      	mov	r0, r6
 800817c:	f000 f9ba 	bl	80084f4 <__multadd>
 8008180:	4607      	mov	r7, r0
 8008182:	e7f0      	b.n	8008166 <_dtoa_r+0xa0e>
 8008184:	f1ba 0f00 	cmp.w	sl, #0
 8008188:	9a01      	ldr	r2, [sp, #4]
 800818a:	bfcc      	ite	gt
 800818c:	46d0      	movgt	r8, sl
 800818e:	f04f 0801 	movle.w	r8, #1
 8008192:	4490      	add	r8, r2
 8008194:	f04f 0900 	mov.w	r9, #0
 8008198:	4629      	mov	r1, r5
 800819a:	2201      	movs	r2, #1
 800819c:	4630      	mov	r0, r6
 800819e:	9302      	str	r3, [sp, #8]
 80081a0:	f000 fb56 	bl	8008850 <__lshift>
 80081a4:	4621      	mov	r1, r4
 80081a6:	4605      	mov	r5, r0
 80081a8:	f000 fbbe 	bl	8008928 <__mcmp>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	dcb1      	bgt.n	8008114 <_dtoa_r+0x9bc>
 80081b0:	d102      	bne.n	80081b8 <_dtoa_r+0xa60>
 80081b2:	9b02      	ldr	r3, [sp, #8]
 80081b4:	07db      	lsls	r3, r3, #31
 80081b6:	d4ad      	bmi.n	8008114 <_dtoa_r+0x9bc>
 80081b8:	4643      	mov	r3, r8
 80081ba:	4698      	mov	r8, r3
 80081bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081c0:	2a30      	cmp	r2, #48	; 0x30
 80081c2:	d0fa      	beq.n	80081ba <_dtoa_r+0xa62>
 80081c4:	e6f7      	b.n	8007fb6 <_dtoa_r+0x85e>
 80081c6:	9a01      	ldr	r2, [sp, #4]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d1a4      	bne.n	8008116 <_dtoa_r+0x9be>
 80081cc:	f10b 0b01 	add.w	fp, fp, #1
 80081d0:	2331      	movs	r3, #49	; 0x31
 80081d2:	e778      	b.n	80080c6 <_dtoa_r+0x96e>
 80081d4:	4b14      	ldr	r3, [pc, #80]	; (8008228 <_dtoa_r+0xad0>)
 80081d6:	f7ff bb2a 	b.w	800782e <_dtoa_r+0xd6>
 80081da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f47f ab05 	bne.w	80077ec <_dtoa_r+0x94>
 80081e2:	4b12      	ldr	r3, [pc, #72]	; (800822c <_dtoa_r+0xad4>)
 80081e4:	f7ff bb23 	b.w	800782e <_dtoa_r+0xd6>
 80081e8:	f1ba 0f00 	cmp.w	sl, #0
 80081ec:	dc03      	bgt.n	80081f6 <_dtoa_r+0xa9e>
 80081ee:	9b06      	ldr	r3, [sp, #24]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	f73f aec8 	bgt.w	8007f86 <_dtoa_r+0x82e>
 80081f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80081fa:	4621      	mov	r1, r4
 80081fc:	4628      	mov	r0, r5
 80081fe:	f7ff fa21 	bl	8007644 <quorem>
 8008202:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008206:	f808 3b01 	strb.w	r3, [r8], #1
 800820a:	9a01      	ldr	r2, [sp, #4]
 800820c:	eba8 0202 	sub.w	r2, r8, r2
 8008210:	4592      	cmp	sl, r2
 8008212:	ddb7      	ble.n	8008184 <_dtoa_r+0xa2c>
 8008214:	4629      	mov	r1, r5
 8008216:	2300      	movs	r3, #0
 8008218:	220a      	movs	r2, #10
 800821a:	4630      	mov	r0, r6
 800821c:	f000 f96a 	bl	80084f4 <__multadd>
 8008220:	4605      	mov	r5, r0
 8008222:	e7ea      	b.n	80081fa <_dtoa_r+0xaa2>
 8008224:	0802faea 	.word	0x0802faea
 8008228:	0802fc7b 	.word	0x0802fc7b
 800822c:	0802fa6e 	.word	0x0802fa6e

08008230 <_free_r>:
 8008230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008232:	2900      	cmp	r1, #0
 8008234:	d044      	beq.n	80082c0 <_free_r+0x90>
 8008236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800823a:	9001      	str	r0, [sp, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f1a1 0404 	sub.w	r4, r1, #4
 8008242:	bfb8      	it	lt
 8008244:	18e4      	addlt	r4, r4, r3
 8008246:	f000 f8e7 	bl	8008418 <__malloc_lock>
 800824a:	4a1e      	ldr	r2, [pc, #120]	; (80082c4 <_free_r+0x94>)
 800824c:	9801      	ldr	r0, [sp, #4]
 800824e:	6813      	ldr	r3, [r2, #0]
 8008250:	b933      	cbnz	r3, 8008260 <_free_r+0x30>
 8008252:	6063      	str	r3, [r4, #4]
 8008254:	6014      	str	r4, [r2, #0]
 8008256:	b003      	add	sp, #12
 8008258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800825c:	f000 b8e2 	b.w	8008424 <__malloc_unlock>
 8008260:	42a3      	cmp	r3, r4
 8008262:	d908      	bls.n	8008276 <_free_r+0x46>
 8008264:	6825      	ldr	r5, [r4, #0]
 8008266:	1961      	adds	r1, r4, r5
 8008268:	428b      	cmp	r3, r1
 800826a:	bf01      	itttt	eq
 800826c:	6819      	ldreq	r1, [r3, #0]
 800826e:	685b      	ldreq	r3, [r3, #4]
 8008270:	1949      	addeq	r1, r1, r5
 8008272:	6021      	streq	r1, [r4, #0]
 8008274:	e7ed      	b.n	8008252 <_free_r+0x22>
 8008276:	461a      	mov	r2, r3
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	b10b      	cbz	r3, 8008280 <_free_r+0x50>
 800827c:	42a3      	cmp	r3, r4
 800827e:	d9fa      	bls.n	8008276 <_free_r+0x46>
 8008280:	6811      	ldr	r1, [r2, #0]
 8008282:	1855      	adds	r5, r2, r1
 8008284:	42a5      	cmp	r5, r4
 8008286:	d10b      	bne.n	80082a0 <_free_r+0x70>
 8008288:	6824      	ldr	r4, [r4, #0]
 800828a:	4421      	add	r1, r4
 800828c:	1854      	adds	r4, r2, r1
 800828e:	42a3      	cmp	r3, r4
 8008290:	6011      	str	r1, [r2, #0]
 8008292:	d1e0      	bne.n	8008256 <_free_r+0x26>
 8008294:	681c      	ldr	r4, [r3, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	6053      	str	r3, [r2, #4]
 800829a:	440c      	add	r4, r1
 800829c:	6014      	str	r4, [r2, #0]
 800829e:	e7da      	b.n	8008256 <_free_r+0x26>
 80082a0:	d902      	bls.n	80082a8 <_free_r+0x78>
 80082a2:	230c      	movs	r3, #12
 80082a4:	6003      	str	r3, [r0, #0]
 80082a6:	e7d6      	b.n	8008256 <_free_r+0x26>
 80082a8:	6825      	ldr	r5, [r4, #0]
 80082aa:	1961      	adds	r1, r4, r5
 80082ac:	428b      	cmp	r3, r1
 80082ae:	bf04      	itt	eq
 80082b0:	6819      	ldreq	r1, [r3, #0]
 80082b2:	685b      	ldreq	r3, [r3, #4]
 80082b4:	6063      	str	r3, [r4, #4]
 80082b6:	bf04      	itt	eq
 80082b8:	1949      	addeq	r1, r1, r5
 80082ba:	6021      	streq	r1, [r4, #0]
 80082bc:	6054      	str	r4, [r2, #4]
 80082be:	e7ca      	b.n	8008256 <_free_r+0x26>
 80082c0:	b003      	add	sp, #12
 80082c2:	bd30      	pop	{r4, r5, pc}
 80082c4:	2000061c 	.word	0x2000061c

080082c8 <malloc>:
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <malloc+0xc>)
 80082ca:	4601      	mov	r1, r0
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	f000 b823 	b.w	8008318 <_malloc_r>
 80082d2:	bf00      	nop
 80082d4:	20000068 	.word	0x20000068

080082d8 <sbrk_aligned>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	4e0e      	ldr	r6, [pc, #56]	; (8008314 <sbrk_aligned+0x3c>)
 80082dc:	460c      	mov	r4, r1
 80082de:	6831      	ldr	r1, [r6, #0]
 80082e0:	4605      	mov	r5, r0
 80082e2:	b911      	cbnz	r1, 80082ea <sbrk_aligned+0x12>
 80082e4:	f001 f9d4 	bl	8009690 <_sbrk_r>
 80082e8:	6030      	str	r0, [r6, #0]
 80082ea:	4621      	mov	r1, r4
 80082ec:	4628      	mov	r0, r5
 80082ee:	f001 f9cf 	bl	8009690 <_sbrk_r>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d00a      	beq.n	800830c <sbrk_aligned+0x34>
 80082f6:	1cc4      	adds	r4, r0, #3
 80082f8:	f024 0403 	bic.w	r4, r4, #3
 80082fc:	42a0      	cmp	r0, r4
 80082fe:	d007      	beq.n	8008310 <sbrk_aligned+0x38>
 8008300:	1a21      	subs	r1, r4, r0
 8008302:	4628      	mov	r0, r5
 8008304:	f001 f9c4 	bl	8009690 <_sbrk_r>
 8008308:	3001      	adds	r0, #1
 800830a:	d101      	bne.n	8008310 <sbrk_aligned+0x38>
 800830c:	f04f 34ff 	mov.w	r4, #4294967295
 8008310:	4620      	mov	r0, r4
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	20000620 	.word	0x20000620

08008318 <_malloc_r>:
 8008318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800831c:	1ccd      	adds	r5, r1, #3
 800831e:	f025 0503 	bic.w	r5, r5, #3
 8008322:	3508      	adds	r5, #8
 8008324:	2d0c      	cmp	r5, #12
 8008326:	bf38      	it	cc
 8008328:	250c      	movcc	r5, #12
 800832a:	2d00      	cmp	r5, #0
 800832c:	4607      	mov	r7, r0
 800832e:	db01      	blt.n	8008334 <_malloc_r+0x1c>
 8008330:	42a9      	cmp	r1, r5
 8008332:	d905      	bls.n	8008340 <_malloc_r+0x28>
 8008334:	230c      	movs	r3, #12
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	2600      	movs	r6, #0
 800833a:	4630      	mov	r0, r6
 800833c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008340:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008414 <_malloc_r+0xfc>
 8008344:	f000 f868 	bl	8008418 <__malloc_lock>
 8008348:	f8d8 3000 	ldr.w	r3, [r8]
 800834c:	461c      	mov	r4, r3
 800834e:	bb5c      	cbnz	r4, 80083a8 <_malloc_r+0x90>
 8008350:	4629      	mov	r1, r5
 8008352:	4638      	mov	r0, r7
 8008354:	f7ff ffc0 	bl	80082d8 <sbrk_aligned>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	4604      	mov	r4, r0
 800835c:	d155      	bne.n	800840a <_malloc_r+0xf2>
 800835e:	f8d8 4000 	ldr.w	r4, [r8]
 8008362:	4626      	mov	r6, r4
 8008364:	2e00      	cmp	r6, #0
 8008366:	d145      	bne.n	80083f4 <_malloc_r+0xdc>
 8008368:	2c00      	cmp	r4, #0
 800836a:	d048      	beq.n	80083fe <_malloc_r+0xe6>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	4631      	mov	r1, r6
 8008370:	4638      	mov	r0, r7
 8008372:	eb04 0903 	add.w	r9, r4, r3
 8008376:	f001 f98b 	bl	8009690 <_sbrk_r>
 800837a:	4581      	cmp	r9, r0
 800837c:	d13f      	bne.n	80083fe <_malloc_r+0xe6>
 800837e:	6821      	ldr	r1, [r4, #0]
 8008380:	1a6d      	subs	r5, r5, r1
 8008382:	4629      	mov	r1, r5
 8008384:	4638      	mov	r0, r7
 8008386:	f7ff ffa7 	bl	80082d8 <sbrk_aligned>
 800838a:	3001      	adds	r0, #1
 800838c:	d037      	beq.n	80083fe <_malloc_r+0xe6>
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	442b      	add	r3, r5
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	f8d8 3000 	ldr.w	r3, [r8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d038      	beq.n	800840e <_malloc_r+0xf6>
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	42a2      	cmp	r2, r4
 80083a0:	d12b      	bne.n	80083fa <_malloc_r+0xe2>
 80083a2:	2200      	movs	r2, #0
 80083a4:	605a      	str	r2, [r3, #4]
 80083a6:	e00f      	b.n	80083c8 <_malloc_r+0xb0>
 80083a8:	6822      	ldr	r2, [r4, #0]
 80083aa:	1b52      	subs	r2, r2, r5
 80083ac:	d41f      	bmi.n	80083ee <_malloc_r+0xd6>
 80083ae:	2a0b      	cmp	r2, #11
 80083b0:	d917      	bls.n	80083e2 <_malloc_r+0xca>
 80083b2:	1961      	adds	r1, r4, r5
 80083b4:	42a3      	cmp	r3, r4
 80083b6:	6025      	str	r5, [r4, #0]
 80083b8:	bf18      	it	ne
 80083ba:	6059      	strne	r1, [r3, #4]
 80083bc:	6863      	ldr	r3, [r4, #4]
 80083be:	bf08      	it	eq
 80083c0:	f8c8 1000 	streq.w	r1, [r8]
 80083c4:	5162      	str	r2, [r4, r5]
 80083c6:	604b      	str	r3, [r1, #4]
 80083c8:	4638      	mov	r0, r7
 80083ca:	f104 060b 	add.w	r6, r4, #11
 80083ce:	f000 f829 	bl	8008424 <__malloc_unlock>
 80083d2:	f026 0607 	bic.w	r6, r6, #7
 80083d6:	1d23      	adds	r3, r4, #4
 80083d8:	1af2      	subs	r2, r6, r3
 80083da:	d0ae      	beq.n	800833a <_malloc_r+0x22>
 80083dc:	1b9b      	subs	r3, r3, r6
 80083de:	50a3      	str	r3, [r4, r2]
 80083e0:	e7ab      	b.n	800833a <_malloc_r+0x22>
 80083e2:	42a3      	cmp	r3, r4
 80083e4:	6862      	ldr	r2, [r4, #4]
 80083e6:	d1dd      	bne.n	80083a4 <_malloc_r+0x8c>
 80083e8:	f8c8 2000 	str.w	r2, [r8]
 80083ec:	e7ec      	b.n	80083c8 <_malloc_r+0xb0>
 80083ee:	4623      	mov	r3, r4
 80083f0:	6864      	ldr	r4, [r4, #4]
 80083f2:	e7ac      	b.n	800834e <_malloc_r+0x36>
 80083f4:	4634      	mov	r4, r6
 80083f6:	6876      	ldr	r6, [r6, #4]
 80083f8:	e7b4      	b.n	8008364 <_malloc_r+0x4c>
 80083fa:	4613      	mov	r3, r2
 80083fc:	e7cc      	b.n	8008398 <_malloc_r+0x80>
 80083fe:	230c      	movs	r3, #12
 8008400:	603b      	str	r3, [r7, #0]
 8008402:	4638      	mov	r0, r7
 8008404:	f000 f80e 	bl	8008424 <__malloc_unlock>
 8008408:	e797      	b.n	800833a <_malloc_r+0x22>
 800840a:	6025      	str	r5, [r4, #0]
 800840c:	e7dc      	b.n	80083c8 <_malloc_r+0xb0>
 800840e:	605b      	str	r3, [r3, #4]
 8008410:	deff      	udf	#255	; 0xff
 8008412:	bf00      	nop
 8008414:	2000061c 	.word	0x2000061c

08008418 <__malloc_lock>:
 8008418:	4801      	ldr	r0, [pc, #4]	; (8008420 <__malloc_lock+0x8>)
 800841a:	f7ff b911 	b.w	8007640 <__retarget_lock_acquire_recursive>
 800841e:	bf00      	nop
 8008420:	20000618 	.word	0x20000618

08008424 <__malloc_unlock>:
 8008424:	4801      	ldr	r0, [pc, #4]	; (800842c <__malloc_unlock+0x8>)
 8008426:	f7ff b90c 	b.w	8007642 <__retarget_lock_release_recursive>
 800842a:	bf00      	nop
 800842c:	20000618 	.word	0x20000618

08008430 <_Balloc>:
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	69c6      	ldr	r6, [r0, #28]
 8008434:	4604      	mov	r4, r0
 8008436:	460d      	mov	r5, r1
 8008438:	b976      	cbnz	r6, 8008458 <_Balloc+0x28>
 800843a:	2010      	movs	r0, #16
 800843c:	f7ff ff44 	bl	80082c8 <malloc>
 8008440:	4602      	mov	r2, r0
 8008442:	61e0      	str	r0, [r4, #28]
 8008444:	b920      	cbnz	r0, 8008450 <_Balloc+0x20>
 8008446:	4b18      	ldr	r3, [pc, #96]	; (80084a8 <_Balloc+0x78>)
 8008448:	4818      	ldr	r0, [pc, #96]	; (80084ac <_Balloc+0x7c>)
 800844a:	216b      	movs	r1, #107	; 0x6b
 800844c:	f001 f93e 	bl	80096cc <__assert_func>
 8008450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008454:	6006      	str	r6, [r0, #0]
 8008456:	60c6      	str	r6, [r0, #12]
 8008458:	69e6      	ldr	r6, [r4, #28]
 800845a:	68f3      	ldr	r3, [r6, #12]
 800845c:	b183      	cbz	r3, 8008480 <_Balloc+0x50>
 800845e:	69e3      	ldr	r3, [r4, #28]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008466:	b9b8      	cbnz	r0, 8008498 <_Balloc+0x68>
 8008468:	2101      	movs	r1, #1
 800846a:	fa01 f605 	lsl.w	r6, r1, r5
 800846e:	1d72      	adds	r2, r6, #5
 8008470:	0092      	lsls	r2, r2, #2
 8008472:	4620      	mov	r0, r4
 8008474:	f001 f948 	bl	8009708 <_calloc_r>
 8008478:	b160      	cbz	r0, 8008494 <_Balloc+0x64>
 800847a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800847e:	e00e      	b.n	800849e <_Balloc+0x6e>
 8008480:	2221      	movs	r2, #33	; 0x21
 8008482:	2104      	movs	r1, #4
 8008484:	4620      	mov	r0, r4
 8008486:	f001 f93f 	bl	8009708 <_calloc_r>
 800848a:	69e3      	ldr	r3, [r4, #28]
 800848c:	60f0      	str	r0, [r6, #12]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e4      	bne.n	800845e <_Balloc+0x2e>
 8008494:	2000      	movs	r0, #0
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	6802      	ldr	r2, [r0, #0]
 800849a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800849e:	2300      	movs	r3, #0
 80084a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084a4:	e7f7      	b.n	8008496 <_Balloc+0x66>
 80084a6:	bf00      	nop
 80084a8:	0802fa7b 	.word	0x0802fa7b
 80084ac:	0802fafb 	.word	0x0802fafb

080084b0 <_Bfree>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	69c6      	ldr	r6, [r0, #28]
 80084b4:	4605      	mov	r5, r0
 80084b6:	460c      	mov	r4, r1
 80084b8:	b976      	cbnz	r6, 80084d8 <_Bfree+0x28>
 80084ba:	2010      	movs	r0, #16
 80084bc:	f7ff ff04 	bl	80082c8 <malloc>
 80084c0:	4602      	mov	r2, r0
 80084c2:	61e8      	str	r0, [r5, #28]
 80084c4:	b920      	cbnz	r0, 80084d0 <_Bfree+0x20>
 80084c6:	4b09      	ldr	r3, [pc, #36]	; (80084ec <_Bfree+0x3c>)
 80084c8:	4809      	ldr	r0, [pc, #36]	; (80084f0 <_Bfree+0x40>)
 80084ca:	218f      	movs	r1, #143	; 0x8f
 80084cc:	f001 f8fe 	bl	80096cc <__assert_func>
 80084d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084d4:	6006      	str	r6, [r0, #0]
 80084d6:	60c6      	str	r6, [r0, #12]
 80084d8:	b13c      	cbz	r4, 80084ea <_Bfree+0x3a>
 80084da:	69eb      	ldr	r3, [r5, #28]
 80084dc:	6862      	ldr	r2, [r4, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084e4:	6021      	str	r1, [r4, #0]
 80084e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	0802fa7b 	.word	0x0802fa7b
 80084f0:	0802fafb 	.word	0x0802fafb

080084f4 <__multadd>:
 80084f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f8:	690d      	ldr	r5, [r1, #16]
 80084fa:	4607      	mov	r7, r0
 80084fc:	460c      	mov	r4, r1
 80084fe:	461e      	mov	r6, r3
 8008500:	f101 0c14 	add.w	ip, r1, #20
 8008504:	2000      	movs	r0, #0
 8008506:	f8dc 3000 	ldr.w	r3, [ip]
 800850a:	b299      	uxth	r1, r3
 800850c:	fb02 6101 	mla	r1, r2, r1, r6
 8008510:	0c1e      	lsrs	r6, r3, #16
 8008512:	0c0b      	lsrs	r3, r1, #16
 8008514:	fb02 3306 	mla	r3, r2, r6, r3
 8008518:	b289      	uxth	r1, r1
 800851a:	3001      	adds	r0, #1
 800851c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008520:	4285      	cmp	r5, r0
 8008522:	f84c 1b04 	str.w	r1, [ip], #4
 8008526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800852a:	dcec      	bgt.n	8008506 <__multadd+0x12>
 800852c:	b30e      	cbz	r6, 8008572 <__multadd+0x7e>
 800852e:	68a3      	ldr	r3, [r4, #8]
 8008530:	42ab      	cmp	r3, r5
 8008532:	dc19      	bgt.n	8008568 <__multadd+0x74>
 8008534:	6861      	ldr	r1, [r4, #4]
 8008536:	4638      	mov	r0, r7
 8008538:	3101      	adds	r1, #1
 800853a:	f7ff ff79 	bl	8008430 <_Balloc>
 800853e:	4680      	mov	r8, r0
 8008540:	b928      	cbnz	r0, 800854e <__multadd+0x5a>
 8008542:	4602      	mov	r2, r0
 8008544:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <__multadd+0x84>)
 8008546:	480d      	ldr	r0, [pc, #52]	; (800857c <__multadd+0x88>)
 8008548:	21ba      	movs	r1, #186	; 0xba
 800854a:	f001 f8bf 	bl	80096cc <__assert_func>
 800854e:	6922      	ldr	r2, [r4, #16]
 8008550:	3202      	adds	r2, #2
 8008552:	f104 010c 	add.w	r1, r4, #12
 8008556:	0092      	lsls	r2, r2, #2
 8008558:	300c      	adds	r0, #12
 800855a:	f001 f8a9 	bl	80096b0 <memcpy>
 800855e:	4621      	mov	r1, r4
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff ffa5 	bl	80084b0 <_Bfree>
 8008566:	4644      	mov	r4, r8
 8008568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800856c:	3501      	adds	r5, #1
 800856e:	615e      	str	r6, [r3, #20]
 8008570:	6125      	str	r5, [r4, #16]
 8008572:	4620      	mov	r0, r4
 8008574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008578:	0802faea 	.word	0x0802faea
 800857c:	0802fafb 	.word	0x0802fafb

08008580 <__hi0bits>:
 8008580:	0c03      	lsrs	r3, r0, #16
 8008582:	041b      	lsls	r3, r3, #16
 8008584:	b9d3      	cbnz	r3, 80085bc <__hi0bits+0x3c>
 8008586:	0400      	lsls	r0, r0, #16
 8008588:	2310      	movs	r3, #16
 800858a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800858e:	bf04      	itt	eq
 8008590:	0200      	lsleq	r0, r0, #8
 8008592:	3308      	addeq	r3, #8
 8008594:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008598:	bf04      	itt	eq
 800859a:	0100      	lsleq	r0, r0, #4
 800859c:	3304      	addeq	r3, #4
 800859e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085a2:	bf04      	itt	eq
 80085a4:	0080      	lsleq	r0, r0, #2
 80085a6:	3302      	addeq	r3, #2
 80085a8:	2800      	cmp	r0, #0
 80085aa:	db05      	blt.n	80085b8 <__hi0bits+0x38>
 80085ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085b0:	f103 0301 	add.w	r3, r3, #1
 80085b4:	bf08      	it	eq
 80085b6:	2320      	moveq	r3, #32
 80085b8:	4618      	mov	r0, r3
 80085ba:	4770      	bx	lr
 80085bc:	2300      	movs	r3, #0
 80085be:	e7e4      	b.n	800858a <__hi0bits+0xa>

080085c0 <__lo0bits>:
 80085c0:	6803      	ldr	r3, [r0, #0]
 80085c2:	f013 0207 	ands.w	r2, r3, #7
 80085c6:	d00c      	beq.n	80085e2 <__lo0bits+0x22>
 80085c8:	07d9      	lsls	r1, r3, #31
 80085ca:	d422      	bmi.n	8008612 <__lo0bits+0x52>
 80085cc:	079a      	lsls	r2, r3, #30
 80085ce:	bf49      	itett	mi
 80085d0:	085b      	lsrmi	r3, r3, #1
 80085d2:	089b      	lsrpl	r3, r3, #2
 80085d4:	6003      	strmi	r3, [r0, #0]
 80085d6:	2201      	movmi	r2, #1
 80085d8:	bf5c      	itt	pl
 80085da:	6003      	strpl	r3, [r0, #0]
 80085dc:	2202      	movpl	r2, #2
 80085de:	4610      	mov	r0, r2
 80085e0:	4770      	bx	lr
 80085e2:	b299      	uxth	r1, r3
 80085e4:	b909      	cbnz	r1, 80085ea <__lo0bits+0x2a>
 80085e6:	0c1b      	lsrs	r3, r3, #16
 80085e8:	2210      	movs	r2, #16
 80085ea:	b2d9      	uxtb	r1, r3
 80085ec:	b909      	cbnz	r1, 80085f2 <__lo0bits+0x32>
 80085ee:	3208      	adds	r2, #8
 80085f0:	0a1b      	lsrs	r3, r3, #8
 80085f2:	0719      	lsls	r1, r3, #28
 80085f4:	bf04      	itt	eq
 80085f6:	091b      	lsreq	r3, r3, #4
 80085f8:	3204      	addeq	r2, #4
 80085fa:	0799      	lsls	r1, r3, #30
 80085fc:	bf04      	itt	eq
 80085fe:	089b      	lsreq	r3, r3, #2
 8008600:	3202      	addeq	r2, #2
 8008602:	07d9      	lsls	r1, r3, #31
 8008604:	d403      	bmi.n	800860e <__lo0bits+0x4e>
 8008606:	085b      	lsrs	r3, r3, #1
 8008608:	f102 0201 	add.w	r2, r2, #1
 800860c:	d003      	beq.n	8008616 <__lo0bits+0x56>
 800860e:	6003      	str	r3, [r0, #0]
 8008610:	e7e5      	b.n	80085de <__lo0bits+0x1e>
 8008612:	2200      	movs	r2, #0
 8008614:	e7e3      	b.n	80085de <__lo0bits+0x1e>
 8008616:	2220      	movs	r2, #32
 8008618:	e7e1      	b.n	80085de <__lo0bits+0x1e>
	...

0800861c <__i2b>:
 800861c:	b510      	push	{r4, lr}
 800861e:	460c      	mov	r4, r1
 8008620:	2101      	movs	r1, #1
 8008622:	f7ff ff05 	bl	8008430 <_Balloc>
 8008626:	4602      	mov	r2, r0
 8008628:	b928      	cbnz	r0, 8008636 <__i2b+0x1a>
 800862a:	4b05      	ldr	r3, [pc, #20]	; (8008640 <__i2b+0x24>)
 800862c:	4805      	ldr	r0, [pc, #20]	; (8008644 <__i2b+0x28>)
 800862e:	f240 1145 	movw	r1, #325	; 0x145
 8008632:	f001 f84b 	bl	80096cc <__assert_func>
 8008636:	2301      	movs	r3, #1
 8008638:	6144      	str	r4, [r0, #20]
 800863a:	6103      	str	r3, [r0, #16]
 800863c:	bd10      	pop	{r4, pc}
 800863e:	bf00      	nop
 8008640:	0802faea 	.word	0x0802faea
 8008644:	0802fafb 	.word	0x0802fafb

08008648 <__multiply>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	4691      	mov	r9, r2
 800864e:	690a      	ldr	r2, [r1, #16]
 8008650:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008654:	429a      	cmp	r2, r3
 8008656:	bfb8      	it	lt
 8008658:	460b      	movlt	r3, r1
 800865a:	460c      	mov	r4, r1
 800865c:	bfbc      	itt	lt
 800865e:	464c      	movlt	r4, r9
 8008660:	4699      	movlt	r9, r3
 8008662:	6927      	ldr	r7, [r4, #16]
 8008664:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008668:	68a3      	ldr	r3, [r4, #8]
 800866a:	6861      	ldr	r1, [r4, #4]
 800866c:	eb07 060a 	add.w	r6, r7, sl
 8008670:	42b3      	cmp	r3, r6
 8008672:	b085      	sub	sp, #20
 8008674:	bfb8      	it	lt
 8008676:	3101      	addlt	r1, #1
 8008678:	f7ff feda 	bl	8008430 <_Balloc>
 800867c:	b930      	cbnz	r0, 800868c <__multiply+0x44>
 800867e:	4602      	mov	r2, r0
 8008680:	4b44      	ldr	r3, [pc, #272]	; (8008794 <__multiply+0x14c>)
 8008682:	4845      	ldr	r0, [pc, #276]	; (8008798 <__multiply+0x150>)
 8008684:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008688:	f001 f820 	bl	80096cc <__assert_func>
 800868c:	f100 0514 	add.w	r5, r0, #20
 8008690:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008694:	462b      	mov	r3, r5
 8008696:	2200      	movs	r2, #0
 8008698:	4543      	cmp	r3, r8
 800869a:	d321      	bcc.n	80086e0 <__multiply+0x98>
 800869c:	f104 0314 	add.w	r3, r4, #20
 80086a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086a4:	f109 0314 	add.w	r3, r9, #20
 80086a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086ac:	9202      	str	r2, [sp, #8]
 80086ae:	1b3a      	subs	r2, r7, r4
 80086b0:	3a15      	subs	r2, #21
 80086b2:	f022 0203 	bic.w	r2, r2, #3
 80086b6:	3204      	adds	r2, #4
 80086b8:	f104 0115 	add.w	r1, r4, #21
 80086bc:	428f      	cmp	r7, r1
 80086be:	bf38      	it	cc
 80086c0:	2204      	movcc	r2, #4
 80086c2:	9201      	str	r2, [sp, #4]
 80086c4:	9a02      	ldr	r2, [sp, #8]
 80086c6:	9303      	str	r3, [sp, #12]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d80c      	bhi.n	80086e6 <__multiply+0x9e>
 80086cc:	2e00      	cmp	r6, #0
 80086ce:	dd03      	ble.n	80086d8 <__multiply+0x90>
 80086d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d05b      	beq.n	8008790 <__multiply+0x148>
 80086d8:	6106      	str	r6, [r0, #16]
 80086da:	b005      	add	sp, #20
 80086dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e0:	f843 2b04 	str.w	r2, [r3], #4
 80086e4:	e7d8      	b.n	8008698 <__multiply+0x50>
 80086e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80086ea:	f1ba 0f00 	cmp.w	sl, #0
 80086ee:	d024      	beq.n	800873a <__multiply+0xf2>
 80086f0:	f104 0e14 	add.w	lr, r4, #20
 80086f4:	46a9      	mov	r9, r5
 80086f6:	f04f 0c00 	mov.w	ip, #0
 80086fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80086fe:	f8d9 1000 	ldr.w	r1, [r9]
 8008702:	fa1f fb82 	uxth.w	fp, r2
 8008706:	b289      	uxth	r1, r1
 8008708:	fb0a 110b 	mla	r1, sl, fp, r1
 800870c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008710:	f8d9 2000 	ldr.w	r2, [r9]
 8008714:	4461      	add	r1, ip
 8008716:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800871a:	fb0a c20b 	mla	r2, sl, fp, ip
 800871e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008722:	b289      	uxth	r1, r1
 8008724:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008728:	4577      	cmp	r7, lr
 800872a:	f849 1b04 	str.w	r1, [r9], #4
 800872e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008732:	d8e2      	bhi.n	80086fa <__multiply+0xb2>
 8008734:	9a01      	ldr	r2, [sp, #4]
 8008736:	f845 c002 	str.w	ip, [r5, r2]
 800873a:	9a03      	ldr	r2, [sp, #12]
 800873c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008740:	3304      	adds	r3, #4
 8008742:	f1b9 0f00 	cmp.w	r9, #0
 8008746:	d021      	beq.n	800878c <__multiply+0x144>
 8008748:	6829      	ldr	r1, [r5, #0]
 800874a:	f104 0c14 	add.w	ip, r4, #20
 800874e:	46ae      	mov	lr, r5
 8008750:	f04f 0a00 	mov.w	sl, #0
 8008754:	f8bc b000 	ldrh.w	fp, [ip]
 8008758:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800875c:	fb09 220b 	mla	r2, r9, fp, r2
 8008760:	4452      	add	r2, sl
 8008762:	b289      	uxth	r1, r1
 8008764:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008768:	f84e 1b04 	str.w	r1, [lr], #4
 800876c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008770:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008774:	f8be 1000 	ldrh.w	r1, [lr]
 8008778:	fb09 110a 	mla	r1, r9, sl, r1
 800877c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008780:	4567      	cmp	r7, ip
 8008782:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008786:	d8e5      	bhi.n	8008754 <__multiply+0x10c>
 8008788:	9a01      	ldr	r2, [sp, #4]
 800878a:	50a9      	str	r1, [r5, r2]
 800878c:	3504      	adds	r5, #4
 800878e:	e799      	b.n	80086c4 <__multiply+0x7c>
 8008790:	3e01      	subs	r6, #1
 8008792:	e79b      	b.n	80086cc <__multiply+0x84>
 8008794:	0802faea 	.word	0x0802faea
 8008798:	0802fafb 	.word	0x0802fafb

0800879c <__pow5mult>:
 800879c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087a0:	4615      	mov	r5, r2
 80087a2:	f012 0203 	ands.w	r2, r2, #3
 80087a6:	4606      	mov	r6, r0
 80087a8:	460f      	mov	r7, r1
 80087aa:	d007      	beq.n	80087bc <__pow5mult+0x20>
 80087ac:	4c25      	ldr	r4, [pc, #148]	; (8008844 <__pow5mult+0xa8>)
 80087ae:	3a01      	subs	r2, #1
 80087b0:	2300      	movs	r3, #0
 80087b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087b6:	f7ff fe9d 	bl	80084f4 <__multadd>
 80087ba:	4607      	mov	r7, r0
 80087bc:	10ad      	asrs	r5, r5, #2
 80087be:	d03d      	beq.n	800883c <__pow5mult+0xa0>
 80087c0:	69f4      	ldr	r4, [r6, #28]
 80087c2:	b97c      	cbnz	r4, 80087e4 <__pow5mult+0x48>
 80087c4:	2010      	movs	r0, #16
 80087c6:	f7ff fd7f 	bl	80082c8 <malloc>
 80087ca:	4602      	mov	r2, r0
 80087cc:	61f0      	str	r0, [r6, #28]
 80087ce:	b928      	cbnz	r0, 80087dc <__pow5mult+0x40>
 80087d0:	4b1d      	ldr	r3, [pc, #116]	; (8008848 <__pow5mult+0xac>)
 80087d2:	481e      	ldr	r0, [pc, #120]	; (800884c <__pow5mult+0xb0>)
 80087d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80087d8:	f000 ff78 	bl	80096cc <__assert_func>
 80087dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087e0:	6004      	str	r4, [r0, #0]
 80087e2:	60c4      	str	r4, [r0, #12]
 80087e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80087e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087ec:	b94c      	cbnz	r4, 8008802 <__pow5mult+0x66>
 80087ee:	f240 2171 	movw	r1, #625	; 0x271
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7ff ff12 	bl	800861c <__i2b>
 80087f8:	2300      	movs	r3, #0
 80087fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80087fe:	4604      	mov	r4, r0
 8008800:	6003      	str	r3, [r0, #0]
 8008802:	f04f 0900 	mov.w	r9, #0
 8008806:	07eb      	lsls	r3, r5, #31
 8008808:	d50a      	bpl.n	8008820 <__pow5mult+0x84>
 800880a:	4639      	mov	r1, r7
 800880c:	4622      	mov	r2, r4
 800880e:	4630      	mov	r0, r6
 8008810:	f7ff ff1a 	bl	8008648 <__multiply>
 8008814:	4639      	mov	r1, r7
 8008816:	4680      	mov	r8, r0
 8008818:	4630      	mov	r0, r6
 800881a:	f7ff fe49 	bl	80084b0 <_Bfree>
 800881e:	4647      	mov	r7, r8
 8008820:	106d      	asrs	r5, r5, #1
 8008822:	d00b      	beq.n	800883c <__pow5mult+0xa0>
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	b938      	cbnz	r0, 8008838 <__pow5mult+0x9c>
 8008828:	4622      	mov	r2, r4
 800882a:	4621      	mov	r1, r4
 800882c:	4630      	mov	r0, r6
 800882e:	f7ff ff0b 	bl	8008648 <__multiply>
 8008832:	6020      	str	r0, [r4, #0]
 8008834:	f8c0 9000 	str.w	r9, [r0]
 8008838:	4604      	mov	r4, r0
 800883a:	e7e4      	b.n	8008806 <__pow5mult+0x6a>
 800883c:	4638      	mov	r0, r7
 800883e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008842:	bf00      	nop
 8008844:	0802fc48 	.word	0x0802fc48
 8008848:	0802fa7b 	.word	0x0802fa7b
 800884c:	0802fafb 	.word	0x0802fafb

08008850 <__lshift>:
 8008850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008854:	460c      	mov	r4, r1
 8008856:	6849      	ldr	r1, [r1, #4]
 8008858:	6923      	ldr	r3, [r4, #16]
 800885a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	4607      	mov	r7, r0
 8008862:	4691      	mov	r9, r2
 8008864:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008868:	f108 0601 	add.w	r6, r8, #1
 800886c:	42b3      	cmp	r3, r6
 800886e:	db0b      	blt.n	8008888 <__lshift+0x38>
 8008870:	4638      	mov	r0, r7
 8008872:	f7ff fddd 	bl	8008430 <_Balloc>
 8008876:	4605      	mov	r5, r0
 8008878:	b948      	cbnz	r0, 800888e <__lshift+0x3e>
 800887a:	4602      	mov	r2, r0
 800887c:	4b28      	ldr	r3, [pc, #160]	; (8008920 <__lshift+0xd0>)
 800887e:	4829      	ldr	r0, [pc, #164]	; (8008924 <__lshift+0xd4>)
 8008880:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008884:	f000 ff22 	bl	80096cc <__assert_func>
 8008888:	3101      	adds	r1, #1
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	e7ee      	b.n	800886c <__lshift+0x1c>
 800888e:	2300      	movs	r3, #0
 8008890:	f100 0114 	add.w	r1, r0, #20
 8008894:	f100 0210 	add.w	r2, r0, #16
 8008898:	4618      	mov	r0, r3
 800889a:	4553      	cmp	r3, sl
 800889c:	db33      	blt.n	8008906 <__lshift+0xb6>
 800889e:	6920      	ldr	r0, [r4, #16]
 80088a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088a4:	f104 0314 	add.w	r3, r4, #20
 80088a8:	f019 091f 	ands.w	r9, r9, #31
 80088ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088b4:	d02b      	beq.n	800890e <__lshift+0xbe>
 80088b6:	f1c9 0e20 	rsb	lr, r9, #32
 80088ba:	468a      	mov	sl, r1
 80088bc:	2200      	movs	r2, #0
 80088be:	6818      	ldr	r0, [r3, #0]
 80088c0:	fa00 f009 	lsl.w	r0, r0, r9
 80088c4:	4310      	orrs	r0, r2
 80088c6:	f84a 0b04 	str.w	r0, [sl], #4
 80088ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ce:	459c      	cmp	ip, r3
 80088d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80088d4:	d8f3      	bhi.n	80088be <__lshift+0x6e>
 80088d6:	ebac 0304 	sub.w	r3, ip, r4
 80088da:	3b15      	subs	r3, #21
 80088dc:	f023 0303 	bic.w	r3, r3, #3
 80088e0:	3304      	adds	r3, #4
 80088e2:	f104 0015 	add.w	r0, r4, #21
 80088e6:	4584      	cmp	ip, r0
 80088e8:	bf38      	it	cc
 80088ea:	2304      	movcc	r3, #4
 80088ec:	50ca      	str	r2, [r1, r3]
 80088ee:	b10a      	cbz	r2, 80088f4 <__lshift+0xa4>
 80088f0:	f108 0602 	add.w	r6, r8, #2
 80088f4:	3e01      	subs	r6, #1
 80088f6:	4638      	mov	r0, r7
 80088f8:	612e      	str	r6, [r5, #16]
 80088fa:	4621      	mov	r1, r4
 80088fc:	f7ff fdd8 	bl	80084b0 <_Bfree>
 8008900:	4628      	mov	r0, r5
 8008902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008906:	f842 0f04 	str.w	r0, [r2, #4]!
 800890a:	3301      	adds	r3, #1
 800890c:	e7c5      	b.n	800889a <__lshift+0x4a>
 800890e:	3904      	subs	r1, #4
 8008910:	f853 2b04 	ldr.w	r2, [r3], #4
 8008914:	f841 2f04 	str.w	r2, [r1, #4]!
 8008918:	459c      	cmp	ip, r3
 800891a:	d8f9      	bhi.n	8008910 <__lshift+0xc0>
 800891c:	e7ea      	b.n	80088f4 <__lshift+0xa4>
 800891e:	bf00      	nop
 8008920:	0802faea 	.word	0x0802faea
 8008924:	0802fafb 	.word	0x0802fafb

08008928 <__mcmp>:
 8008928:	b530      	push	{r4, r5, lr}
 800892a:	6902      	ldr	r2, [r0, #16]
 800892c:	690c      	ldr	r4, [r1, #16]
 800892e:	1b12      	subs	r2, r2, r4
 8008930:	d10e      	bne.n	8008950 <__mcmp+0x28>
 8008932:	f100 0314 	add.w	r3, r0, #20
 8008936:	3114      	adds	r1, #20
 8008938:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800893c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008940:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008944:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008948:	42a5      	cmp	r5, r4
 800894a:	d003      	beq.n	8008954 <__mcmp+0x2c>
 800894c:	d305      	bcc.n	800895a <__mcmp+0x32>
 800894e:	2201      	movs	r2, #1
 8008950:	4610      	mov	r0, r2
 8008952:	bd30      	pop	{r4, r5, pc}
 8008954:	4283      	cmp	r3, r0
 8008956:	d3f3      	bcc.n	8008940 <__mcmp+0x18>
 8008958:	e7fa      	b.n	8008950 <__mcmp+0x28>
 800895a:	f04f 32ff 	mov.w	r2, #4294967295
 800895e:	e7f7      	b.n	8008950 <__mcmp+0x28>

08008960 <__mdiff>:
 8008960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	460c      	mov	r4, r1
 8008966:	4606      	mov	r6, r0
 8008968:	4611      	mov	r1, r2
 800896a:	4620      	mov	r0, r4
 800896c:	4690      	mov	r8, r2
 800896e:	f7ff ffdb 	bl	8008928 <__mcmp>
 8008972:	1e05      	subs	r5, r0, #0
 8008974:	d110      	bne.n	8008998 <__mdiff+0x38>
 8008976:	4629      	mov	r1, r5
 8008978:	4630      	mov	r0, r6
 800897a:	f7ff fd59 	bl	8008430 <_Balloc>
 800897e:	b930      	cbnz	r0, 800898e <__mdiff+0x2e>
 8008980:	4b3a      	ldr	r3, [pc, #232]	; (8008a6c <__mdiff+0x10c>)
 8008982:	4602      	mov	r2, r0
 8008984:	f240 2137 	movw	r1, #567	; 0x237
 8008988:	4839      	ldr	r0, [pc, #228]	; (8008a70 <__mdiff+0x110>)
 800898a:	f000 fe9f 	bl	80096cc <__assert_func>
 800898e:	2301      	movs	r3, #1
 8008990:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008998:	bfa4      	itt	ge
 800899a:	4643      	movge	r3, r8
 800899c:	46a0      	movge	r8, r4
 800899e:	4630      	mov	r0, r6
 80089a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089a4:	bfa6      	itte	ge
 80089a6:	461c      	movge	r4, r3
 80089a8:	2500      	movge	r5, #0
 80089aa:	2501      	movlt	r5, #1
 80089ac:	f7ff fd40 	bl	8008430 <_Balloc>
 80089b0:	b920      	cbnz	r0, 80089bc <__mdiff+0x5c>
 80089b2:	4b2e      	ldr	r3, [pc, #184]	; (8008a6c <__mdiff+0x10c>)
 80089b4:	4602      	mov	r2, r0
 80089b6:	f240 2145 	movw	r1, #581	; 0x245
 80089ba:	e7e5      	b.n	8008988 <__mdiff+0x28>
 80089bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80089c0:	6926      	ldr	r6, [r4, #16]
 80089c2:	60c5      	str	r5, [r0, #12]
 80089c4:	f104 0914 	add.w	r9, r4, #20
 80089c8:	f108 0514 	add.w	r5, r8, #20
 80089cc:	f100 0e14 	add.w	lr, r0, #20
 80089d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80089d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80089d8:	f108 0210 	add.w	r2, r8, #16
 80089dc:	46f2      	mov	sl, lr
 80089de:	2100      	movs	r1, #0
 80089e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80089e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80089e8:	fa11 f88b 	uxtah	r8, r1, fp
 80089ec:	b299      	uxth	r1, r3
 80089ee:	0c1b      	lsrs	r3, r3, #16
 80089f0:	eba8 0801 	sub.w	r8, r8, r1
 80089f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80089f8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80089fc:	fa1f f888 	uxth.w	r8, r8
 8008a00:	1419      	asrs	r1, r3, #16
 8008a02:	454e      	cmp	r6, r9
 8008a04:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a08:	f84a 3b04 	str.w	r3, [sl], #4
 8008a0c:	d8e8      	bhi.n	80089e0 <__mdiff+0x80>
 8008a0e:	1b33      	subs	r3, r6, r4
 8008a10:	3b15      	subs	r3, #21
 8008a12:	f023 0303 	bic.w	r3, r3, #3
 8008a16:	3304      	adds	r3, #4
 8008a18:	3415      	adds	r4, #21
 8008a1a:	42a6      	cmp	r6, r4
 8008a1c:	bf38      	it	cc
 8008a1e:	2304      	movcc	r3, #4
 8008a20:	441d      	add	r5, r3
 8008a22:	4473      	add	r3, lr
 8008a24:	469e      	mov	lr, r3
 8008a26:	462e      	mov	r6, r5
 8008a28:	4566      	cmp	r6, ip
 8008a2a:	d30e      	bcc.n	8008a4a <__mdiff+0xea>
 8008a2c:	f10c 0203 	add.w	r2, ip, #3
 8008a30:	1b52      	subs	r2, r2, r5
 8008a32:	f022 0203 	bic.w	r2, r2, #3
 8008a36:	3d03      	subs	r5, #3
 8008a38:	45ac      	cmp	ip, r5
 8008a3a:	bf38      	it	cc
 8008a3c:	2200      	movcc	r2, #0
 8008a3e:	4413      	add	r3, r2
 8008a40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008a44:	b17a      	cbz	r2, 8008a66 <__mdiff+0x106>
 8008a46:	6107      	str	r7, [r0, #16]
 8008a48:	e7a4      	b.n	8008994 <__mdiff+0x34>
 8008a4a:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a4e:	fa11 f288 	uxtah	r2, r1, r8
 8008a52:	1414      	asrs	r4, r2, #16
 8008a54:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a58:	b292      	uxth	r2, r2
 8008a5a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a5e:	f84e 2b04 	str.w	r2, [lr], #4
 8008a62:	1421      	asrs	r1, r4, #16
 8008a64:	e7e0      	b.n	8008a28 <__mdiff+0xc8>
 8008a66:	3f01      	subs	r7, #1
 8008a68:	e7ea      	b.n	8008a40 <__mdiff+0xe0>
 8008a6a:	bf00      	nop
 8008a6c:	0802faea 	.word	0x0802faea
 8008a70:	0802fafb 	.word	0x0802fafb

08008a74 <__d2b>:
 8008a74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a78:	460f      	mov	r7, r1
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	ec59 8b10 	vmov	r8, r9, d0
 8008a80:	4616      	mov	r6, r2
 8008a82:	f7ff fcd5 	bl	8008430 <_Balloc>
 8008a86:	4604      	mov	r4, r0
 8008a88:	b930      	cbnz	r0, 8008a98 <__d2b+0x24>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	4b24      	ldr	r3, [pc, #144]	; (8008b20 <__d2b+0xac>)
 8008a8e:	4825      	ldr	r0, [pc, #148]	; (8008b24 <__d2b+0xb0>)
 8008a90:	f240 310f 	movw	r1, #783	; 0x30f
 8008a94:	f000 fe1a 	bl	80096cc <__assert_func>
 8008a98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008aa0:	bb2d      	cbnz	r5, 8008aee <__d2b+0x7a>
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	f1b8 0300 	subs.w	r3, r8, #0
 8008aa8:	d026      	beq.n	8008af8 <__d2b+0x84>
 8008aaa:	4668      	mov	r0, sp
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	f7ff fd87 	bl	80085c0 <__lo0bits>
 8008ab2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ab6:	b1e8      	cbz	r0, 8008af4 <__d2b+0x80>
 8008ab8:	f1c0 0320 	rsb	r3, r0, #32
 8008abc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	40c2      	lsrs	r2, r0
 8008ac4:	6163      	str	r3, [r4, #20]
 8008ac6:	9201      	str	r2, [sp, #4]
 8008ac8:	9b01      	ldr	r3, [sp, #4]
 8008aca:	61a3      	str	r3, [r4, #24]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	bf14      	ite	ne
 8008ad0:	2202      	movne	r2, #2
 8008ad2:	2201      	moveq	r2, #1
 8008ad4:	6122      	str	r2, [r4, #16]
 8008ad6:	b1bd      	cbz	r5, 8008b08 <__d2b+0x94>
 8008ad8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008adc:	4405      	add	r5, r0
 8008ade:	603d      	str	r5, [r7, #0]
 8008ae0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ae4:	6030      	str	r0, [r6, #0]
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	b003      	add	sp, #12
 8008aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008af2:	e7d6      	b.n	8008aa2 <__d2b+0x2e>
 8008af4:	6161      	str	r1, [r4, #20]
 8008af6:	e7e7      	b.n	8008ac8 <__d2b+0x54>
 8008af8:	a801      	add	r0, sp, #4
 8008afa:	f7ff fd61 	bl	80085c0 <__lo0bits>
 8008afe:	9b01      	ldr	r3, [sp, #4]
 8008b00:	6163      	str	r3, [r4, #20]
 8008b02:	3020      	adds	r0, #32
 8008b04:	2201      	movs	r2, #1
 8008b06:	e7e5      	b.n	8008ad4 <__d2b+0x60>
 8008b08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b10:	6038      	str	r0, [r7, #0]
 8008b12:	6918      	ldr	r0, [r3, #16]
 8008b14:	f7ff fd34 	bl	8008580 <__hi0bits>
 8008b18:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b1c:	e7e2      	b.n	8008ae4 <__d2b+0x70>
 8008b1e:	bf00      	nop
 8008b20:	0802faea 	.word	0x0802faea
 8008b24:	0802fafb 	.word	0x0802fafb

08008b28 <__ssputs_r>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	688e      	ldr	r6, [r1, #8]
 8008b2e:	461f      	mov	r7, r3
 8008b30:	42be      	cmp	r6, r7
 8008b32:	680b      	ldr	r3, [r1, #0]
 8008b34:	4682      	mov	sl, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	4690      	mov	r8, r2
 8008b3a:	d82c      	bhi.n	8008b96 <__ssputs_r+0x6e>
 8008b3c:	898a      	ldrh	r2, [r1, #12]
 8008b3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b42:	d026      	beq.n	8008b92 <__ssputs_r+0x6a>
 8008b44:	6965      	ldr	r5, [r4, #20]
 8008b46:	6909      	ldr	r1, [r1, #16]
 8008b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b4c:	eba3 0901 	sub.w	r9, r3, r1
 8008b50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b54:	1c7b      	adds	r3, r7, #1
 8008b56:	444b      	add	r3, r9
 8008b58:	106d      	asrs	r5, r5, #1
 8008b5a:	429d      	cmp	r5, r3
 8008b5c:	bf38      	it	cc
 8008b5e:	461d      	movcc	r5, r3
 8008b60:	0553      	lsls	r3, r2, #21
 8008b62:	d527      	bpl.n	8008bb4 <__ssputs_r+0x8c>
 8008b64:	4629      	mov	r1, r5
 8008b66:	f7ff fbd7 	bl	8008318 <_malloc_r>
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	b360      	cbz	r0, 8008bc8 <__ssputs_r+0xa0>
 8008b6e:	6921      	ldr	r1, [r4, #16]
 8008b70:	464a      	mov	r2, r9
 8008b72:	f000 fd9d 	bl	80096b0 <memcpy>
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b80:	81a3      	strh	r3, [r4, #12]
 8008b82:	6126      	str	r6, [r4, #16]
 8008b84:	6165      	str	r5, [r4, #20]
 8008b86:	444e      	add	r6, r9
 8008b88:	eba5 0509 	sub.w	r5, r5, r9
 8008b8c:	6026      	str	r6, [r4, #0]
 8008b8e:	60a5      	str	r5, [r4, #8]
 8008b90:	463e      	mov	r6, r7
 8008b92:	42be      	cmp	r6, r7
 8008b94:	d900      	bls.n	8008b98 <__ssputs_r+0x70>
 8008b96:	463e      	mov	r6, r7
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	4632      	mov	r2, r6
 8008b9c:	4641      	mov	r1, r8
 8008b9e:	f000 fd5c 	bl	800965a <memmove>
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	1b9b      	subs	r3, r3, r6
 8008ba6:	60a3      	str	r3, [r4, #8]
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	4433      	add	r3, r6
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb4:	462a      	mov	r2, r5
 8008bb6:	f000 fdcf 	bl	8009758 <_realloc_r>
 8008bba:	4606      	mov	r6, r0
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d1e0      	bne.n	8008b82 <__ssputs_r+0x5a>
 8008bc0:	6921      	ldr	r1, [r4, #16]
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	f7ff fb34 	bl	8008230 <_free_r>
 8008bc8:	230c      	movs	r3, #12
 8008bca:	f8ca 3000 	str.w	r3, [sl]
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd4:	81a3      	strh	r3, [r4, #12]
 8008bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bda:	e7e9      	b.n	8008bb0 <__ssputs_r+0x88>

08008bdc <_svfiprintf_r>:
 8008bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be0:	4698      	mov	r8, r3
 8008be2:	898b      	ldrh	r3, [r1, #12]
 8008be4:	061b      	lsls	r3, r3, #24
 8008be6:	b09d      	sub	sp, #116	; 0x74
 8008be8:	4607      	mov	r7, r0
 8008bea:	460d      	mov	r5, r1
 8008bec:	4614      	mov	r4, r2
 8008bee:	d50e      	bpl.n	8008c0e <_svfiprintf_r+0x32>
 8008bf0:	690b      	ldr	r3, [r1, #16]
 8008bf2:	b963      	cbnz	r3, 8008c0e <_svfiprintf_r+0x32>
 8008bf4:	2140      	movs	r1, #64	; 0x40
 8008bf6:	f7ff fb8f 	bl	8008318 <_malloc_r>
 8008bfa:	6028      	str	r0, [r5, #0]
 8008bfc:	6128      	str	r0, [r5, #16]
 8008bfe:	b920      	cbnz	r0, 8008c0a <_svfiprintf_r+0x2e>
 8008c00:	230c      	movs	r3, #12
 8008c02:	603b      	str	r3, [r7, #0]
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295
 8008c08:	e0d0      	b.n	8008dac <_svfiprintf_r+0x1d0>
 8008c0a:	2340      	movs	r3, #64	; 0x40
 8008c0c:	616b      	str	r3, [r5, #20]
 8008c0e:	2300      	movs	r3, #0
 8008c10:	9309      	str	r3, [sp, #36]	; 0x24
 8008c12:	2320      	movs	r3, #32
 8008c14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c1c:	2330      	movs	r3, #48	; 0x30
 8008c1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008dc4 <_svfiprintf_r+0x1e8>
 8008c22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c26:	f04f 0901 	mov.w	r9, #1
 8008c2a:	4623      	mov	r3, r4
 8008c2c:	469a      	mov	sl, r3
 8008c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c32:	b10a      	cbz	r2, 8008c38 <_svfiprintf_r+0x5c>
 8008c34:	2a25      	cmp	r2, #37	; 0x25
 8008c36:	d1f9      	bne.n	8008c2c <_svfiprintf_r+0x50>
 8008c38:	ebba 0b04 	subs.w	fp, sl, r4
 8008c3c:	d00b      	beq.n	8008c56 <_svfiprintf_r+0x7a>
 8008c3e:	465b      	mov	r3, fp
 8008c40:	4622      	mov	r2, r4
 8008c42:	4629      	mov	r1, r5
 8008c44:	4638      	mov	r0, r7
 8008c46:	f7ff ff6f 	bl	8008b28 <__ssputs_r>
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	f000 80a9 	beq.w	8008da2 <_svfiprintf_r+0x1c6>
 8008c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c52:	445a      	add	r2, fp
 8008c54:	9209      	str	r2, [sp, #36]	; 0x24
 8008c56:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 80a1 	beq.w	8008da2 <_svfiprintf_r+0x1c6>
 8008c60:	2300      	movs	r3, #0
 8008c62:	f04f 32ff 	mov.w	r2, #4294967295
 8008c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c6a:	f10a 0a01 	add.w	sl, sl, #1
 8008c6e:	9304      	str	r3, [sp, #16]
 8008c70:	9307      	str	r3, [sp, #28]
 8008c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c76:	931a      	str	r3, [sp, #104]	; 0x68
 8008c78:	4654      	mov	r4, sl
 8008c7a:	2205      	movs	r2, #5
 8008c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c80:	4850      	ldr	r0, [pc, #320]	; (8008dc4 <_svfiprintf_r+0x1e8>)
 8008c82:	f7f7 fadd 	bl	8000240 <memchr>
 8008c86:	9a04      	ldr	r2, [sp, #16]
 8008c88:	b9d8      	cbnz	r0, 8008cc2 <_svfiprintf_r+0xe6>
 8008c8a:	06d0      	lsls	r0, r2, #27
 8008c8c:	bf44      	itt	mi
 8008c8e:	2320      	movmi	r3, #32
 8008c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c94:	0711      	lsls	r1, r2, #28
 8008c96:	bf44      	itt	mi
 8008c98:	232b      	movmi	r3, #43	; 0x2b
 8008c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca4:	d015      	beq.n	8008cd2 <_svfiprintf_r+0xf6>
 8008ca6:	9a07      	ldr	r2, [sp, #28]
 8008ca8:	4654      	mov	r4, sl
 8008caa:	2000      	movs	r0, #0
 8008cac:	f04f 0c0a 	mov.w	ip, #10
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cb6:	3b30      	subs	r3, #48	; 0x30
 8008cb8:	2b09      	cmp	r3, #9
 8008cba:	d94d      	bls.n	8008d58 <_svfiprintf_r+0x17c>
 8008cbc:	b1b0      	cbz	r0, 8008cec <_svfiprintf_r+0x110>
 8008cbe:	9207      	str	r2, [sp, #28]
 8008cc0:	e014      	b.n	8008cec <_svfiprintf_r+0x110>
 8008cc2:	eba0 0308 	sub.w	r3, r0, r8
 8008cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	46a2      	mov	sl, r4
 8008cd0:	e7d2      	b.n	8008c78 <_svfiprintf_r+0x9c>
 8008cd2:	9b03      	ldr	r3, [sp, #12]
 8008cd4:	1d19      	adds	r1, r3, #4
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	9103      	str	r1, [sp, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bfbb      	ittet	lt
 8008cde:	425b      	neglt	r3, r3
 8008ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ce4:	9307      	strge	r3, [sp, #28]
 8008ce6:	9307      	strlt	r3, [sp, #28]
 8008ce8:	bfb8      	it	lt
 8008cea:	9204      	strlt	r2, [sp, #16]
 8008cec:	7823      	ldrb	r3, [r4, #0]
 8008cee:	2b2e      	cmp	r3, #46	; 0x2e
 8008cf0:	d10c      	bne.n	8008d0c <_svfiprintf_r+0x130>
 8008cf2:	7863      	ldrb	r3, [r4, #1]
 8008cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cf6:	d134      	bne.n	8008d62 <_svfiprintf_r+0x186>
 8008cf8:	9b03      	ldr	r3, [sp, #12]
 8008cfa:	1d1a      	adds	r2, r3, #4
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	9203      	str	r2, [sp, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	bfb8      	it	lt
 8008d04:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d08:	3402      	adds	r4, #2
 8008d0a:	9305      	str	r3, [sp, #20]
 8008d0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008dd4 <_svfiprintf_r+0x1f8>
 8008d10:	7821      	ldrb	r1, [r4, #0]
 8008d12:	2203      	movs	r2, #3
 8008d14:	4650      	mov	r0, sl
 8008d16:	f7f7 fa93 	bl	8000240 <memchr>
 8008d1a:	b138      	cbz	r0, 8008d2c <_svfiprintf_r+0x150>
 8008d1c:	9b04      	ldr	r3, [sp, #16]
 8008d1e:	eba0 000a 	sub.w	r0, r0, sl
 8008d22:	2240      	movs	r2, #64	; 0x40
 8008d24:	4082      	lsls	r2, r0
 8008d26:	4313      	orrs	r3, r2
 8008d28:	3401      	adds	r4, #1
 8008d2a:	9304      	str	r3, [sp, #16]
 8008d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d30:	4825      	ldr	r0, [pc, #148]	; (8008dc8 <_svfiprintf_r+0x1ec>)
 8008d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d36:	2206      	movs	r2, #6
 8008d38:	f7f7 fa82 	bl	8000240 <memchr>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d038      	beq.n	8008db2 <_svfiprintf_r+0x1d6>
 8008d40:	4b22      	ldr	r3, [pc, #136]	; (8008dcc <_svfiprintf_r+0x1f0>)
 8008d42:	bb1b      	cbnz	r3, 8008d8c <_svfiprintf_r+0x1b0>
 8008d44:	9b03      	ldr	r3, [sp, #12]
 8008d46:	3307      	adds	r3, #7
 8008d48:	f023 0307 	bic.w	r3, r3, #7
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	9303      	str	r3, [sp, #12]
 8008d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d52:	4433      	add	r3, r6
 8008d54:	9309      	str	r3, [sp, #36]	; 0x24
 8008d56:	e768      	b.n	8008c2a <_svfiprintf_r+0x4e>
 8008d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	2001      	movs	r0, #1
 8008d60:	e7a6      	b.n	8008cb0 <_svfiprintf_r+0xd4>
 8008d62:	2300      	movs	r3, #0
 8008d64:	3401      	adds	r4, #1
 8008d66:	9305      	str	r3, [sp, #20]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f04f 0c0a 	mov.w	ip, #10
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d74:	3a30      	subs	r2, #48	; 0x30
 8008d76:	2a09      	cmp	r2, #9
 8008d78:	d903      	bls.n	8008d82 <_svfiprintf_r+0x1a6>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0c6      	beq.n	8008d0c <_svfiprintf_r+0x130>
 8008d7e:	9105      	str	r1, [sp, #20]
 8008d80:	e7c4      	b.n	8008d0c <_svfiprintf_r+0x130>
 8008d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d86:	4604      	mov	r4, r0
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e7f0      	b.n	8008d6e <_svfiprintf_r+0x192>
 8008d8c:	ab03      	add	r3, sp, #12
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	462a      	mov	r2, r5
 8008d92:	4b0f      	ldr	r3, [pc, #60]	; (8008dd0 <_svfiprintf_r+0x1f4>)
 8008d94:	a904      	add	r1, sp, #16
 8008d96:	4638      	mov	r0, r7
 8008d98:	f7fd feea 	bl	8006b70 <_printf_float>
 8008d9c:	1c42      	adds	r2, r0, #1
 8008d9e:	4606      	mov	r6, r0
 8008da0:	d1d6      	bne.n	8008d50 <_svfiprintf_r+0x174>
 8008da2:	89ab      	ldrh	r3, [r5, #12]
 8008da4:	065b      	lsls	r3, r3, #25
 8008da6:	f53f af2d 	bmi.w	8008c04 <_svfiprintf_r+0x28>
 8008daa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dac:	b01d      	add	sp, #116	; 0x74
 8008dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db2:	ab03      	add	r3, sp, #12
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	462a      	mov	r2, r5
 8008db8:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <_svfiprintf_r+0x1f4>)
 8008dba:	a904      	add	r1, sp, #16
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	f7fe f95f 	bl	8007080 <_printf_i>
 8008dc2:	e7eb      	b.n	8008d9c <_svfiprintf_r+0x1c0>
 8008dc4:	0802fc54 	.word	0x0802fc54
 8008dc8:	0802fc5e 	.word	0x0802fc5e
 8008dcc:	08006b71 	.word	0x08006b71
 8008dd0:	08008b29 	.word	0x08008b29
 8008dd4:	0802fc5a 	.word	0x0802fc5a

08008dd8 <_sungetc_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	1c4b      	adds	r3, r1, #1
 8008ddc:	4614      	mov	r4, r2
 8008dde:	d103      	bne.n	8008de8 <_sungetc_r+0x10>
 8008de0:	f04f 35ff 	mov.w	r5, #4294967295
 8008de4:	4628      	mov	r0, r5
 8008de6:	bd38      	pop	{r3, r4, r5, pc}
 8008de8:	8993      	ldrh	r3, [r2, #12]
 8008dea:	f023 0320 	bic.w	r3, r3, #32
 8008dee:	8193      	strh	r3, [r2, #12]
 8008df0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008df2:	6852      	ldr	r2, [r2, #4]
 8008df4:	b2cd      	uxtb	r5, r1
 8008df6:	b18b      	cbz	r3, 8008e1c <_sungetc_r+0x44>
 8008df8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	dd08      	ble.n	8008e10 <_sungetc_r+0x38>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	1e5a      	subs	r2, r3, #1
 8008e02:	6022      	str	r2, [r4, #0]
 8008e04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008e08:	6863      	ldr	r3, [r4, #4]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	6063      	str	r3, [r4, #4]
 8008e0e:	e7e9      	b.n	8008de4 <_sungetc_r+0xc>
 8008e10:	4621      	mov	r1, r4
 8008e12:	f000 fbe8 	bl	80095e6 <__submore>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d0f1      	beq.n	8008dfe <_sungetc_r+0x26>
 8008e1a:	e7e1      	b.n	8008de0 <_sungetc_r+0x8>
 8008e1c:	6921      	ldr	r1, [r4, #16]
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	b151      	cbz	r1, 8008e38 <_sungetc_r+0x60>
 8008e22:	4299      	cmp	r1, r3
 8008e24:	d208      	bcs.n	8008e38 <_sungetc_r+0x60>
 8008e26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008e2a:	42a9      	cmp	r1, r5
 8008e2c:	d104      	bne.n	8008e38 <_sungetc_r+0x60>
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	3201      	adds	r2, #1
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	6062      	str	r2, [r4, #4]
 8008e36:	e7d5      	b.n	8008de4 <_sungetc_r+0xc>
 8008e38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e40:	6363      	str	r3, [r4, #52]	; 0x34
 8008e42:	2303      	movs	r3, #3
 8008e44:	63a3      	str	r3, [r4, #56]	; 0x38
 8008e46:	4623      	mov	r3, r4
 8008e48:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e7dc      	b.n	8008e0c <_sungetc_r+0x34>

08008e52 <__ssrefill_r>:
 8008e52:	b510      	push	{r4, lr}
 8008e54:	460c      	mov	r4, r1
 8008e56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008e58:	b169      	cbz	r1, 8008e76 <__ssrefill_r+0x24>
 8008e5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e5e:	4299      	cmp	r1, r3
 8008e60:	d001      	beq.n	8008e66 <__ssrefill_r+0x14>
 8008e62:	f7ff f9e5 	bl	8008230 <_free_r>
 8008e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e68:	6063      	str	r3, [r4, #4]
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	6360      	str	r0, [r4, #52]	; 0x34
 8008e6e:	b113      	cbz	r3, 8008e76 <__ssrefill_r+0x24>
 8008e70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	bd10      	pop	{r4, pc}
 8008e76:	6923      	ldr	r3, [r4, #16]
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6063      	str	r3, [r4, #4]
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f043 0320 	orr.w	r3, r3, #32
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8a:	e7f3      	b.n	8008e74 <__ssrefill_r+0x22>

08008e8c <__ssvfiscanf_r>:
 8008e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	460c      	mov	r4, r1
 8008e92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008e96:	2100      	movs	r1, #0
 8008e98:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008e9c:	49a6      	ldr	r1, [pc, #664]	; (8009138 <__ssvfiscanf_r+0x2ac>)
 8008e9e:	91a0      	str	r1, [sp, #640]	; 0x280
 8008ea0:	f10d 0804 	add.w	r8, sp, #4
 8008ea4:	49a5      	ldr	r1, [pc, #660]	; (800913c <__ssvfiscanf_r+0x2b0>)
 8008ea6:	4fa6      	ldr	r7, [pc, #664]	; (8009140 <__ssvfiscanf_r+0x2b4>)
 8008ea8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009144 <__ssvfiscanf_r+0x2b8>
 8008eac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	91a1      	str	r1, [sp, #644]	; 0x284
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	7813      	ldrb	r3, [r2, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 815a 	beq.w	8009172 <__ssvfiscanf_r+0x2e6>
 8008ebe:	5cf9      	ldrb	r1, [r7, r3]
 8008ec0:	f011 0108 	ands.w	r1, r1, #8
 8008ec4:	f102 0501 	add.w	r5, r2, #1
 8008ec8:	d019      	beq.n	8008efe <__ssvfiscanf_r+0x72>
 8008eca:	6863      	ldr	r3, [r4, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dd0f      	ble.n	8008ef0 <__ssvfiscanf_r+0x64>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	781a      	ldrb	r2, [r3, #0]
 8008ed4:	5cba      	ldrb	r2, [r7, r2]
 8008ed6:	0712      	lsls	r2, r2, #28
 8008ed8:	d401      	bmi.n	8008ede <__ssvfiscanf_r+0x52>
 8008eda:	462a      	mov	r2, r5
 8008edc:	e7eb      	b.n	8008eb6 <__ssvfiscanf_r+0x2a>
 8008ede:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ee0:	3201      	adds	r2, #1
 8008ee2:	9245      	str	r2, [sp, #276]	; 0x114
 8008ee4:	6862      	ldr	r2, [r4, #4]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	3a01      	subs	r2, #1
 8008eea:	6062      	str	r2, [r4, #4]
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	e7ec      	b.n	8008eca <__ssvfiscanf_r+0x3e>
 8008ef0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	4798      	blx	r3
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d0e9      	beq.n	8008ed0 <__ssvfiscanf_r+0x44>
 8008efc:	e7ed      	b.n	8008eda <__ssvfiscanf_r+0x4e>
 8008efe:	2b25      	cmp	r3, #37	; 0x25
 8008f00:	d012      	beq.n	8008f28 <__ssvfiscanf_r+0x9c>
 8008f02:	469a      	mov	sl, r3
 8008f04:	6863      	ldr	r3, [r4, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f340 8091 	ble.w	800902e <__ssvfiscanf_r+0x1a2>
 8008f0c:	6822      	ldr	r2, [r4, #0]
 8008f0e:	7813      	ldrb	r3, [r2, #0]
 8008f10:	4553      	cmp	r3, sl
 8008f12:	f040 812e 	bne.w	8009172 <__ssvfiscanf_r+0x2e6>
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008f1e:	3201      	adds	r2, #1
 8008f20:	3301      	adds	r3, #1
 8008f22:	6022      	str	r2, [r4, #0]
 8008f24:	9345      	str	r3, [sp, #276]	; 0x114
 8008f26:	e7d8      	b.n	8008eda <__ssvfiscanf_r+0x4e>
 8008f28:	9141      	str	r1, [sp, #260]	; 0x104
 8008f2a:	9143      	str	r1, [sp, #268]	; 0x10c
 8008f2c:	7853      	ldrb	r3, [r2, #1]
 8008f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f30:	bf02      	ittt	eq
 8008f32:	2310      	moveq	r3, #16
 8008f34:	1c95      	addeq	r5, r2, #2
 8008f36:	9341      	streq	r3, [sp, #260]	; 0x104
 8008f38:	220a      	movs	r2, #10
 8008f3a:	46aa      	mov	sl, r5
 8008f3c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008f40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	d91c      	bls.n	8008f82 <__ssvfiscanf_r+0xf6>
 8008f48:	487e      	ldr	r0, [pc, #504]	; (8009144 <__ssvfiscanf_r+0x2b8>)
 8008f4a:	2203      	movs	r2, #3
 8008f4c:	f7f7 f978 	bl	8000240 <memchr>
 8008f50:	b138      	cbz	r0, 8008f62 <__ssvfiscanf_r+0xd6>
 8008f52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008f54:	eba0 0009 	sub.w	r0, r0, r9
 8008f58:	2301      	movs	r3, #1
 8008f5a:	4083      	lsls	r3, r0
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	9341      	str	r3, [sp, #260]	; 0x104
 8008f60:	4655      	mov	r5, sl
 8008f62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f66:	2b78      	cmp	r3, #120	; 0x78
 8008f68:	d806      	bhi.n	8008f78 <__ssvfiscanf_r+0xec>
 8008f6a:	2b57      	cmp	r3, #87	; 0x57
 8008f6c:	d810      	bhi.n	8008f90 <__ssvfiscanf_r+0x104>
 8008f6e:	2b25      	cmp	r3, #37	; 0x25
 8008f70:	d0c7      	beq.n	8008f02 <__ssvfiscanf_r+0x76>
 8008f72:	d857      	bhi.n	8009024 <__ssvfiscanf_r+0x198>
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d065      	beq.n	8009044 <__ssvfiscanf_r+0x1b8>
 8008f78:	2303      	movs	r3, #3
 8008f7a:	9347      	str	r3, [sp, #284]	; 0x11c
 8008f7c:	230a      	movs	r3, #10
 8008f7e:	9342      	str	r3, [sp, #264]	; 0x108
 8008f80:	e076      	b.n	8009070 <__ssvfiscanf_r+0x1e4>
 8008f82:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008f84:	fb02 1103 	mla	r1, r2, r3, r1
 8008f88:	3930      	subs	r1, #48	; 0x30
 8008f8a:	9143      	str	r1, [sp, #268]	; 0x10c
 8008f8c:	4655      	mov	r5, sl
 8008f8e:	e7d4      	b.n	8008f3a <__ssvfiscanf_r+0xae>
 8008f90:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008f94:	2a20      	cmp	r2, #32
 8008f96:	d8ef      	bhi.n	8008f78 <__ssvfiscanf_r+0xec>
 8008f98:	a101      	add	r1, pc, #4	; (adr r1, 8008fa0 <__ssvfiscanf_r+0x114>)
 8008f9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f9e:	bf00      	nop
 8008fa0:	08009053 	.word	0x08009053
 8008fa4:	08008f79 	.word	0x08008f79
 8008fa8:	08008f79 	.word	0x08008f79
 8008fac:	080090b1 	.word	0x080090b1
 8008fb0:	08008f79 	.word	0x08008f79
 8008fb4:	08008f79 	.word	0x08008f79
 8008fb8:	08008f79 	.word	0x08008f79
 8008fbc:	08008f79 	.word	0x08008f79
 8008fc0:	08008f79 	.word	0x08008f79
 8008fc4:	08008f79 	.word	0x08008f79
 8008fc8:	08008f79 	.word	0x08008f79
 8008fcc:	080090c7 	.word	0x080090c7
 8008fd0:	080090ad 	.word	0x080090ad
 8008fd4:	0800902b 	.word	0x0800902b
 8008fd8:	0800902b 	.word	0x0800902b
 8008fdc:	0800902b 	.word	0x0800902b
 8008fe0:	08008f79 	.word	0x08008f79
 8008fe4:	08009069 	.word	0x08009069
 8008fe8:	08008f79 	.word	0x08008f79
 8008fec:	08008f79 	.word	0x08008f79
 8008ff0:	08008f79 	.word	0x08008f79
 8008ff4:	08008f79 	.word	0x08008f79
 8008ff8:	080090d7 	.word	0x080090d7
 8008ffc:	080090a5 	.word	0x080090a5
 8009000:	0800904b 	.word	0x0800904b
 8009004:	08008f79 	.word	0x08008f79
 8009008:	08008f79 	.word	0x08008f79
 800900c:	080090d3 	.word	0x080090d3
 8009010:	08008f79 	.word	0x08008f79
 8009014:	080090ad 	.word	0x080090ad
 8009018:	08008f79 	.word	0x08008f79
 800901c:	08008f79 	.word	0x08008f79
 8009020:	08009053 	.word	0x08009053
 8009024:	3b45      	subs	r3, #69	; 0x45
 8009026:	2b02      	cmp	r3, #2
 8009028:	d8a6      	bhi.n	8008f78 <__ssvfiscanf_r+0xec>
 800902a:	2305      	movs	r3, #5
 800902c:	e01f      	b.n	800906e <__ssvfiscanf_r+0x1e2>
 800902e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009030:	4621      	mov	r1, r4
 8009032:	4630      	mov	r0, r6
 8009034:	4798      	blx	r3
 8009036:	2800      	cmp	r0, #0
 8009038:	f43f af68 	beq.w	8008f0c <__ssvfiscanf_r+0x80>
 800903c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800903e:	2800      	cmp	r0, #0
 8009040:	f040 808d 	bne.w	800915e <__ssvfiscanf_r+0x2d2>
 8009044:	f04f 30ff 	mov.w	r0, #4294967295
 8009048:	e08f      	b.n	800916a <__ssvfiscanf_r+0x2de>
 800904a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800904c:	f042 0220 	orr.w	r2, r2, #32
 8009050:	9241      	str	r2, [sp, #260]	; 0x104
 8009052:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009058:	9241      	str	r2, [sp, #260]	; 0x104
 800905a:	2210      	movs	r2, #16
 800905c:	2b6f      	cmp	r3, #111	; 0x6f
 800905e:	9242      	str	r2, [sp, #264]	; 0x108
 8009060:	bf34      	ite	cc
 8009062:	2303      	movcc	r3, #3
 8009064:	2304      	movcs	r3, #4
 8009066:	e002      	b.n	800906e <__ssvfiscanf_r+0x1e2>
 8009068:	2300      	movs	r3, #0
 800906a:	9342      	str	r3, [sp, #264]	; 0x108
 800906c:	2303      	movs	r3, #3
 800906e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009070:	6863      	ldr	r3, [r4, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	dd3d      	ble.n	80090f2 <__ssvfiscanf_r+0x266>
 8009076:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009078:	0659      	lsls	r1, r3, #25
 800907a:	d404      	bmi.n	8009086 <__ssvfiscanf_r+0x1fa>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	781a      	ldrb	r2, [r3, #0]
 8009080:	5cba      	ldrb	r2, [r7, r2]
 8009082:	0712      	lsls	r2, r2, #28
 8009084:	d43c      	bmi.n	8009100 <__ssvfiscanf_r+0x274>
 8009086:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009088:	2b02      	cmp	r3, #2
 800908a:	dc4b      	bgt.n	8009124 <__ssvfiscanf_r+0x298>
 800908c:	466b      	mov	r3, sp
 800908e:	4622      	mov	r2, r4
 8009090:	a941      	add	r1, sp, #260	; 0x104
 8009092:	4630      	mov	r0, r6
 8009094:	f000 f872 	bl	800917c <_scanf_chars>
 8009098:	2801      	cmp	r0, #1
 800909a:	d06a      	beq.n	8009172 <__ssvfiscanf_r+0x2e6>
 800909c:	2802      	cmp	r0, #2
 800909e:	f47f af1c 	bne.w	8008eda <__ssvfiscanf_r+0x4e>
 80090a2:	e7cb      	b.n	800903c <__ssvfiscanf_r+0x1b0>
 80090a4:	2308      	movs	r3, #8
 80090a6:	9342      	str	r3, [sp, #264]	; 0x108
 80090a8:	2304      	movs	r3, #4
 80090aa:	e7e0      	b.n	800906e <__ssvfiscanf_r+0x1e2>
 80090ac:	220a      	movs	r2, #10
 80090ae:	e7d5      	b.n	800905c <__ssvfiscanf_r+0x1d0>
 80090b0:	4629      	mov	r1, r5
 80090b2:	4640      	mov	r0, r8
 80090b4:	f000 fa5e 	bl	8009574 <__sccl>
 80090b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80090ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090be:	9341      	str	r3, [sp, #260]	; 0x104
 80090c0:	4605      	mov	r5, r0
 80090c2:	2301      	movs	r3, #1
 80090c4:	e7d3      	b.n	800906e <__ssvfiscanf_r+0x1e2>
 80090c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80090c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090cc:	9341      	str	r3, [sp, #260]	; 0x104
 80090ce:	2300      	movs	r3, #0
 80090d0:	e7cd      	b.n	800906e <__ssvfiscanf_r+0x1e2>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e7cb      	b.n	800906e <__ssvfiscanf_r+0x1e2>
 80090d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80090d8:	06c3      	lsls	r3, r0, #27
 80090da:	f53f aefe 	bmi.w	8008eda <__ssvfiscanf_r+0x4e>
 80090de:	9b00      	ldr	r3, [sp, #0]
 80090e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80090e2:	1d19      	adds	r1, r3, #4
 80090e4:	9100      	str	r1, [sp, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	07c0      	lsls	r0, r0, #31
 80090ea:	bf4c      	ite	mi
 80090ec:	801a      	strhmi	r2, [r3, #0]
 80090ee:	601a      	strpl	r2, [r3, #0]
 80090f0:	e6f3      	b.n	8008eda <__ssvfiscanf_r+0x4e>
 80090f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80090f4:	4621      	mov	r1, r4
 80090f6:	4630      	mov	r0, r6
 80090f8:	4798      	blx	r3
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d0bb      	beq.n	8009076 <__ssvfiscanf_r+0x1ea>
 80090fe:	e79d      	b.n	800903c <__ssvfiscanf_r+0x1b0>
 8009100:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009102:	3201      	adds	r2, #1
 8009104:	9245      	str	r2, [sp, #276]	; 0x114
 8009106:	6862      	ldr	r2, [r4, #4]
 8009108:	3a01      	subs	r2, #1
 800910a:	2a00      	cmp	r2, #0
 800910c:	6062      	str	r2, [r4, #4]
 800910e:	dd02      	ble.n	8009116 <__ssvfiscanf_r+0x28a>
 8009110:	3301      	adds	r3, #1
 8009112:	6023      	str	r3, [r4, #0]
 8009114:	e7b2      	b.n	800907c <__ssvfiscanf_r+0x1f0>
 8009116:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009118:	4621      	mov	r1, r4
 800911a:	4630      	mov	r0, r6
 800911c:	4798      	blx	r3
 800911e:	2800      	cmp	r0, #0
 8009120:	d0ac      	beq.n	800907c <__ssvfiscanf_r+0x1f0>
 8009122:	e78b      	b.n	800903c <__ssvfiscanf_r+0x1b0>
 8009124:	2b04      	cmp	r3, #4
 8009126:	dc0f      	bgt.n	8009148 <__ssvfiscanf_r+0x2bc>
 8009128:	466b      	mov	r3, sp
 800912a:	4622      	mov	r2, r4
 800912c:	a941      	add	r1, sp, #260	; 0x104
 800912e:	4630      	mov	r0, r6
 8009130:	f000 f87e 	bl	8009230 <_scanf_i>
 8009134:	e7b0      	b.n	8009098 <__ssvfiscanf_r+0x20c>
 8009136:	bf00      	nop
 8009138:	08008dd9 	.word	0x08008dd9
 800913c:	08008e53 	.word	0x08008e53
 8009140:	0802fcc7 	.word	0x0802fcc7
 8009144:	0802fc5a 	.word	0x0802fc5a
 8009148:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <__ssvfiscanf_r+0x2ec>)
 800914a:	2b00      	cmp	r3, #0
 800914c:	f43f aec5 	beq.w	8008eda <__ssvfiscanf_r+0x4e>
 8009150:	466b      	mov	r3, sp
 8009152:	4622      	mov	r2, r4
 8009154:	a941      	add	r1, sp, #260	; 0x104
 8009156:	4630      	mov	r0, r6
 8009158:	f3af 8000 	nop.w
 800915c:	e79c      	b.n	8009098 <__ssvfiscanf_r+0x20c>
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009164:	bf18      	it	ne
 8009166:	f04f 30ff 	movne.w	r0, #4294967295
 800916a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800916e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009172:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009174:	e7f9      	b.n	800916a <__ssvfiscanf_r+0x2de>
 8009176:	bf00      	nop
 8009178:	00000000 	.word	0x00000000

0800917c <_scanf_chars>:
 800917c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009180:	4615      	mov	r5, r2
 8009182:	688a      	ldr	r2, [r1, #8]
 8009184:	4680      	mov	r8, r0
 8009186:	460c      	mov	r4, r1
 8009188:	b932      	cbnz	r2, 8009198 <_scanf_chars+0x1c>
 800918a:	698a      	ldr	r2, [r1, #24]
 800918c:	2a00      	cmp	r2, #0
 800918e:	bf0c      	ite	eq
 8009190:	2201      	moveq	r2, #1
 8009192:	f04f 32ff 	movne.w	r2, #4294967295
 8009196:	608a      	str	r2, [r1, #8]
 8009198:	6822      	ldr	r2, [r4, #0]
 800919a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800922c <_scanf_chars+0xb0>
 800919e:	06d1      	lsls	r1, r2, #27
 80091a0:	bf5f      	itttt	pl
 80091a2:	681a      	ldrpl	r2, [r3, #0]
 80091a4:	1d11      	addpl	r1, r2, #4
 80091a6:	6019      	strpl	r1, [r3, #0]
 80091a8:	6816      	ldrpl	r6, [r2, #0]
 80091aa:	2700      	movs	r7, #0
 80091ac:	69a0      	ldr	r0, [r4, #24]
 80091ae:	b188      	cbz	r0, 80091d4 <_scanf_chars+0x58>
 80091b0:	2801      	cmp	r0, #1
 80091b2:	d107      	bne.n	80091c4 <_scanf_chars+0x48>
 80091b4:	682a      	ldr	r2, [r5, #0]
 80091b6:	7811      	ldrb	r1, [r2, #0]
 80091b8:	6962      	ldr	r2, [r4, #20]
 80091ba:	5c52      	ldrb	r2, [r2, r1]
 80091bc:	b952      	cbnz	r2, 80091d4 <_scanf_chars+0x58>
 80091be:	2f00      	cmp	r7, #0
 80091c0:	d031      	beq.n	8009226 <_scanf_chars+0xaa>
 80091c2:	e022      	b.n	800920a <_scanf_chars+0x8e>
 80091c4:	2802      	cmp	r0, #2
 80091c6:	d120      	bne.n	800920a <_scanf_chars+0x8e>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80091d0:	071b      	lsls	r3, r3, #28
 80091d2:	d41a      	bmi.n	800920a <_scanf_chars+0x8e>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	06da      	lsls	r2, r3, #27
 80091d8:	bf5e      	ittt	pl
 80091da:	682b      	ldrpl	r3, [r5, #0]
 80091dc:	781b      	ldrbpl	r3, [r3, #0]
 80091de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80091e2:	682a      	ldr	r2, [r5, #0]
 80091e4:	686b      	ldr	r3, [r5, #4]
 80091e6:	3201      	adds	r2, #1
 80091e8:	602a      	str	r2, [r5, #0]
 80091ea:	68a2      	ldr	r2, [r4, #8]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	3a01      	subs	r2, #1
 80091f0:	606b      	str	r3, [r5, #4]
 80091f2:	3701      	adds	r7, #1
 80091f4:	60a2      	str	r2, [r4, #8]
 80091f6:	b142      	cbz	r2, 800920a <_scanf_chars+0x8e>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	dcd7      	bgt.n	80091ac <_scanf_chars+0x30>
 80091fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009200:	4629      	mov	r1, r5
 8009202:	4640      	mov	r0, r8
 8009204:	4798      	blx	r3
 8009206:	2800      	cmp	r0, #0
 8009208:	d0d0      	beq.n	80091ac <_scanf_chars+0x30>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	f013 0310 	ands.w	r3, r3, #16
 8009210:	d105      	bne.n	800921e <_scanf_chars+0xa2>
 8009212:	68e2      	ldr	r2, [r4, #12]
 8009214:	3201      	adds	r2, #1
 8009216:	60e2      	str	r2, [r4, #12]
 8009218:	69a2      	ldr	r2, [r4, #24]
 800921a:	b102      	cbz	r2, 800921e <_scanf_chars+0xa2>
 800921c:	7033      	strb	r3, [r6, #0]
 800921e:	6923      	ldr	r3, [r4, #16]
 8009220:	443b      	add	r3, r7
 8009222:	6123      	str	r3, [r4, #16]
 8009224:	2000      	movs	r0, #0
 8009226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800922a:	bf00      	nop
 800922c:	0802fcc7 	.word	0x0802fcc7

08009230 <_scanf_i>:
 8009230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	4698      	mov	r8, r3
 8009236:	4b74      	ldr	r3, [pc, #464]	; (8009408 <_scanf_i+0x1d8>)
 8009238:	460c      	mov	r4, r1
 800923a:	4682      	mov	sl, r0
 800923c:	4616      	mov	r6, r2
 800923e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009242:	b087      	sub	sp, #28
 8009244:	ab03      	add	r3, sp, #12
 8009246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800924a:	4b70      	ldr	r3, [pc, #448]	; (800940c <_scanf_i+0x1dc>)
 800924c:	69a1      	ldr	r1, [r4, #24]
 800924e:	4a70      	ldr	r2, [pc, #448]	; (8009410 <_scanf_i+0x1e0>)
 8009250:	2903      	cmp	r1, #3
 8009252:	bf18      	it	ne
 8009254:	461a      	movne	r2, r3
 8009256:	68a3      	ldr	r3, [r4, #8]
 8009258:	9201      	str	r2, [sp, #4]
 800925a:	1e5a      	subs	r2, r3, #1
 800925c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009260:	bf88      	it	hi
 8009262:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009266:	4627      	mov	r7, r4
 8009268:	bf82      	ittt	hi
 800926a:	eb03 0905 	addhi.w	r9, r3, r5
 800926e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009272:	60a3      	strhi	r3, [r4, #8]
 8009274:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009278:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800927c:	bf98      	it	ls
 800927e:	f04f 0900 	movls.w	r9, #0
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	463d      	mov	r5, r7
 8009286:	f04f 0b00 	mov.w	fp, #0
 800928a:	6831      	ldr	r1, [r6, #0]
 800928c:	ab03      	add	r3, sp, #12
 800928e:	7809      	ldrb	r1, [r1, #0]
 8009290:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009294:	2202      	movs	r2, #2
 8009296:	f7f6 ffd3 	bl	8000240 <memchr>
 800929a:	b328      	cbz	r0, 80092e8 <_scanf_i+0xb8>
 800929c:	f1bb 0f01 	cmp.w	fp, #1
 80092a0:	d159      	bne.n	8009356 <_scanf_i+0x126>
 80092a2:	6862      	ldr	r2, [r4, #4]
 80092a4:	b92a      	cbnz	r2, 80092b2 <_scanf_i+0x82>
 80092a6:	6822      	ldr	r2, [r4, #0]
 80092a8:	2308      	movs	r3, #8
 80092aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092ae:	6063      	str	r3, [r4, #4]
 80092b0:	6022      	str	r2, [r4, #0]
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80092b8:	6022      	str	r2, [r4, #0]
 80092ba:	68a2      	ldr	r2, [r4, #8]
 80092bc:	1e51      	subs	r1, r2, #1
 80092be:	60a1      	str	r1, [r4, #8]
 80092c0:	b192      	cbz	r2, 80092e8 <_scanf_i+0xb8>
 80092c2:	6832      	ldr	r2, [r6, #0]
 80092c4:	1c51      	adds	r1, r2, #1
 80092c6:	6031      	str	r1, [r6, #0]
 80092c8:	7812      	ldrb	r2, [r2, #0]
 80092ca:	f805 2b01 	strb.w	r2, [r5], #1
 80092ce:	6872      	ldr	r2, [r6, #4]
 80092d0:	3a01      	subs	r2, #1
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	6072      	str	r2, [r6, #4]
 80092d6:	dc07      	bgt.n	80092e8 <_scanf_i+0xb8>
 80092d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80092dc:	4631      	mov	r1, r6
 80092de:	4650      	mov	r0, sl
 80092e0:	4790      	blx	r2
 80092e2:	2800      	cmp	r0, #0
 80092e4:	f040 8085 	bne.w	80093f2 <_scanf_i+0x1c2>
 80092e8:	f10b 0b01 	add.w	fp, fp, #1
 80092ec:	f1bb 0f03 	cmp.w	fp, #3
 80092f0:	d1cb      	bne.n	800928a <_scanf_i+0x5a>
 80092f2:	6863      	ldr	r3, [r4, #4]
 80092f4:	b90b      	cbnz	r3, 80092fa <_scanf_i+0xca>
 80092f6:	230a      	movs	r3, #10
 80092f8:	6063      	str	r3, [r4, #4]
 80092fa:	6863      	ldr	r3, [r4, #4]
 80092fc:	4945      	ldr	r1, [pc, #276]	; (8009414 <_scanf_i+0x1e4>)
 80092fe:	6960      	ldr	r0, [r4, #20]
 8009300:	1ac9      	subs	r1, r1, r3
 8009302:	f000 f937 	bl	8009574 <__sccl>
 8009306:	f04f 0b00 	mov.w	fp, #0
 800930a:	68a3      	ldr	r3, [r4, #8]
 800930c:	6822      	ldr	r2, [r4, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d03d      	beq.n	800938e <_scanf_i+0x15e>
 8009312:	6831      	ldr	r1, [r6, #0]
 8009314:	6960      	ldr	r0, [r4, #20]
 8009316:	f891 c000 	ldrb.w	ip, [r1]
 800931a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800931e:	2800      	cmp	r0, #0
 8009320:	d035      	beq.n	800938e <_scanf_i+0x15e>
 8009322:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009326:	d124      	bne.n	8009372 <_scanf_i+0x142>
 8009328:	0510      	lsls	r0, r2, #20
 800932a:	d522      	bpl.n	8009372 <_scanf_i+0x142>
 800932c:	f10b 0b01 	add.w	fp, fp, #1
 8009330:	f1b9 0f00 	cmp.w	r9, #0
 8009334:	d003      	beq.n	800933e <_scanf_i+0x10e>
 8009336:	3301      	adds	r3, #1
 8009338:	f109 39ff 	add.w	r9, r9, #4294967295
 800933c:	60a3      	str	r3, [r4, #8]
 800933e:	6873      	ldr	r3, [r6, #4]
 8009340:	3b01      	subs	r3, #1
 8009342:	2b00      	cmp	r3, #0
 8009344:	6073      	str	r3, [r6, #4]
 8009346:	dd1b      	ble.n	8009380 <_scanf_i+0x150>
 8009348:	6833      	ldr	r3, [r6, #0]
 800934a:	3301      	adds	r3, #1
 800934c:	6033      	str	r3, [r6, #0]
 800934e:	68a3      	ldr	r3, [r4, #8]
 8009350:	3b01      	subs	r3, #1
 8009352:	60a3      	str	r3, [r4, #8]
 8009354:	e7d9      	b.n	800930a <_scanf_i+0xda>
 8009356:	f1bb 0f02 	cmp.w	fp, #2
 800935a:	d1ae      	bne.n	80092ba <_scanf_i+0x8a>
 800935c:	6822      	ldr	r2, [r4, #0]
 800935e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009362:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009366:	d1bf      	bne.n	80092e8 <_scanf_i+0xb8>
 8009368:	2310      	movs	r3, #16
 800936a:	6063      	str	r3, [r4, #4]
 800936c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009370:	e7a2      	b.n	80092b8 <_scanf_i+0x88>
 8009372:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009376:	6022      	str	r2, [r4, #0]
 8009378:	780b      	ldrb	r3, [r1, #0]
 800937a:	f805 3b01 	strb.w	r3, [r5], #1
 800937e:	e7de      	b.n	800933e <_scanf_i+0x10e>
 8009380:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009384:	4631      	mov	r1, r6
 8009386:	4650      	mov	r0, sl
 8009388:	4798      	blx	r3
 800938a:	2800      	cmp	r0, #0
 800938c:	d0df      	beq.n	800934e <_scanf_i+0x11e>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	05d9      	lsls	r1, r3, #23
 8009392:	d50d      	bpl.n	80093b0 <_scanf_i+0x180>
 8009394:	42bd      	cmp	r5, r7
 8009396:	d909      	bls.n	80093ac <_scanf_i+0x17c>
 8009398:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800939c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093a0:	4632      	mov	r2, r6
 80093a2:	4650      	mov	r0, sl
 80093a4:	4798      	blx	r3
 80093a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80093aa:	464d      	mov	r5, r9
 80093ac:	42bd      	cmp	r5, r7
 80093ae:	d028      	beq.n	8009402 <_scanf_i+0x1d2>
 80093b0:	6822      	ldr	r2, [r4, #0]
 80093b2:	f012 0210 	ands.w	r2, r2, #16
 80093b6:	d113      	bne.n	80093e0 <_scanf_i+0x1b0>
 80093b8:	702a      	strb	r2, [r5, #0]
 80093ba:	6863      	ldr	r3, [r4, #4]
 80093bc:	9e01      	ldr	r6, [sp, #4]
 80093be:	4639      	mov	r1, r7
 80093c0:	4650      	mov	r0, sl
 80093c2:	47b0      	blx	r6
 80093c4:	f8d8 3000 	ldr.w	r3, [r8]
 80093c8:	6821      	ldr	r1, [r4, #0]
 80093ca:	1d1a      	adds	r2, r3, #4
 80093cc:	f8c8 2000 	str.w	r2, [r8]
 80093d0:	f011 0f20 	tst.w	r1, #32
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	d00f      	beq.n	80093f8 <_scanf_i+0x1c8>
 80093d8:	6018      	str	r0, [r3, #0]
 80093da:	68e3      	ldr	r3, [r4, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	60e3      	str	r3, [r4, #12]
 80093e0:	6923      	ldr	r3, [r4, #16]
 80093e2:	1bed      	subs	r5, r5, r7
 80093e4:	445d      	add	r5, fp
 80093e6:	442b      	add	r3, r5
 80093e8:	6123      	str	r3, [r4, #16]
 80093ea:	2000      	movs	r0, #0
 80093ec:	b007      	add	sp, #28
 80093ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f2:	f04f 0b00 	mov.w	fp, #0
 80093f6:	e7ca      	b.n	800938e <_scanf_i+0x15e>
 80093f8:	07ca      	lsls	r2, r1, #31
 80093fa:	bf4c      	ite	mi
 80093fc:	8018      	strhmi	r0, [r3, #0]
 80093fe:	6018      	strpl	r0, [r3, #0]
 8009400:	e7eb      	b.n	80093da <_scanf_i+0x1aa>
 8009402:	2001      	movs	r0, #1
 8009404:	e7f2      	b.n	80093ec <_scanf_i+0x1bc>
 8009406:	bf00      	nop
 8009408:	08009fd8 	.word	0x08009fd8
 800940c:	080099a5 	.word	0x080099a5
 8009410:	080098bd 	.word	0x080098bd
 8009414:	0802fc75 	.word	0x0802fc75

08009418 <__sflush_r>:
 8009418:	898a      	ldrh	r2, [r1, #12]
 800941a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941e:	4605      	mov	r5, r0
 8009420:	0710      	lsls	r0, r2, #28
 8009422:	460c      	mov	r4, r1
 8009424:	d458      	bmi.n	80094d8 <__sflush_r+0xc0>
 8009426:	684b      	ldr	r3, [r1, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	dc05      	bgt.n	8009438 <__sflush_r+0x20>
 800942c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800942e:	2b00      	cmp	r3, #0
 8009430:	dc02      	bgt.n	8009438 <__sflush_r+0x20>
 8009432:	2000      	movs	r0, #0
 8009434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800943a:	2e00      	cmp	r6, #0
 800943c:	d0f9      	beq.n	8009432 <__sflush_r+0x1a>
 800943e:	2300      	movs	r3, #0
 8009440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009444:	682f      	ldr	r7, [r5, #0]
 8009446:	6a21      	ldr	r1, [r4, #32]
 8009448:	602b      	str	r3, [r5, #0]
 800944a:	d032      	beq.n	80094b2 <__sflush_r+0x9a>
 800944c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	075a      	lsls	r2, r3, #29
 8009452:	d505      	bpl.n	8009460 <__sflush_r+0x48>
 8009454:	6863      	ldr	r3, [r4, #4]
 8009456:	1ac0      	subs	r0, r0, r3
 8009458:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800945a:	b10b      	cbz	r3, 8009460 <__sflush_r+0x48>
 800945c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800945e:	1ac0      	subs	r0, r0, r3
 8009460:	2300      	movs	r3, #0
 8009462:	4602      	mov	r2, r0
 8009464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009466:	6a21      	ldr	r1, [r4, #32]
 8009468:	4628      	mov	r0, r5
 800946a:	47b0      	blx	r6
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	d106      	bne.n	8009480 <__sflush_r+0x68>
 8009472:	6829      	ldr	r1, [r5, #0]
 8009474:	291d      	cmp	r1, #29
 8009476:	d82b      	bhi.n	80094d0 <__sflush_r+0xb8>
 8009478:	4a29      	ldr	r2, [pc, #164]	; (8009520 <__sflush_r+0x108>)
 800947a:	410a      	asrs	r2, r1
 800947c:	07d6      	lsls	r6, r2, #31
 800947e:	d427      	bmi.n	80094d0 <__sflush_r+0xb8>
 8009480:	2200      	movs	r2, #0
 8009482:	6062      	str	r2, [r4, #4]
 8009484:	04d9      	lsls	r1, r3, #19
 8009486:	6922      	ldr	r2, [r4, #16]
 8009488:	6022      	str	r2, [r4, #0]
 800948a:	d504      	bpl.n	8009496 <__sflush_r+0x7e>
 800948c:	1c42      	adds	r2, r0, #1
 800948e:	d101      	bne.n	8009494 <__sflush_r+0x7c>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	b903      	cbnz	r3, 8009496 <__sflush_r+0x7e>
 8009494:	6560      	str	r0, [r4, #84]	; 0x54
 8009496:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009498:	602f      	str	r7, [r5, #0]
 800949a:	2900      	cmp	r1, #0
 800949c:	d0c9      	beq.n	8009432 <__sflush_r+0x1a>
 800949e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094a2:	4299      	cmp	r1, r3
 80094a4:	d002      	beq.n	80094ac <__sflush_r+0x94>
 80094a6:	4628      	mov	r0, r5
 80094a8:	f7fe fec2 	bl	8008230 <_free_r>
 80094ac:	2000      	movs	r0, #0
 80094ae:	6360      	str	r0, [r4, #52]	; 0x34
 80094b0:	e7c0      	b.n	8009434 <__sflush_r+0x1c>
 80094b2:	2301      	movs	r3, #1
 80094b4:	4628      	mov	r0, r5
 80094b6:	47b0      	blx	r6
 80094b8:	1c41      	adds	r1, r0, #1
 80094ba:	d1c8      	bne.n	800944e <__sflush_r+0x36>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0c5      	beq.n	800944e <__sflush_r+0x36>
 80094c2:	2b1d      	cmp	r3, #29
 80094c4:	d001      	beq.n	80094ca <__sflush_r+0xb2>
 80094c6:	2b16      	cmp	r3, #22
 80094c8:	d101      	bne.n	80094ce <__sflush_r+0xb6>
 80094ca:	602f      	str	r7, [r5, #0]
 80094cc:	e7b1      	b.n	8009432 <__sflush_r+0x1a>
 80094ce:	89a3      	ldrh	r3, [r4, #12]
 80094d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d4:	81a3      	strh	r3, [r4, #12]
 80094d6:	e7ad      	b.n	8009434 <__sflush_r+0x1c>
 80094d8:	690f      	ldr	r7, [r1, #16]
 80094da:	2f00      	cmp	r7, #0
 80094dc:	d0a9      	beq.n	8009432 <__sflush_r+0x1a>
 80094de:	0793      	lsls	r3, r2, #30
 80094e0:	680e      	ldr	r6, [r1, #0]
 80094e2:	bf08      	it	eq
 80094e4:	694b      	ldreq	r3, [r1, #20]
 80094e6:	600f      	str	r7, [r1, #0]
 80094e8:	bf18      	it	ne
 80094ea:	2300      	movne	r3, #0
 80094ec:	eba6 0807 	sub.w	r8, r6, r7
 80094f0:	608b      	str	r3, [r1, #8]
 80094f2:	f1b8 0f00 	cmp.w	r8, #0
 80094f6:	dd9c      	ble.n	8009432 <__sflush_r+0x1a>
 80094f8:	6a21      	ldr	r1, [r4, #32]
 80094fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094fc:	4643      	mov	r3, r8
 80094fe:	463a      	mov	r2, r7
 8009500:	4628      	mov	r0, r5
 8009502:	47b0      	blx	r6
 8009504:	2800      	cmp	r0, #0
 8009506:	dc06      	bgt.n	8009516 <__sflush_r+0xfe>
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	f04f 30ff 	mov.w	r0, #4294967295
 8009514:	e78e      	b.n	8009434 <__sflush_r+0x1c>
 8009516:	4407      	add	r7, r0
 8009518:	eba8 0800 	sub.w	r8, r8, r0
 800951c:	e7e9      	b.n	80094f2 <__sflush_r+0xda>
 800951e:	bf00      	nop
 8009520:	dfbffffe 	.word	0xdfbffffe

08009524 <_fflush_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	690b      	ldr	r3, [r1, #16]
 8009528:	4605      	mov	r5, r0
 800952a:	460c      	mov	r4, r1
 800952c:	b913      	cbnz	r3, 8009534 <_fflush_r+0x10>
 800952e:	2500      	movs	r5, #0
 8009530:	4628      	mov	r0, r5
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	b118      	cbz	r0, 800953e <_fflush_r+0x1a>
 8009536:	6a03      	ldr	r3, [r0, #32]
 8009538:	b90b      	cbnz	r3, 800953e <_fflush_r+0x1a>
 800953a:	f7fd ff3d 	bl	80073b8 <__sinit>
 800953e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0f3      	beq.n	800952e <_fflush_r+0xa>
 8009546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009548:	07d0      	lsls	r0, r2, #31
 800954a:	d404      	bmi.n	8009556 <_fflush_r+0x32>
 800954c:	0599      	lsls	r1, r3, #22
 800954e:	d402      	bmi.n	8009556 <_fflush_r+0x32>
 8009550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009552:	f7fe f875 	bl	8007640 <__retarget_lock_acquire_recursive>
 8009556:	4628      	mov	r0, r5
 8009558:	4621      	mov	r1, r4
 800955a:	f7ff ff5d 	bl	8009418 <__sflush_r>
 800955e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009560:	07da      	lsls	r2, r3, #31
 8009562:	4605      	mov	r5, r0
 8009564:	d4e4      	bmi.n	8009530 <_fflush_r+0xc>
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	059b      	lsls	r3, r3, #22
 800956a:	d4e1      	bmi.n	8009530 <_fflush_r+0xc>
 800956c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800956e:	f7fe f868 	bl	8007642 <__retarget_lock_release_recursive>
 8009572:	e7dd      	b.n	8009530 <_fflush_r+0xc>

08009574 <__sccl>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	780b      	ldrb	r3, [r1, #0]
 8009578:	4604      	mov	r4, r0
 800957a:	2b5e      	cmp	r3, #94	; 0x5e
 800957c:	bf0b      	itete	eq
 800957e:	784b      	ldrbeq	r3, [r1, #1]
 8009580:	1c4a      	addne	r2, r1, #1
 8009582:	1c8a      	addeq	r2, r1, #2
 8009584:	2100      	movne	r1, #0
 8009586:	bf08      	it	eq
 8009588:	2101      	moveq	r1, #1
 800958a:	3801      	subs	r0, #1
 800958c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009590:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009594:	42a8      	cmp	r0, r5
 8009596:	d1fb      	bne.n	8009590 <__sccl+0x1c>
 8009598:	b90b      	cbnz	r3, 800959e <__sccl+0x2a>
 800959a:	1e50      	subs	r0, r2, #1
 800959c:	bd70      	pop	{r4, r5, r6, pc}
 800959e:	f081 0101 	eor.w	r1, r1, #1
 80095a2:	54e1      	strb	r1, [r4, r3]
 80095a4:	4610      	mov	r0, r2
 80095a6:	4602      	mov	r2, r0
 80095a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80095ac:	2d2d      	cmp	r5, #45	; 0x2d
 80095ae:	d005      	beq.n	80095bc <__sccl+0x48>
 80095b0:	2d5d      	cmp	r5, #93	; 0x5d
 80095b2:	d016      	beq.n	80095e2 <__sccl+0x6e>
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	d0f1      	beq.n	800959c <__sccl+0x28>
 80095b8:	462b      	mov	r3, r5
 80095ba:	e7f2      	b.n	80095a2 <__sccl+0x2e>
 80095bc:	7846      	ldrb	r6, [r0, #1]
 80095be:	2e5d      	cmp	r6, #93	; 0x5d
 80095c0:	d0fa      	beq.n	80095b8 <__sccl+0x44>
 80095c2:	42b3      	cmp	r3, r6
 80095c4:	dcf8      	bgt.n	80095b8 <__sccl+0x44>
 80095c6:	3002      	adds	r0, #2
 80095c8:	461a      	mov	r2, r3
 80095ca:	3201      	adds	r2, #1
 80095cc:	4296      	cmp	r6, r2
 80095ce:	54a1      	strb	r1, [r4, r2]
 80095d0:	dcfb      	bgt.n	80095ca <__sccl+0x56>
 80095d2:	1af2      	subs	r2, r6, r3
 80095d4:	3a01      	subs	r2, #1
 80095d6:	1c5d      	adds	r5, r3, #1
 80095d8:	42b3      	cmp	r3, r6
 80095da:	bfa8      	it	ge
 80095dc:	2200      	movge	r2, #0
 80095de:	18ab      	adds	r3, r5, r2
 80095e0:	e7e1      	b.n	80095a6 <__sccl+0x32>
 80095e2:	4610      	mov	r0, r2
 80095e4:	e7da      	b.n	800959c <__sccl+0x28>

080095e6 <__submore>:
 80095e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ea:	460c      	mov	r4, r1
 80095ec:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80095ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095f2:	4299      	cmp	r1, r3
 80095f4:	d11d      	bne.n	8009632 <__submore+0x4c>
 80095f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80095fa:	f7fe fe8d 	bl	8008318 <_malloc_r>
 80095fe:	b918      	cbnz	r0, 8009608 <__submore+0x22>
 8009600:	f04f 30ff 	mov.w	r0, #4294967295
 8009604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800960c:	63a3      	str	r3, [r4, #56]	; 0x38
 800960e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009612:	6360      	str	r0, [r4, #52]	; 0x34
 8009614:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009618:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800961c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009620:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009624:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009628:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800962c:	6020      	str	r0, [r4, #0]
 800962e:	2000      	movs	r0, #0
 8009630:	e7e8      	b.n	8009604 <__submore+0x1e>
 8009632:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009634:	0077      	lsls	r7, r6, #1
 8009636:	463a      	mov	r2, r7
 8009638:	f000 f88e 	bl	8009758 <_realloc_r>
 800963c:	4605      	mov	r5, r0
 800963e:	2800      	cmp	r0, #0
 8009640:	d0de      	beq.n	8009600 <__submore+0x1a>
 8009642:	eb00 0806 	add.w	r8, r0, r6
 8009646:	4601      	mov	r1, r0
 8009648:	4632      	mov	r2, r6
 800964a:	4640      	mov	r0, r8
 800964c:	f000 f830 	bl	80096b0 <memcpy>
 8009650:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009654:	f8c4 8000 	str.w	r8, [r4]
 8009658:	e7e9      	b.n	800962e <__submore+0x48>

0800965a <memmove>:
 800965a:	4288      	cmp	r0, r1
 800965c:	b510      	push	{r4, lr}
 800965e:	eb01 0402 	add.w	r4, r1, r2
 8009662:	d902      	bls.n	800966a <memmove+0x10>
 8009664:	4284      	cmp	r4, r0
 8009666:	4623      	mov	r3, r4
 8009668:	d807      	bhi.n	800967a <memmove+0x20>
 800966a:	1e43      	subs	r3, r0, #1
 800966c:	42a1      	cmp	r1, r4
 800966e:	d008      	beq.n	8009682 <memmove+0x28>
 8009670:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009674:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009678:	e7f8      	b.n	800966c <memmove+0x12>
 800967a:	4402      	add	r2, r0
 800967c:	4601      	mov	r1, r0
 800967e:	428a      	cmp	r2, r1
 8009680:	d100      	bne.n	8009684 <memmove+0x2a>
 8009682:	bd10      	pop	{r4, pc}
 8009684:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009688:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800968c:	e7f7      	b.n	800967e <memmove+0x24>
	...

08009690 <_sbrk_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d06      	ldr	r5, [pc, #24]	; (80096ac <_sbrk_r+0x1c>)
 8009694:	2300      	movs	r3, #0
 8009696:	4604      	mov	r4, r0
 8009698:	4608      	mov	r0, r1
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	f7f8 f816 	bl	80016cc <_sbrk>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d102      	bne.n	80096aa <_sbrk_r+0x1a>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	b103      	cbz	r3, 80096aa <_sbrk_r+0x1a>
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	20000614 	.word	0x20000614

080096b0 <memcpy>:
 80096b0:	440a      	add	r2, r1
 80096b2:	4291      	cmp	r1, r2
 80096b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096b8:	d100      	bne.n	80096bc <memcpy+0xc>
 80096ba:	4770      	bx	lr
 80096bc:	b510      	push	{r4, lr}
 80096be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096c6:	4291      	cmp	r1, r2
 80096c8:	d1f9      	bne.n	80096be <memcpy+0xe>
 80096ca:	bd10      	pop	{r4, pc}

080096cc <__assert_func>:
 80096cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096ce:	4614      	mov	r4, r2
 80096d0:	461a      	mov	r2, r3
 80096d2:	4b09      	ldr	r3, [pc, #36]	; (80096f8 <__assert_func+0x2c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4605      	mov	r5, r0
 80096d8:	68d8      	ldr	r0, [r3, #12]
 80096da:	b14c      	cbz	r4, 80096f0 <__assert_func+0x24>
 80096dc:	4b07      	ldr	r3, [pc, #28]	; (80096fc <__assert_func+0x30>)
 80096de:	9100      	str	r1, [sp, #0]
 80096e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096e4:	4906      	ldr	r1, [pc, #24]	; (8009700 <__assert_func+0x34>)
 80096e6:	462b      	mov	r3, r5
 80096e8:	f000 f96c 	bl	80099c4 <fiprintf>
 80096ec:	f000 f97c 	bl	80099e8 <abort>
 80096f0:	4b04      	ldr	r3, [pc, #16]	; (8009704 <__assert_func+0x38>)
 80096f2:	461c      	mov	r4, r3
 80096f4:	e7f3      	b.n	80096de <__assert_func+0x12>
 80096f6:	bf00      	nop
 80096f8:	20000068 	.word	0x20000068
 80096fc:	0802fc8a 	.word	0x0802fc8a
 8009700:	0802fc97 	.word	0x0802fc97
 8009704:	0802fcc5 	.word	0x0802fcc5

08009708 <_calloc_r>:
 8009708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800970a:	fba1 2402 	umull	r2, r4, r1, r2
 800970e:	b94c      	cbnz	r4, 8009724 <_calloc_r+0x1c>
 8009710:	4611      	mov	r1, r2
 8009712:	9201      	str	r2, [sp, #4]
 8009714:	f7fe fe00 	bl	8008318 <_malloc_r>
 8009718:	9a01      	ldr	r2, [sp, #4]
 800971a:	4605      	mov	r5, r0
 800971c:	b930      	cbnz	r0, 800972c <_calloc_r+0x24>
 800971e:	4628      	mov	r0, r5
 8009720:	b003      	add	sp, #12
 8009722:	bd30      	pop	{r4, r5, pc}
 8009724:	220c      	movs	r2, #12
 8009726:	6002      	str	r2, [r0, #0]
 8009728:	2500      	movs	r5, #0
 800972a:	e7f8      	b.n	800971e <_calloc_r+0x16>
 800972c:	4621      	mov	r1, r4
 800972e:	f7fd ff0a 	bl	8007546 <memset>
 8009732:	e7f4      	b.n	800971e <_calloc_r+0x16>

08009734 <__ascii_mbtowc>:
 8009734:	b082      	sub	sp, #8
 8009736:	b901      	cbnz	r1, 800973a <__ascii_mbtowc+0x6>
 8009738:	a901      	add	r1, sp, #4
 800973a:	b142      	cbz	r2, 800974e <__ascii_mbtowc+0x1a>
 800973c:	b14b      	cbz	r3, 8009752 <__ascii_mbtowc+0x1e>
 800973e:	7813      	ldrb	r3, [r2, #0]
 8009740:	600b      	str	r3, [r1, #0]
 8009742:	7812      	ldrb	r2, [r2, #0]
 8009744:	1e10      	subs	r0, r2, #0
 8009746:	bf18      	it	ne
 8009748:	2001      	movne	r0, #1
 800974a:	b002      	add	sp, #8
 800974c:	4770      	bx	lr
 800974e:	4610      	mov	r0, r2
 8009750:	e7fb      	b.n	800974a <__ascii_mbtowc+0x16>
 8009752:	f06f 0001 	mvn.w	r0, #1
 8009756:	e7f8      	b.n	800974a <__ascii_mbtowc+0x16>

08009758 <_realloc_r>:
 8009758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800975c:	4680      	mov	r8, r0
 800975e:	4614      	mov	r4, r2
 8009760:	460e      	mov	r6, r1
 8009762:	b921      	cbnz	r1, 800976e <_realloc_r+0x16>
 8009764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009768:	4611      	mov	r1, r2
 800976a:	f7fe bdd5 	b.w	8008318 <_malloc_r>
 800976e:	b92a      	cbnz	r2, 800977c <_realloc_r+0x24>
 8009770:	f7fe fd5e 	bl	8008230 <_free_r>
 8009774:	4625      	mov	r5, r4
 8009776:	4628      	mov	r0, r5
 8009778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800977c:	f000 f93b 	bl	80099f6 <_malloc_usable_size_r>
 8009780:	4284      	cmp	r4, r0
 8009782:	4607      	mov	r7, r0
 8009784:	d802      	bhi.n	800978c <_realloc_r+0x34>
 8009786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800978a:	d812      	bhi.n	80097b2 <_realloc_r+0x5a>
 800978c:	4621      	mov	r1, r4
 800978e:	4640      	mov	r0, r8
 8009790:	f7fe fdc2 	bl	8008318 <_malloc_r>
 8009794:	4605      	mov	r5, r0
 8009796:	2800      	cmp	r0, #0
 8009798:	d0ed      	beq.n	8009776 <_realloc_r+0x1e>
 800979a:	42bc      	cmp	r4, r7
 800979c:	4622      	mov	r2, r4
 800979e:	4631      	mov	r1, r6
 80097a0:	bf28      	it	cs
 80097a2:	463a      	movcs	r2, r7
 80097a4:	f7ff ff84 	bl	80096b0 <memcpy>
 80097a8:	4631      	mov	r1, r6
 80097aa:	4640      	mov	r0, r8
 80097ac:	f7fe fd40 	bl	8008230 <_free_r>
 80097b0:	e7e1      	b.n	8009776 <_realloc_r+0x1e>
 80097b2:	4635      	mov	r5, r6
 80097b4:	e7df      	b.n	8009776 <_realloc_r+0x1e>
	...

080097b8 <_strtol_l.constprop.0>:
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097be:	d001      	beq.n	80097c4 <_strtol_l.constprop.0+0xc>
 80097c0:	2b24      	cmp	r3, #36	; 0x24
 80097c2:	d906      	bls.n	80097d2 <_strtol_l.constprop.0+0x1a>
 80097c4:	f7fd ff12 	bl	80075ec <__errno>
 80097c8:	2316      	movs	r3, #22
 80097ca:	6003      	str	r3, [r0, #0]
 80097cc:	2000      	movs	r0, #0
 80097ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80098b8 <_strtol_l.constprop.0+0x100>
 80097d6:	460d      	mov	r5, r1
 80097d8:	462e      	mov	r6, r5
 80097da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097de:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80097e2:	f017 0708 	ands.w	r7, r7, #8
 80097e6:	d1f7      	bne.n	80097d8 <_strtol_l.constprop.0+0x20>
 80097e8:	2c2d      	cmp	r4, #45	; 0x2d
 80097ea:	d132      	bne.n	8009852 <_strtol_l.constprop.0+0x9a>
 80097ec:	782c      	ldrb	r4, [r5, #0]
 80097ee:	2701      	movs	r7, #1
 80097f0:	1cb5      	adds	r5, r6, #2
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d05b      	beq.n	80098ae <_strtol_l.constprop.0+0xf6>
 80097f6:	2b10      	cmp	r3, #16
 80097f8:	d109      	bne.n	800980e <_strtol_l.constprop.0+0x56>
 80097fa:	2c30      	cmp	r4, #48	; 0x30
 80097fc:	d107      	bne.n	800980e <_strtol_l.constprop.0+0x56>
 80097fe:	782c      	ldrb	r4, [r5, #0]
 8009800:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009804:	2c58      	cmp	r4, #88	; 0x58
 8009806:	d14d      	bne.n	80098a4 <_strtol_l.constprop.0+0xec>
 8009808:	786c      	ldrb	r4, [r5, #1]
 800980a:	2310      	movs	r3, #16
 800980c:	3502      	adds	r5, #2
 800980e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009812:	f108 38ff 	add.w	r8, r8, #4294967295
 8009816:	f04f 0e00 	mov.w	lr, #0
 800981a:	fbb8 f9f3 	udiv	r9, r8, r3
 800981e:	4676      	mov	r6, lr
 8009820:	fb03 8a19 	mls	sl, r3, r9, r8
 8009824:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009828:	f1bc 0f09 	cmp.w	ip, #9
 800982c:	d816      	bhi.n	800985c <_strtol_l.constprop.0+0xa4>
 800982e:	4664      	mov	r4, ip
 8009830:	42a3      	cmp	r3, r4
 8009832:	dd24      	ble.n	800987e <_strtol_l.constprop.0+0xc6>
 8009834:	f1be 3fff 	cmp.w	lr, #4294967295
 8009838:	d008      	beq.n	800984c <_strtol_l.constprop.0+0x94>
 800983a:	45b1      	cmp	r9, r6
 800983c:	d31c      	bcc.n	8009878 <_strtol_l.constprop.0+0xc0>
 800983e:	d101      	bne.n	8009844 <_strtol_l.constprop.0+0x8c>
 8009840:	45a2      	cmp	sl, r4
 8009842:	db19      	blt.n	8009878 <_strtol_l.constprop.0+0xc0>
 8009844:	fb06 4603 	mla	r6, r6, r3, r4
 8009848:	f04f 0e01 	mov.w	lr, #1
 800984c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009850:	e7e8      	b.n	8009824 <_strtol_l.constprop.0+0x6c>
 8009852:	2c2b      	cmp	r4, #43	; 0x2b
 8009854:	bf04      	itt	eq
 8009856:	782c      	ldrbeq	r4, [r5, #0]
 8009858:	1cb5      	addeq	r5, r6, #2
 800985a:	e7ca      	b.n	80097f2 <_strtol_l.constprop.0+0x3a>
 800985c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009860:	f1bc 0f19 	cmp.w	ip, #25
 8009864:	d801      	bhi.n	800986a <_strtol_l.constprop.0+0xb2>
 8009866:	3c37      	subs	r4, #55	; 0x37
 8009868:	e7e2      	b.n	8009830 <_strtol_l.constprop.0+0x78>
 800986a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800986e:	f1bc 0f19 	cmp.w	ip, #25
 8009872:	d804      	bhi.n	800987e <_strtol_l.constprop.0+0xc6>
 8009874:	3c57      	subs	r4, #87	; 0x57
 8009876:	e7db      	b.n	8009830 <_strtol_l.constprop.0+0x78>
 8009878:	f04f 3eff 	mov.w	lr, #4294967295
 800987c:	e7e6      	b.n	800984c <_strtol_l.constprop.0+0x94>
 800987e:	f1be 3fff 	cmp.w	lr, #4294967295
 8009882:	d105      	bne.n	8009890 <_strtol_l.constprop.0+0xd8>
 8009884:	2322      	movs	r3, #34	; 0x22
 8009886:	6003      	str	r3, [r0, #0]
 8009888:	4646      	mov	r6, r8
 800988a:	b942      	cbnz	r2, 800989e <_strtol_l.constprop.0+0xe6>
 800988c:	4630      	mov	r0, r6
 800988e:	e79e      	b.n	80097ce <_strtol_l.constprop.0+0x16>
 8009890:	b107      	cbz	r7, 8009894 <_strtol_l.constprop.0+0xdc>
 8009892:	4276      	negs	r6, r6
 8009894:	2a00      	cmp	r2, #0
 8009896:	d0f9      	beq.n	800988c <_strtol_l.constprop.0+0xd4>
 8009898:	f1be 0f00 	cmp.w	lr, #0
 800989c:	d000      	beq.n	80098a0 <_strtol_l.constprop.0+0xe8>
 800989e:	1e69      	subs	r1, r5, #1
 80098a0:	6011      	str	r1, [r2, #0]
 80098a2:	e7f3      	b.n	800988c <_strtol_l.constprop.0+0xd4>
 80098a4:	2430      	movs	r4, #48	; 0x30
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1b1      	bne.n	800980e <_strtol_l.constprop.0+0x56>
 80098aa:	2308      	movs	r3, #8
 80098ac:	e7af      	b.n	800980e <_strtol_l.constprop.0+0x56>
 80098ae:	2c30      	cmp	r4, #48	; 0x30
 80098b0:	d0a5      	beq.n	80097fe <_strtol_l.constprop.0+0x46>
 80098b2:	230a      	movs	r3, #10
 80098b4:	e7ab      	b.n	800980e <_strtol_l.constprop.0+0x56>
 80098b6:	bf00      	nop
 80098b8:	0802fcc7 	.word	0x0802fcc7

080098bc <_strtol_r>:
 80098bc:	f7ff bf7c 	b.w	80097b8 <_strtol_l.constprop.0>

080098c0 <_strtoul_l.constprop.0>:
 80098c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098c4:	4f36      	ldr	r7, [pc, #216]	; (80099a0 <_strtoul_l.constprop.0+0xe0>)
 80098c6:	4686      	mov	lr, r0
 80098c8:	460d      	mov	r5, r1
 80098ca:	4628      	mov	r0, r5
 80098cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098d0:	5d3e      	ldrb	r6, [r7, r4]
 80098d2:	f016 0608 	ands.w	r6, r6, #8
 80098d6:	d1f8      	bne.n	80098ca <_strtoul_l.constprop.0+0xa>
 80098d8:	2c2d      	cmp	r4, #45	; 0x2d
 80098da:	d130      	bne.n	800993e <_strtoul_l.constprop.0+0x7e>
 80098dc:	782c      	ldrb	r4, [r5, #0]
 80098de:	2601      	movs	r6, #1
 80098e0:	1c85      	adds	r5, r0, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d057      	beq.n	8009996 <_strtoul_l.constprop.0+0xd6>
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d109      	bne.n	80098fe <_strtoul_l.constprop.0+0x3e>
 80098ea:	2c30      	cmp	r4, #48	; 0x30
 80098ec:	d107      	bne.n	80098fe <_strtoul_l.constprop.0+0x3e>
 80098ee:	7828      	ldrb	r0, [r5, #0]
 80098f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80098f4:	2858      	cmp	r0, #88	; 0x58
 80098f6:	d149      	bne.n	800998c <_strtoul_l.constprop.0+0xcc>
 80098f8:	786c      	ldrb	r4, [r5, #1]
 80098fa:	2310      	movs	r3, #16
 80098fc:	3502      	adds	r5, #2
 80098fe:	f04f 38ff 	mov.w	r8, #4294967295
 8009902:	2700      	movs	r7, #0
 8009904:	fbb8 f8f3 	udiv	r8, r8, r3
 8009908:	fb03 f908 	mul.w	r9, r3, r8
 800990c:	ea6f 0909 	mvn.w	r9, r9
 8009910:	4638      	mov	r0, r7
 8009912:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009916:	f1bc 0f09 	cmp.w	ip, #9
 800991a:	d815      	bhi.n	8009948 <_strtoul_l.constprop.0+0x88>
 800991c:	4664      	mov	r4, ip
 800991e:	42a3      	cmp	r3, r4
 8009920:	dd23      	ble.n	800996a <_strtoul_l.constprop.0+0xaa>
 8009922:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009926:	d007      	beq.n	8009938 <_strtoul_l.constprop.0+0x78>
 8009928:	4580      	cmp	r8, r0
 800992a:	d31b      	bcc.n	8009964 <_strtoul_l.constprop.0+0xa4>
 800992c:	d101      	bne.n	8009932 <_strtoul_l.constprop.0+0x72>
 800992e:	45a1      	cmp	r9, r4
 8009930:	db18      	blt.n	8009964 <_strtoul_l.constprop.0+0xa4>
 8009932:	fb00 4003 	mla	r0, r0, r3, r4
 8009936:	2701      	movs	r7, #1
 8009938:	f815 4b01 	ldrb.w	r4, [r5], #1
 800993c:	e7e9      	b.n	8009912 <_strtoul_l.constprop.0+0x52>
 800993e:	2c2b      	cmp	r4, #43	; 0x2b
 8009940:	bf04      	itt	eq
 8009942:	782c      	ldrbeq	r4, [r5, #0]
 8009944:	1c85      	addeq	r5, r0, #2
 8009946:	e7cc      	b.n	80098e2 <_strtoul_l.constprop.0+0x22>
 8009948:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800994c:	f1bc 0f19 	cmp.w	ip, #25
 8009950:	d801      	bhi.n	8009956 <_strtoul_l.constprop.0+0x96>
 8009952:	3c37      	subs	r4, #55	; 0x37
 8009954:	e7e3      	b.n	800991e <_strtoul_l.constprop.0+0x5e>
 8009956:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800995a:	f1bc 0f19 	cmp.w	ip, #25
 800995e:	d804      	bhi.n	800996a <_strtoul_l.constprop.0+0xaa>
 8009960:	3c57      	subs	r4, #87	; 0x57
 8009962:	e7dc      	b.n	800991e <_strtoul_l.constprop.0+0x5e>
 8009964:	f04f 37ff 	mov.w	r7, #4294967295
 8009968:	e7e6      	b.n	8009938 <_strtoul_l.constprop.0+0x78>
 800996a:	1c7b      	adds	r3, r7, #1
 800996c:	d106      	bne.n	800997c <_strtoul_l.constprop.0+0xbc>
 800996e:	2322      	movs	r3, #34	; 0x22
 8009970:	f8ce 3000 	str.w	r3, [lr]
 8009974:	4638      	mov	r0, r7
 8009976:	b932      	cbnz	r2, 8009986 <_strtoul_l.constprop.0+0xc6>
 8009978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800997c:	b106      	cbz	r6, 8009980 <_strtoul_l.constprop.0+0xc0>
 800997e:	4240      	negs	r0, r0
 8009980:	2a00      	cmp	r2, #0
 8009982:	d0f9      	beq.n	8009978 <_strtoul_l.constprop.0+0xb8>
 8009984:	b107      	cbz	r7, 8009988 <_strtoul_l.constprop.0+0xc8>
 8009986:	1e69      	subs	r1, r5, #1
 8009988:	6011      	str	r1, [r2, #0]
 800998a:	e7f5      	b.n	8009978 <_strtoul_l.constprop.0+0xb8>
 800998c:	2430      	movs	r4, #48	; 0x30
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1b5      	bne.n	80098fe <_strtoul_l.constprop.0+0x3e>
 8009992:	2308      	movs	r3, #8
 8009994:	e7b3      	b.n	80098fe <_strtoul_l.constprop.0+0x3e>
 8009996:	2c30      	cmp	r4, #48	; 0x30
 8009998:	d0a9      	beq.n	80098ee <_strtoul_l.constprop.0+0x2e>
 800999a:	230a      	movs	r3, #10
 800999c:	e7af      	b.n	80098fe <_strtoul_l.constprop.0+0x3e>
 800999e:	bf00      	nop
 80099a0:	0802fcc7 	.word	0x0802fcc7

080099a4 <_strtoul_r>:
 80099a4:	f7ff bf8c 	b.w	80098c0 <_strtoul_l.constprop.0>

080099a8 <__ascii_wctomb>:
 80099a8:	b149      	cbz	r1, 80099be <__ascii_wctomb+0x16>
 80099aa:	2aff      	cmp	r2, #255	; 0xff
 80099ac:	bf85      	ittet	hi
 80099ae:	238a      	movhi	r3, #138	; 0x8a
 80099b0:	6003      	strhi	r3, [r0, #0]
 80099b2:	700a      	strbls	r2, [r1, #0]
 80099b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80099b8:	bf98      	it	ls
 80099ba:	2001      	movls	r0, #1
 80099bc:	4770      	bx	lr
 80099be:	4608      	mov	r0, r1
 80099c0:	4770      	bx	lr
	...

080099c4 <fiprintf>:
 80099c4:	b40e      	push	{r1, r2, r3}
 80099c6:	b503      	push	{r0, r1, lr}
 80099c8:	4601      	mov	r1, r0
 80099ca:	ab03      	add	r3, sp, #12
 80099cc:	4805      	ldr	r0, [pc, #20]	; (80099e4 <fiprintf+0x20>)
 80099ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d2:	6800      	ldr	r0, [r0, #0]
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	f000 f83f 	bl	8009a58 <_vfiprintf_r>
 80099da:	b002      	add	sp, #8
 80099dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e0:	b003      	add	sp, #12
 80099e2:	4770      	bx	lr
 80099e4:	20000068 	.word	0x20000068

080099e8 <abort>:
 80099e8:	b508      	push	{r3, lr}
 80099ea:	2006      	movs	r0, #6
 80099ec:	f000 fa0c 	bl	8009e08 <raise>
 80099f0:	2001      	movs	r0, #1
 80099f2:	f7f7 fdf3 	bl	80015dc <_exit>

080099f6 <_malloc_usable_size_r>:
 80099f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fa:	1f18      	subs	r0, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	bfbc      	itt	lt
 8009a00:	580b      	ldrlt	r3, [r1, r0]
 8009a02:	18c0      	addlt	r0, r0, r3
 8009a04:	4770      	bx	lr

08009a06 <__sfputc_r>:
 8009a06:	6893      	ldr	r3, [r2, #8]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	b410      	push	{r4}
 8009a0e:	6093      	str	r3, [r2, #8]
 8009a10:	da08      	bge.n	8009a24 <__sfputc_r+0x1e>
 8009a12:	6994      	ldr	r4, [r2, #24]
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	db01      	blt.n	8009a1c <__sfputc_r+0x16>
 8009a18:	290a      	cmp	r1, #10
 8009a1a:	d103      	bne.n	8009a24 <__sfputc_r+0x1e>
 8009a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a20:	f000 b934 	b.w	8009c8c <__swbuf_r>
 8009a24:	6813      	ldr	r3, [r2, #0]
 8009a26:	1c58      	adds	r0, r3, #1
 8009a28:	6010      	str	r0, [r2, #0]
 8009a2a:	7019      	strb	r1, [r3, #0]
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <__sfputs_r>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	4606      	mov	r6, r0
 8009a38:	460f      	mov	r7, r1
 8009a3a:	4614      	mov	r4, r2
 8009a3c:	18d5      	adds	r5, r2, r3
 8009a3e:	42ac      	cmp	r4, r5
 8009a40:	d101      	bne.n	8009a46 <__sfputs_r+0x12>
 8009a42:	2000      	movs	r0, #0
 8009a44:	e007      	b.n	8009a56 <__sfputs_r+0x22>
 8009a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4a:	463a      	mov	r2, r7
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f7ff ffda 	bl	8009a06 <__sfputc_r>
 8009a52:	1c43      	adds	r3, r0, #1
 8009a54:	d1f3      	bne.n	8009a3e <__sfputs_r+0xa>
 8009a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a58 <_vfiprintf_r>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	460d      	mov	r5, r1
 8009a5e:	b09d      	sub	sp, #116	; 0x74
 8009a60:	4614      	mov	r4, r2
 8009a62:	4698      	mov	r8, r3
 8009a64:	4606      	mov	r6, r0
 8009a66:	b118      	cbz	r0, 8009a70 <_vfiprintf_r+0x18>
 8009a68:	6a03      	ldr	r3, [r0, #32]
 8009a6a:	b90b      	cbnz	r3, 8009a70 <_vfiprintf_r+0x18>
 8009a6c:	f7fd fca4 	bl	80073b8 <__sinit>
 8009a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a72:	07d9      	lsls	r1, r3, #31
 8009a74:	d405      	bmi.n	8009a82 <_vfiprintf_r+0x2a>
 8009a76:	89ab      	ldrh	r3, [r5, #12]
 8009a78:	059a      	lsls	r2, r3, #22
 8009a7a:	d402      	bmi.n	8009a82 <_vfiprintf_r+0x2a>
 8009a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a7e:	f7fd fddf 	bl	8007640 <__retarget_lock_acquire_recursive>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	071b      	lsls	r3, r3, #28
 8009a86:	d501      	bpl.n	8009a8c <_vfiprintf_r+0x34>
 8009a88:	692b      	ldr	r3, [r5, #16]
 8009a8a:	b99b      	cbnz	r3, 8009ab4 <_vfiprintf_r+0x5c>
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f000 f93a 	bl	8009d08 <__swsetup_r>
 8009a94:	b170      	cbz	r0, 8009ab4 <_vfiprintf_r+0x5c>
 8009a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a98:	07dc      	lsls	r4, r3, #31
 8009a9a:	d504      	bpl.n	8009aa6 <_vfiprintf_r+0x4e>
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	b01d      	add	sp, #116	; 0x74
 8009aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa6:	89ab      	ldrh	r3, [r5, #12]
 8009aa8:	0598      	lsls	r0, r3, #22
 8009aaa:	d4f7      	bmi.n	8009a9c <_vfiprintf_r+0x44>
 8009aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aae:	f7fd fdc8 	bl	8007642 <__retarget_lock_release_recursive>
 8009ab2:	e7f3      	b.n	8009a9c <_vfiprintf_r+0x44>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab8:	2320      	movs	r3, #32
 8009aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ac2:	2330      	movs	r3, #48	; 0x30
 8009ac4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009c78 <_vfiprintf_r+0x220>
 8009ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009acc:	f04f 0901 	mov.w	r9, #1
 8009ad0:	4623      	mov	r3, r4
 8009ad2:	469a      	mov	sl, r3
 8009ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ad8:	b10a      	cbz	r2, 8009ade <_vfiprintf_r+0x86>
 8009ada:	2a25      	cmp	r2, #37	; 0x25
 8009adc:	d1f9      	bne.n	8009ad2 <_vfiprintf_r+0x7a>
 8009ade:	ebba 0b04 	subs.w	fp, sl, r4
 8009ae2:	d00b      	beq.n	8009afc <_vfiprintf_r+0xa4>
 8009ae4:	465b      	mov	r3, fp
 8009ae6:	4622      	mov	r2, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7ff ffa2 	bl	8009a34 <__sfputs_r>
 8009af0:	3001      	adds	r0, #1
 8009af2:	f000 80a9 	beq.w	8009c48 <_vfiprintf_r+0x1f0>
 8009af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009af8:	445a      	add	r2, fp
 8009afa:	9209      	str	r2, [sp, #36]	; 0x24
 8009afc:	f89a 3000 	ldrb.w	r3, [sl]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 80a1 	beq.w	8009c48 <_vfiprintf_r+0x1f0>
 8009b06:	2300      	movs	r3, #0
 8009b08:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b10:	f10a 0a01 	add.w	sl, sl, #1
 8009b14:	9304      	str	r3, [sp, #16]
 8009b16:	9307      	str	r3, [sp, #28]
 8009b18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b1e:	4654      	mov	r4, sl
 8009b20:	2205      	movs	r2, #5
 8009b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b26:	4854      	ldr	r0, [pc, #336]	; (8009c78 <_vfiprintf_r+0x220>)
 8009b28:	f7f6 fb8a 	bl	8000240 <memchr>
 8009b2c:	9a04      	ldr	r2, [sp, #16]
 8009b2e:	b9d8      	cbnz	r0, 8009b68 <_vfiprintf_r+0x110>
 8009b30:	06d1      	lsls	r1, r2, #27
 8009b32:	bf44      	itt	mi
 8009b34:	2320      	movmi	r3, #32
 8009b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b3a:	0713      	lsls	r3, r2, #28
 8009b3c:	bf44      	itt	mi
 8009b3e:	232b      	movmi	r3, #43	; 0x2b
 8009b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b44:	f89a 3000 	ldrb.w	r3, [sl]
 8009b48:	2b2a      	cmp	r3, #42	; 0x2a
 8009b4a:	d015      	beq.n	8009b78 <_vfiprintf_r+0x120>
 8009b4c:	9a07      	ldr	r2, [sp, #28]
 8009b4e:	4654      	mov	r4, sl
 8009b50:	2000      	movs	r0, #0
 8009b52:	f04f 0c0a 	mov.w	ip, #10
 8009b56:	4621      	mov	r1, r4
 8009b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b5c:	3b30      	subs	r3, #48	; 0x30
 8009b5e:	2b09      	cmp	r3, #9
 8009b60:	d94d      	bls.n	8009bfe <_vfiprintf_r+0x1a6>
 8009b62:	b1b0      	cbz	r0, 8009b92 <_vfiprintf_r+0x13a>
 8009b64:	9207      	str	r2, [sp, #28]
 8009b66:	e014      	b.n	8009b92 <_vfiprintf_r+0x13a>
 8009b68:	eba0 0308 	sub.w	r3, r0, r8
 8009b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8009b70:	4313      	orrs	r3, r2
 8009b72:	9304      	str	r3, [sp, #16]
 8009b74:	46a2      	mov	sl, r4
 8009b76:	e7d2      	b.n	8009b1e <_vfiprintf_r+0xc6>
 8009b78:	9b03      	ldr	r3, [sp, #12]
 8009b7a:	1d19      	adds	r1, r3, #4
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	9103      	str	r1, [sp, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	bfbb      	ittet	lt
 8009b84:	425b      	neglt	r3, r3
 8009b86:	f042 0202 	orrlt.w	r2, r2, #2
 8009b8a:	9307      	strge	r3, [sp, #28]
 8009b8c:	9307      	strlt	r3, [sp, #28]
 8009b8e:	bfb8      	it	lt
 8009b90:	9204      	strlt	r2, [sp, #16]
 8009b92:	7823      	ldrb	r3, [r4, #0]
 8009b94:	2b2e      	cmp	r3, #46	; 0x2e
 8009b96:	d10c      	bne.n	8009bb2 <_vfiprintf_r+0x15a>
 8009b98:	7863      	ldrb	r3, [r4, #1]
 8009b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b9c:	d134      	bne.n	8009c08 <_vfiprintf_r+0x1b0>
 8009b9e:	9b03      	ldr	r3, [sp, #12]
 8009ba0:	1d1a      	adds	r2, r3, #4
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	9203      	str	r2, [sp, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bfb8      	it	lt
 8009baa:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bae:	3402      	adds	r4, #2
 8009bb0:	9305      	str	r3, [sp, #20]
 8009bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009c88 <_vfiprintf_r+0x230>
 8009bb6:	7821      	ldrb	r1, [r4, #0]
 8009bb8:	2203      	movs	r2, #3
 8009bba:	4650      	mov	r0, sl
 8009bbc:	f7f6 fb40 	bl	8000240 <memchr>
 8009bc0:	b138      	cbz	r0, 8009bd2 <_vfiprintf_r+0x17a>
 8009bc2:	9b04      	ldr	r3, [sp, #16]
 8009bc4:	eba0 000a 	sub.w	r0, r0, sl
 8009bc8:	2240      	movs	r2, #64	; 0x40
 8009bca:	4082      	lsls	r2, r0
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	3401      	adds	r4, #1
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd6:	4829      	ldr	r0, [pc, #164]	; (8009c7c <_vfiprintf_r+0x224>)
 8009bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bdc:	2206      	movs	r2, #6
 8009bde:	f7f6 fb2f 	bl	8000240 <memchr>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d03f      	beq.n	8009c66 <_vfiprintf_r+0x20e>
 8009be6:	4b26      	ldr	r3, [pc, #152]	; (8009c80 <_vfiprintf_r+0x228>)
 8009be8:	bb1b      	cbnz	r3, 8009c32 <_vfiprintf_r+0x1da>
 8009bea:	9b03      	ldr	r3, [sp, #12]
 8009bec:	3307      	adds	r3, #7
 8009bee:	f023 0307 	bic.w	r3, r3, #7
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf8:	443b      	add	r3, r7
 8009bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009bfc:	e768      	b.n	8009ad0 <_vfiprintf_r+0x78>
 8009bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c02:	460c      	mov	r4, r1
 8009c04:	2001      	movs	r0, #1
 8009c06:	e7a6      	b.n	8009b56 <_vfiprintf_r+0xfe>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	3401      	adds	r4, #1
 8009c0c:	9305      	str	r3, [sp, #20]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	f04f 0c0a 	mov.w	ip, #10
 8009c14:	4620      	mov	r0, r4
 8009c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c1a:	3a30      	subs	r2, #48	; 0x30
 8009c1c:	2a09      	cmp	r2, #9
 8009c1e:	d903      	bls.n	8009c28 <_vfiprintf_r+0x1d0>
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d0c6      	beq.n	8009bb2 <_vfiprintf_r+0x15a>
 8009c24:	9105      	str	r1, [sp, #20]
 8009c26:	e7c4      	b.n	8009bb2 <_vfiprintf_r+0x15a>
 8009c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e7f0      	b.n	8009c14 <_vfiprintf_r+0x1bc>
 8009c32:	ab03      	add	r3, sp, #12
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	462a      	mov	r2, r5
 8009c38:	4b12      	ldr	r3, [pc, #72]	; (8009c84 <_vfiprintf_r+0x22c>)
 8009c3a:	a904      	add	r1, sp, #16
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f7fc ff97 	bl	8006b70 <_printf_float>
 8009c42:	4607      	mov	r7, r0
 8009c44:	1c78      	adds	r0, r7, #1
 8009c46:	d1d6      	bne.n	8009bf6 <_vfiprintf_r+0x19e>
 8009c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c4a:	07d9      	lsls	r1, r3, #31
 8009c4c:	d405      	bmi.n	8009c5a <_vfiprintf_r+0x202>
 8009c4e:	89ab      	ldrh	r3, [r5, #12]
 8009c50:	059a      	lsls	r2, r3, #22
 8009c52:	d402      	bmi.n	8009c5a <_vfiprintf_r+0x202>
 8009c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c56:	f7fd fcf4 	bl	8007642 <__retarget_lock_release_recursive>
 8009c5a:	89ab      	ldrh	r3, [r5, #12]
 8009c5c:	065b      	lsls	r3, r3, #25
 8009c5e:	f53f af1d 	bmi.w	8009a9c <_vfiprintf_r+0x44>
 8009c62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c64:	e71c      	b.n	8009aa0 <_vfiprintf_r+0x48>
 8009c66:	ab03      	add	r3, sp, #12
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <_vfiprintf_r+0x22c>)
 8009c6e:	a904      	add	r1, sp, #16
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7fd fa05 	bl	8007080 <_printf_i>
 8009c76:	e7e4      	b.n	8009c42 <_vfiprintf_r+0x1ea>
 8009c78:	0802fc54 	.word	0x0802fc54
 8009c7c:	0802fc5e 	.word	0x0802fc5e
 8009c80:	08006b71 	.word	0x08006b71
 8009c84:	08009a35 	.word	0x08009a35
 8009c88:	0802fc5a 	.word	0x0802fc5a

08009c8c <__swbuf_r>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	460e      	mov	r6, r1
 8009c90:	4614      	mov	r4, r2
 8009c92:	4605      	mov	r5, r0
 8009c94:	b118      	cbz	r0, 8009c9e <__swbuf_r+0x12>
 8009c96:	6a03      	ldr	r3, [r0, #32]
 8009c98:	b90b      	cbnz	r3, 8009c9e <__swbuf_r+0x12>
 8009c9a:	f7fd fb8d 	bl	80073b8 <__sinit>
 8009c9e:	69a3      	ldr	r3, [r4, #24]
 8009ca0:	60a3      	str	r3, [r4, #8]
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	071a      	lsls	r2, r3, #28
 8009ca6:	d525      	bpl.n	8009cf4 <__swbuf_r+0x68>
 8009ca8:	6923      	ldr	r3, [r4, #16]
 8009caa:	b31b      	cbz	r3, 8009cf4 <__swbuf_r+0x68>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	6922      	ldr	r2, [r4, #16]
 8009cb0:	1a98      	subs	r0, r3, r2
 8009cb2:	6963      	ldr	r3, [r4, #20]
 8009cb4:	b2f6      	uxtb	r6, r6
 8009cb6:	4283      	cmp	r3, r0
 8009cb8:	4637      	mov	r7, r6
 8009cba:	dc04      	bgt.n	8009cc6 <__swbuf_r+0x3a>
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f7ff fc30 	bl	8009524 <_fflush_r>
 8009cc4:	b9e0      	cbnz	r0, 8009d00 <__swbuf_r+0x74>
 8009cc6:	68a3      	ldr	r3, [r4, #8]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	60a3      	str	r3, [r4, #8]
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	6022      	str	r2, [r4, #0]
 8009cd2:	701e      	strb	r6, [r3, #0]
 8009cd4:	6962      	ldr	r2, [r4, #20]
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d004      	beq.n	8009ce6 <__swbuf_r+0x5a>
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	07db      	lsls	r3, r3, #31
 8009ce0:	d506      	bpl.n	8009cf0 <__swbuf_r+0x64>
 8009ce2:	2e0a      	cmp	r6, #10
 8009ce4:	d104      	bne.n	8009cf0 <__swbuf_r+0x64>
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f7ff fc1b 	bl	8009524 <_fflush_r>
 8009cee:	b938      	cbnz	r0, 8009d00 <__swbuf_r+0x74>
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f000 f806 	bl	8009d08 <__swsetup_r>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d0d5      	beq.n	8009cac <__swbuf_r+0x20>
 8009d00:	f04f 37ff 	mov.w	r7, #4294967295
 8009d04:	e7f4      	b.n	8009cf0 <__swbuf_r+0x64>
	...

08009d08 <__swsetup_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4b2a      	ldr	r3, [pc, #168]	; (8009db4 <__swsetup_r+0xac>)
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	6818      	ldr	r0, [r3, #0]
 8009d10:	460c      	mov	r4, r1
 8009d12:	b118      	cbz	r0, 8009d1c <__swsetup_r+0x14>
 8009d14:	6a03      	ldr	r3, [r0, #32]
 8009d16:	b90b      	cbnz	r3, 8009d1c <__swsetup_r+0x14>
 8009d18:	f7fd fb4e 	bl	80073b8 <__sinit>
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d22:	0718      	lsls	r0, r3, #28
 8009d24:	d422      	bmi.n	8009d6c <__swsetup_r+0x64>
 8009d26:	06d9      	lsls	r1, r3, #27
 8009d28:	d407      	bmi.n	8009d3a <__swsetup_r+0x32>
 8009d2a:	2309      	movs	r3, #9
 8009d2c:	602b      	str	r3, [r5, #0]
 8009d2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d32:	81a3      	strh	r3, [r4, #12]
 8009d34:	f04f 30ff 	mov.w	r0, #4294967295
 8009d38:	e034      	b.n	8009da4 <__swsetup_r+0x9c>
 8009d3a:	0758      	lsls	r0, r3, #29
 8009d3c:	d512      	bpl.n	8009d64 <__swsetup_r+0x5c>
 8009d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d40:	b141      	cbz	r1, 8009d54 <__swsetup_r+0x4c>
 8009d42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d46:	4299      	cmp	r1, r3
 8009d48:	d002      	beq.n	8009d50 <__swsetup_r+0x48>
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f7fe fa70 	bl	8008230 <_free_r>
 8009d50:	2300      	movs	r3, #0
 8009d52:	6363      	str	r3, [r4, #52]	; 0x34
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d5a:	81a3      	strh	r3, [r4, #12]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	6063      	str	r3, [r4, #4]
 8009d60:	6923      	ldr	r3, [r4, #16]
 8009d62:	6023      	str	r3, [r4, #0]
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	f043 0308 	orr.w	r3, r3, #8
 8009d6a:	81a3      	strh	r3, [r4, #12]
 8009d6c:	6923      	ldr	r3, [r4, #16]
 8009d6e:	b94b      	cbnz	r3, 8009d84 <__swsetup_r+0x7c>
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d7a:	d003      	beq.n	8009d84 <__swsetup_r+0x7c>
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 f884 	bl	8009e8c <__smakebuf_r>
 8009d84:	89a0      	ldrh	r0, [r4, #12]
 8009d86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d8a:	f010 0301 	ands.w	r3, r0, #1
 8009d8e:	d00a      	beq.n	8009da6 <__swsetup_r+0x9e>
 8009d90:	2300      	movs	r3, #0
 8009d92:	60a3      	str	r3, [r4, #8]
 8009d94:	6963      	ldr	r3, [r4, #20]
 8009d96:	425b      	negs	r3, r3
 8009d98:	61a3      	str	r3, [r4, #24]
 8009d9a:	6923      	ldr	r3, [r4, #16]
 8009d9c:	b943      	cbnz	r3, 8009db0 <__swsetup_r+0xa8>
 8009d9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009da2:	d1c4      	bne.n	8009d2e <__swsetup_r+0x26>
 8009da4:	bd38      	pop	{r3, r4, r5, pc}
 8009da6:	0781      	lsls	r1, r0, #30
 8009da8:	bf58      	it	pl
 8009daa:	6963      	ldrpl	r3, [r4, #20]
 8009dac:	60a3      	str	r3, [r4, #8]
 8009dae:	e7f4      	b.n	8009d9a <__swsetup_r+0x92>
 8009db0:	2000      	movs	r0, #0
 8009db2:	e7f7      	b.n	8009da4 <__swsetup_r+0x9c>
 8009db4:	20000068 	.word	0x20000068

08009db8 <_raise_r>:
 8009db8:	291f      	cmp	r1, #31
 8009dba:	b538      	push	{r3, r4, r5, lr}
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	460d      	mov	r5, r1
 8009dc0:	d904      	bls.n	8009dcc <_raise_r+0x14>
 8009dc2:	2316      	movs	r3, #22
 8009dc4:	6003      	str	r3, [r0, #0]
 8009dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009dce:	b112      	cbz	r2, 8009dd6 <_raise_r+0x1e>
 8009dd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dd4:	b94b      	cbnz	r3, 8009dea <_raise_r+0x32>
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 f830 	bl	8009e3c <_getpid_r>
 8009ddc:	462a      	mov	r2, r5
 8009dde:	4601      	mov	r1, r0
 8009de0:	4620      	mov	r0, r4
 8009de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009de6:	f000 b817 	b.w	8009e18 <_kill_r>
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d00a      	beq.n	8009e04 <_raise_r+0x4c>
 8009dee:	1c59      	adds	r1, r3, #1
 8009df0:	d103      	bne.n	8009dfa <_raise_r+0x42>
 8009df2:	2316      	movs	r3, #22
 8009df4:	6003      	str	r3, [r0, #0]
 8009df6:	2001      	movs	r0, #1
 8009df8:	e7e7      	b.n	8009dca <_raise_r+0x12>
 8009dfa:	2400      	movs	r4, #0
 8009dfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e00:	4628      	mov	r0, r5
 8009e02:	4798      	blx	r3
 8009e04:	2000      	movs	r0, #0
 8009e06:	e7e0      	b.n	8009dca <_raise_r+0x12>

08009e08 <raise>:
 8009e08:	4b02      	ldr	r3, [pc, #8]	; (8009e14 <raise+0xc>)
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	6818      	ldr	r0, [r3, #0]
 8009e0e:	f7ff bfd3 	b.w	8009db8 <_raise_r>
 8009e12:	bf00      	nop
 8009e14:	20000068 	.word	0x20000068

08009e18 <_kill_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4d07      	ldr	r5, [pc, #28]	; (8009e38 <_kill_r+0x20>)
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4604      	mov	r4, r0
 8009e20:	4608      	mov	r0, r1
 8009e22:	4611      	mov	r1, r2
 8009e24:	602b      	str	r3, [r5, #0]
 8009e26:	f7f7 fbc9 	bl	80015bc <_kill>
 8009e2a:	1c43      	adds	r3, r0, #1
 8009e2c:	d102      	bne.n	8009e34 <_kill_r+0x1c>
 8009e2e:	682b      	ldr	r3, [r5, #0]
 8009e30:	b103      	cbz	r3, 8009e34 <_kill_r+0x1c>
 8009e32:	6023      	str	r3, [r4, #0]
 8009e34:	bd38      	pop	{r3, r4, r5, pc}
 8009e36:	bf00      	nop
 8009e38:	20000614 	.word	0x20000614

08009e3c <_getpid_r>:
 8009e3c:	f7f7 bbb6 	b.w	80015ac <_getpid>

08009e40 <__swhatbuf_r>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	460c      	mov	r4, r1
 8009e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e48:	2900      	cmp	r1, #0
 8009e4a:	b096      	sub	sp, #88	; 0x58
 8009e4c:	4615      	mov	r5, r2
 8009e4e:	461e      	mov	r6, r3
 8009e50:	da0d      	bge.n	8009e6e <__swhatbuf_r+0x2e>
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e58:	f04f 0100 	mov.w	r1, #0
 8009e5c:	bf0c      	ite	eq
 8009e5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e62:	2340      	movne	r3, #64	; 0x40
 8009e64:	2000      	movs	r0, #0
 8009e66:	6031      	str	r1, [r6, #0]
 8009e68:	602b      	str	r3, [r5, #0]
 8009e6a:	b016      	add	sp, #88	; 0x58
 8009e6c:	bd70      	pop	{r4, r5, r6, pc}
 8009e6e:	466a      	mov	r2, sp
 8009e70:	f000 f848 	bl	8009f04 <_fstat_r>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	dbec      	blt.n	8009e52 <__swhatbuf_r+0x12>
 8009e78:	9901      	ldr	r1, [sp, #4]
 8009e7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e82:	4259      	negs	r1, r3
 8009e84:	4159      	adcs	r1, r3
 8009e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e8a:	e7eb      	b.n	8009e64 <__swhatbuf_r+0x24>

08009e8c <__smakebuf_r>:
 8009e8c:	898b      	ldrh	r3, [r1, #12]
 8009e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e90:	079d      	lsls	r5, r3, #30
 8009e92:	4606      	mov	r6, r0
 8009e94:	460c      	mov	r4, r1
 8009e96:	d507      	bpl.n	8009ea8 <__smakebuf_r+0x1c>
 8009e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	6123      	str	r3, [r4, #16]
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	6163      	str	r3, [r4, #20]
 8009ea4:	b002      	add	sp, #8
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	ab01      	add	r3, sp, #4
 8009eaa:	466a      	mov	r2, sp
 8009eac:	f7ff ffc8 	bl	8009e40 <__swhatbuf_r>
 8009eb0:	9900      	ldr	r1, [sp, #0]
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	f7fe fa2f 	bl	8008318 <_malloc_r>
 8009eba:	b948      	cbnz	r0, 8009ed0 <__smakebuf_r+0x44>
 8009ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec0:	059a      	lsls	r2, r3, #22
 8009ec2:	d4ef      	bmi.n	8009ea4 <__smakebuf_r+0x18>
 8009ec4:	f023 0303 	bic.w	r3, r3, #3
 8009ec8:	f043 0302 	orr.w	r3, r3, #2
 8009ecc:	81a3      	strh	r3, [r4, #12]
 8009ece:	e7e3      	b.n	8009e98 <__smakebuf_r+0xc>
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	6020      	str	r0, [r4, #0]
 8009ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed8:	81a3      	strh	r3, [r4, #12]
 8009eda:	9b00      	ldr	r3, [sp, #0]
 8009edc:	6163      	str	r3, [r4, #20]
 8009ede:	9b01      	ldr	r3, [sp, #4]
 8009ee0:	6120      	str	r0, [r4, #16]
 8009ee2:	b15b      	cbz	r3, 8009efc <__smakebuf_r+0x70>
 8009ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f000 f81d 	bl	8009f28 <_isatty_r>
 8009eee:	b128      	cbz	r0, 8009efc <__smakebuf_r+0x70>
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	f023 0303 	bic.w	r3, r3, #3
 8009ef6:	f043 0301 	orr.w	r3, r3, #1
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	431d      	orrs	r5, r3
 8009f00:	81a5      	strh	r5, [r4, #12]
 8009f02:	e7cf      	b.n	8009ea4 <__smakebuf_r+0x18>

08009f04 <_fstat_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4d07      	ldr	r5, [pc, #28]	; (8009f24 <_fstat_r+0x20>)
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	4611      	mov	r1, r2
 8009f10:	602b      	str	r3, [r5, #0]
 8009f12:	f7f7 fbb2 	bl	800167a <_fstat>
 8009f16:	1c43      	adds	r3, r0, #1
 8009f18:	d102      	bne.n	8009f20 <_fstat_r+0x1c>
 8009f1a:	682b      	ldr	r3, [r5, #0]
 8009f1c:	b103      	cbz	r3, 8009f20 <_fstat_r+0x1c>
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	bd38      	pop	{r3, r4, r5, pc}
 8009f22:	bf00      	nop
 8009f24:	20000614 	.word	0x20000614

08009f28 <_isatty_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d06      	ldr	r5, [pc, #24]	; (8009f44 <_isatty_r+0x1c>)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	602b      	str	r3, [r5, #0]
 8009f34:	f7f7 fbb1 	bl	800169a <_isatty>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_isatty_r+0x1a>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_isatty_r+0x1a>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	20000614 	.word	0x20000614

08009f48 <_init>:
 8009f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4a:	bf00      	nop
 8009f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f4e:	bc08      	pop	{r3}
 8009f50:	469e      	mov	lr, r3
 8009f52:	4770      	bx	lr

08009f54 <_fini>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	bf00      	nop
 8009f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5a:	bc08      	pop	{r3}
 8009f5c:	469e      	mov	lr, r3
 8009f5e:	4770      	bx	lr
